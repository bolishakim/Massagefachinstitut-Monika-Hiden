
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  avatar: 'avatar',
  phone: 'phone',
  timezone: 'timezone',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  emailVerified: 'emailVerified',
  emailVerificationToken: 'emailVerificationToken',
  mfaEnabled: 'mfaEnabled',
  mfaSecret: 'mfaSecret',
  mfaBackupCodes: 'mfaBackupCodes',
  mfaLastUsed: 'mfaLastUsed',
  refreshToken: 'refreshToken',
  lastLoginAt: 'lastLoginAt',
  specialization: 'specialization'
};

exports.Prisma.StaffScheduleScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  breakStartTime: 'breakStartTime',
  breakEndTime: 'breakEndTime',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StaffLeaveScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  startDate: 'startDate',
  endDate: 'endDate',
  reason: 'reason',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  features: 'features',
  createdById: 'createdById',
  modifiedById: 'modifiedById',
  isActive: 'isActive',
  capacity: 'capacity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameGerman: 'nameGerman',
  description: 'description',
  duration: 'duration',
  price: 'price',
  category: 'category',
  categoryColor: 'categoryColor',
  isForChildren: 'isForChildren',
  isVoucher: 'isVoucher',
  createdById: 'createdById',
  modifiedById: 'modifiedById',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  email: 'email',
  phone: 'phone',
  address: 'address',
  socialInsuranceNumber: 'socialInsuranceNumber',
  notes: 'notes',
  doctorReferral: 'doctorReferral',
  insuranceType: 'insuranceType',
  createdById: 'createdById',
  modifiedById: 'modifiedById',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientHistoryScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  packageId: 'packageId',
  appointmentId: 'appointmentId',
  mainSubjectiveProblem: 'mainSubjectiveProblem',
  symptomHistory: 'symptomHistory',
  previousCourseAndTherapy: 'previousCourseAndTherapy',
  patientGoals: 'patientGoals',
  activityStatus: 'activityStatus',
  trunkAndHeadParticularities: 'trunkAndHeadParticularities',
  edemaTrophicsAtrophies: 'edemaTrophicsAtrophies',
  notes: 'notes',
  createdById: 'createdById',
  modifiedById: 'modifiedById',
  recordedAt: 'recordedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  name: 'name',
  totalPrice: 'totalPrice',
  discountAmount: 'discountAmount',
  finalPrice: 'finalPrice',
  status: 'status',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageItemScalarFieldEnum = {
  id: 'id',
  packageId: 'packageId',
  serviceId: 'serviceId',
  sessionCount: 'sessionCount',
  completedCount: 'completedCount'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  packageId: 'packageId',
  serviceId: 'serviceId',
  staffId: 'staffId',
  roomId: 'roomId',
  scheduledDate: 'scheduledDate',
  startTime: 'startTime',
  endTime: 'endTime',
  status: 'status',
  notes: 'notes',
  hasConflict: 'hasConflict',
  conflictReason: 'conflictReason',
  isVisible: 'isVisible',
  createdById: 'createdById',
  modifiedById: 'modifiedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  packageId: 'packageId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paidSessionsCount: 'paidSessionsCount',
  status: 'status',
  paidAt: 'paidAt',
  notes: 'notes',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  scheduledFor: 'scheduledFor',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CalendarSettingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  workingHoursStart: 'workingHoursStart',
  workingHoursEnd: 'workingHoursEnd',
  timeSlotInterval: 'timeSlotInterval',
  showWeekends: 'showWeekends',
  defaultView: 'defaultView',
  showStaffAvailability: 'showStaffAvailability',
  showRoomInfo: 'showRoomInfo',
  autoRefreshInterval: 'autoRefreshInterval',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsentRecordScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  consentType: 'consentType',
  granted: 'granted',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  consentString: 'consentString',
  expiresAt: 'expiresAt',
  withdrawnAt: 'withdrawnAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DataExportRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  requestType: 'requestType',
  status: 'status',
  requestedData: 'requestedData',
  filePath: 'filePath',
  downloadedAt: 'downloadedAt',
  expiresAt: 'expiresAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GDPRAuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  dataType: 'dataType',
  recordId: 'recordId',
  legalBasis: 'legalBasis',
  purpose: 'purpose',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  consentId: 'consentId',
  automated: 'automated',
  createdAt: 'createdAt'
};

exports.Prisma.DataRetentionPolicyScalarFieldEnum = {
  id: 'id',
  dataType: 'dataType',
  retentionPeriod: 'retentionPeriod',
  description: 'description',
  legalBasis: 'legalBasis',
  autoDelete: 'autoDelete',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  USER: 'USER'
};

exports.StaffSpecialization = exports.$Enums.StaffSpecialization = {
  MASSAGE: 'MASSAGE',
  PHYSIOTHERAPY: 'PHYSIOTHERAPY',
  INFRARED_CHAIR: 'INFRARED_CHAIR',
  TRAINING: 'TRAINING',
  HEILMASSAGE: 'HEILMASSAGE',
  MEDICAL_MASSAGE: 'MEDICAL_MASSAGE'
};

exports.ServiceCategory = exports.$Enums.ServiceCategory = {
  MASSAGE: 'MASSAGE',
  PHYSIOTHERAPY: 'PHYSIOTHERAPY',
  INFRARED_CHAIR: 'INFRARED_CHAIR',
  TRAINING: 'TRAINING',
  HEILMASSAGE: 'HEILMASSAGE',
  COMBINATION: 'COMBINATION',
  VOUCHER: 'VOUCHER'
};

exports.InsuranceType = exports.$Enums.InsuranceType = {
  PUBLIC_INSURANCE: 'PUBLIC_INSURANCE',
  PRIVATE_INSURANCE: 'PRIVATE_INSURANCE',
  SELF_PAY: 'SELF_PAY'
};

exports.PackageStatus = exports.$Enums.PackageStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  REFUNDED: 'REFUNDED'
};

exports.AuditAction = exports.$Enums.AuditAction = {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  APPOINTMENT_REMINDER: 'APPOINTMENT_REMINDER',
  PAYMENT_DUE: 'PAYMENT_DUE',
  STAFF_LEAVE_REQUEST: 'STAFF_LEAVE_REQUEST',
  PACKAGE_EXPIRING: 'PACKAGE_EXPIRING',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  APPOINTMENT_CONFLICT: 'APPOINTMENT_CONFLICT'
};

exports.ConsentType = exports.$Enums.ConsentType = {
  NECESSARY: 'NECESSARY',
  SYSTEM_OPTIMIZATION: 'SYSTEM_OPTIMIZATION',
  NOTIFICATIONS: 'NOTIFICATIONS',
  AUDIT_MONITORING: 'AUDIT_MONITORING'
};

exports.DataRequestType = exports.$Enums.DataRequestType = {
  EXPORT: 'EXPORT',
  DELETE: 'DELETE',
  RESTRICT: 'RESTRICT'
};

exports.DataRequestStatus = exports.$Enums.DataRequestStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

exports.GDPRAction = exports.$Enums.GDPRAction = {
  DATA_ACCESS: 'DATA_ACCESS',
  DATA_EXPORT: 'DATA_EXPORT',
  DATA_MODIFICATION: 'DATA_MODIFICATION',
  DATA_DELETION: 'DATA_DELETION',
  CONSENT_GIVEN: 'CONSENT_GIVEN',
  CONSENT_WITHDRAWN: 'CONSENT_WITHDRAWN',
  PROCESSING_RESTRICTED: 'PROCESSING_RESTRICTED'
};

exports.Prisma.ModelName = {
  User: 'User',
  StaffSchedule: 'StaffSchedule',
  StaffLeave: 'StaffLeave',
  Room: 'Room',
  Service: 'Service',
  Patient: 'Patient',
  PatientHistory: 'PatientHistory',
  Package: 'Package',
  PackageItem: 'PackageItem',
  Appointment: 'Appointment',
  Payment: 'Payment',
  AuditLog: 'AuditLog',
  UserSession: 'UserSession',
  SystemSetting: 'SystemSetting',
  Notification: 'Notification',
  CalendarSetting: 'CalendarSetting',
  ConsentRecord: 'ConsentRecord',
  DataExportRequest: 'DataExportRequest',
  GDPRAuditLog: 'GDPRAuditLog',
  DataRetentionPolicy: 'DataRetentionPolicy'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
