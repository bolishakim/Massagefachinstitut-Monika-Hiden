
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model StaffSchedule
 * 
 */
export type StaffSchedule = $Result.DefaultSelection<Prisma.$StaffSchedulePayload>
/**
 * Model StaffLeave
 * 
 */
export type StaffLeave = $Result.DefaultSelection<Prisma.$StaffLeavePayload>
/**
 * Model Room
 * 
 */
export type Room = $Result.DefaultSelection<Prisma.$RoomPayload>
/**
 * Model Service
 * 
 */
export type Service = $Result.DefaultSelection<Prisma.$ServicePayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model PatientHistory
 * 
 */
export type PatientHistory = $Result.DefaultSelection<Prisma.$PatientHistoryPayload>
/**
 * Model Package
 * 
 */
export type Package = $Result.DefaultSelection<Prisma.$PackagePayload>
/**
 * Model PackageItem
 * 
 */
export type PackageItem = $Result.DefaultSelection<Prisma.$PackageItemPayload>
/**
 * Model Appointment
 * 
 */
export type Appointment = $Result.DefaultSelection<Prisma.$AppointmentPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model SystemSetting
 * 
 */
export type SystemSetting = $Result.DefaultSelection<Prisma.$SystemSettingPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model CalendarSetting
 * 
 */
export type CalendarSetting = $Result.DefaultSelection<Prisma.$CalendarSettingPayload>
/**
 * Model ConsentRecord
 * 
 */
export type ConsentRecord = $Result.DefaultSelection<Prisma.$ConsentRecordPayload>
/**
 * Model DataExportRequest
 * 
 */
export type DataExportRequest = $Result.DefaultSelection<Prisma.$DataExportRequestPayload>
/**
 * Model GDPRAuditLog
 * 
 */
export type GDPRAuditLog = $Result.DefaultSelection<Prisma.$GDPRAuditLogPayload>
/**
 * Model DataRetentionPolicy
 * 
 */
export type DataRetentionPolicy = $Result.DefaultSelection<Prisma.$DataRetentionPolicyPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const StaffSpecialization: {
  MASSAGE: 'MASSAGE',
  PHYSIOTHERAPY: 'PHYSIOTHERAPY',
  INFRARED_CHAIR: 'INFRARED_CHAIR',
  TRAINING: 'TRAINING',
  HEILMASSAGE: 'HEILMASSAGE',
  MEDICAL_MASSAGE: 'MEDICAL_MASSAGE'
};

export type StaffSpecialization = (typeof StaffSpecialization)[keyof typeof StaffSpecialization]


export const ServiceCategory: {
  MASSAGE: 'MASSAGE',
  PHYSIOTHERAPY: 'PHYSIOTHERAPY',
  INFRARED_CHAIR: 'INFRARED_CHAIR',
  TRAINING: 'TRAINING',
  HEILMASSAGE: 'HEILMASSAGE',
  COMBINATION: 'COMBINATION',
  VOUCHER: 'VOUCHER'
};

export type ServiceCategory = (typeof ServiceCategory)[keyof typeof ServiceCategory]


export const InsuranceType: {
  PUBLIC_INSURANCE: 'PUBLIC_INSURANCE',
  PRIVATE_INSURANCE: 'PRIVATE_INSURANCE',
  SELF_PAY: 'SELF_PAY'
};

export type InsuranceType = (typeof InsuranceType)[keyof typeof InsuranceType]


export const PackageStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type PackageStatus = (typeof PackageStatus)[keyof typeof PackageStatus]


export const AppointmentStatus: {
  SCHEDULED: 'SCHEDULED',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

export type AppointmentStatus = (typeof AppointmentStatus)[keyof typeof AppointmentStatus]


export const PaymentMethod: {
  CASH: 'CASH',
  CARD: 'CARD',
  BANK_TRANSFER: 'BANK_TRANSFER'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const PaymentStatus: {
  NONE: 'NONE',
  PARTIALLY_PAID: 'PARTIALLY_PAID',
  COMPLETED: 'COMPLETED',
  PENDING: 'PENDING',
  REFUNDED: 'REFUNDED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const AuditAction: {
  CREATE: 'CREATE',
  UPDATE: 'UPDATE',
  DELETE: 'DELETE',
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  LOGIN_FAILED: 'LOGIN_FAILED',
  TOKEN_REFRESH: 'TOKEN_REFRESH',
  TOKEN_REFRESH_FAILED: 'TOKEN_REFRESH_FAILED',
  VIEW_LIST: 'VIEW_LIST',
  VIEW_DETAILED: 'VIEW_DETAILED',
  EXPORT: 'EXPORT',
  UNKNOWN: 'UNKNOWN'
};

export type AuditAction = (typeof AuditAction)[keyof typeof AuditAction]


export const NotificationType: {
  APPOINTMENT_REMINDER: 'APPOINTMENT_REMINDER',
  PAYMENT_DUE: 'PAYMENT_DUE',
  STAFF_LEAVE_REQUEST: 'STAFF_LEAVE_REQUEST',
  PACKAGE_EXPIRING: 'PACKAGE_EXPIRING',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  APPOINTMENT_CONFLICT: 'APPOINTMENT_CONFLICT'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const ConsentType: {
  NECESSARY: 'NECESSARY',
  SYSTEM_OPTIMIZATION: 'SYSTEM_OPTIMIZATION',
  NOTIFICATIONS: 'NOTIFICATIONS',
  AUDIT_MONITORING: 'AUDIT_MONITORING'
};

export type ConsentType = (typeof ConsentType)[keyof typeof ConsentType]


export const DataRequestType: {
  EXPORT: 'EXPORT',
  DELETE: 'DELETE',
  RESTRICT: 'RESTRICT'
};

export type DataRequestType = (typeof DataRequestType)[keyof typeof DataRequestType]


export const DataRequestStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED'
};

export type DataRequestStatus = (typeof DataRequestStatus)[keyof typeof DataRequestStatus]


export const GDPRAction: {
  DATA_ACCESS: 'DATA_ACCESS',
  DATA_EXPORT: 'DATA_EXPORT',
  DATA_MODIFICATION: 'DATA_MODIFICATION',
  DATA_DELETION: 'DATA_DELETION',
  CONSENT_GIVEN: 'CONSENT_GIVEN',
  CONSENT_WITHDRAWN: 'CONSENT_WITHDRAWN',
  PROCESSING_RESTRICTED: 'PROCESSING_RESTRICTED'
};

export type GDPRAction = (typeof GDPRAction)[keyof typeof GDPRAction]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type StaffSpecialization = $Enums.StaffSpecialization

export const StaffSpecialization: typeof $Enums.StaffSpecialization

export type ServiceCategory = $Enums.ServiceCategory

export const ServiceCategory: typeof $Enums.ServiceCategory

export type InsuranceType = $Enums.InsuranceType

export const InsuranceType: typeof $Enums.InsuranceType

export type PackageStatus = $Enums.PackageStatus

export const PackageStatus: typeof $Enums.PackageStatus

export type AppointmentStatus = $Enums.AppointmentStatus

export const AppointmentStatus: typeof $Enums.AppointmentStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type AuditAction = $Enums.AuditAction

export const AuditAction: typeof $Enums.AuditAction

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type ConsentType = $Enums.ConsentType

export const ConsentType: typeof $Enums.ConsentType

export type DataRequestType = $Enums.DataRequestType

export const DataRequestType: typeof $Enums.DataRequestType

export type DataRequestStatus = $Enums.DataRequestStatus

export const DataRequestStatus: typeof $Enums.DataRequestStatus

export type GDPRAction = $Enums.GDPRAction

export const GDPRAction: typeof $Enums.GDPRAction

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staffSchedule`: Exposes CRUD operations for the **StaffSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffSchedules
    * const staffSchedules = await prisma.staffSchedule.findMany()
    * ```
    */
  get staffSchedule(): Prisma.StaffScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staffLeave`: Exposes CRUD operations for the **StaffLeave** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StaffLeaves
    * const staffLeaves = await prisma.staffLeave.findMany()
    * ```
    */
  get staffLeave(): Prisma.StaffLeaveDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.room`: Exposes CRUD operations for the **Room** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rooms
    * const rooms = await prisma.room.findMany()
    * ```
    */
  get room(): Prisma.RoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.service`: Exposes CRUD operations for the **Service** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Services
    * const services = await prisma.service.findMany()
    * ```
    */
  get service(): Prisma.ServiceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientHistory`: Exposes CRUD operations for the **PatientHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientHistories
    * const patientHistories = await prisma.patientHistory.findMany()
    * ```
    */
  get patientHistory(): Prisma.PatientHistoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.package`: Exposes CRUD operations for the **Package** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packages
    * const packages = await prisma.package.findMany()
    * ```
    */
  get package(): Prisma.PackageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.packageItem`: Exposes CRUD operations for the **PackageItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PackageItems
    * const packageItems = await prisma.packageItem.findMany()
    * ```
    */
  get packageItem(): Prisma.PackageItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.systemSetting`: Exposes CRUD operations for the **SystemSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSetting.findMany()
    * ```
    */
  get systemSetting(): Prisma.SystemSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.calendarSetting`: Exposes CRUD operations for the **CalendarSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CalendarSettings
    * const calendarSettings = await prisma.calendarSetting.findMany()
    * ```
    */
  get calendarSetting(): Prisma.CalendarSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consentRecord`: Exposes CRUD operations for the **ConsentRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ConsentRecords
    * const consentRecords = await prisma.consentRecord.findMany()
    * ```
    */
  get consentRecord(): Prisma.ConsentRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dataExportRequest`: Exposes CRUD operations for the **DataExportRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DataExportRequests
    * const dataExportRequests = await prisma.dataExportRequest.findMany()
    * ```
    */
  get dataExportRequest(): Prisma.DataExportRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.gDPRAuditLog`: Exposes CRUD operations for the **GDPRAuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GDPRAuditLogs
    * const gDPRAuditLogs = await prisma.gDPRAuditLog.findMany()
    * ```
    */
  get gDPRAuditLog(): Prisma.GDPRAuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.dataRetentionPolicy`: Exposes CRUD operations for the **DataRetentionPolicy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DataRetentionPolicies
    * const dataRetentionPolicies = await prisma.dataRetentionPolicy.findMany()
    * ```
    */
  get dataRetentionPolicy(): Prisma.DataRetentionPolicyDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    StaffSchedule: 'StaffSchedule',
    StaffLeave: 'StaffLeave',
    Room: 'Room',
    Service: 'Service',
    Patient: 'Patient',
    PatientHistory: 'PatientHistory',
    Package: 'Package',
    PackageItem: 'PackageItem',
    Appointment: 'Appointment',
    Payment: 'Payment',
    AuditLog: 'AuditLog',
    UserSession: 'UserSession',
    SystemSetting: 'SystemSetting',
    Notification: 'Notification',
    CalendarSetting: 'CalendarSetting',
    ConsentRecord: 'ConsentRecord',
    DataExportRequest: 'DataExportRequest',
    GDPRAuditLog: 'GDPRAuditLog',
    DataRetentionPolicy: 'DataRetentionPolicy'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "staffSchedule" | "staffLeave" | "room" | "service" | "patient" | "patientHistory" | "package" | "packageItem" | "appointment" | "payment" | "auditLog" | "userSession" | "systemSetting" | "notification" | "calendarSetting" | "consentRecord" | "dataExportRequest" | "gDPRAuditLog" | "dataRetentionPolicy"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      StaffSchedule: {
        payload: Prisma.$StaffSchedulePayload<ExtArgs>
        fields: Prisma.StaffScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>
          }
          findFirst: {
            args: Prisma.StaffScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>
          }
          findMany: {
            args: Prisma.StaffScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>[]
          }
          create: {
            args: Prisma.StaffScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>
          }
          createMany: {
            args: Prisma.StaffScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>[]
          }
          delete: {
            args: Prisma.StaffScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>
          }
          update: {
            args: Prisma.StaffScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>
          }
          deleteMany: {
            args: Prisma.StaffScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>[]
          }
          upsert: {
            args: Prisma.StaffScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffSchedulePayload>
          }
          aggregate: {
            args: Prisma.StaffScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffSchedule>
          }
          groupBy: {
            args: Prisma.StaffScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<StaffScheduleCountAggregateOutputType> | number
          }
        }
      }
      StaffLeave: {
        payload: Prisma.$StaffLeavePayload<ExtArgs>
        fields: Prisma.StaffLeaveFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StaffLeaveFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StaffLeaveFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>
          }
          findFirst: {
            args: Prisma.StaffLeaveFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StaffLeaveFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>
          }
          findMany: {
            args: Prisma.StaffLeaveFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>[]
          }
          create: {
            args: Prisma.StaffLeaveCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>
          }
          createMany: {
            args: Prisma.StaffLeaveCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StaffLeaveCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>[]
          }
          delete: {
            args: Prisma.StaffLeaveDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>
          }
          update: {
            args: Prisma.StaffLeaveUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>
          }
          deleteMany: {
            args: Prisma.StaffLeaveDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StaffLeaveUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StaffLeaveUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>[]
          }
          upsert: {
            args: Prisma.StaffLeaveUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StaffLeavePayload>
          }
          aggregate: {
            args: Prisma.StaffLeaveAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaffLeave>
          }
          groupBy: {
            args: Prisma.StaffLeaveGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffLeaveGroupByOutputType>[]
          }
          count: {
            args: Prisma.StaffLeaveCountArgs<ExtArgs>
            result: $Utils.Optional<StaffLeaveCountAggregateOutputType> | number
          }
        }
      }
      Room: {
        payload: Prisma.$RoomPayload<ExtArgs>
        fields: Prisma.RoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findFirst: {
            args: Prisma.RoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          findMany: {
            args: Prisma.RoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          create: {
            args: Prisma.RoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          createMany: {
            args: Prisma.RoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoomCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          delete: {
            args: Prisma.RoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          update: {
            args: Prisma.RoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          deleteMany: {
            args: Prisma.RoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoomUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>[]
          }
          upsert: {
            args: Prisma.RoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoomPayload>
          }
          aggregate: {
            args: Prisma.RoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoom>
          }
          groupBy: {
            args: Prisma.RoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoomCountArgs<ExtArgs>
            result: $Utils.Optional<RoomCountAggregateOutputType> | number
          }
        }
      }
      Service: {
        payload: Prisma.$ServicePayload<ExtArgs>
        fields: Prisma.ServiceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ServiceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ServiceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findFirst: {
            args: Prisma.ServiceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ServiceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          findMany: {
            args: Prisma.ServiceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          create: {
            args: Prisma.ServiceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          createMany: {
            args: Prisma.ServiceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ServiceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          delete: {
            args: Prisma.ServiceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          update: {
            args: Prisma.ServiceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          deleteMany: {
            args: Prisma.ServiceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ServiceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ServiceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>[]
          }
          upsert: {
            args: Prisma.ServiceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ServicePayload>
          }
          aggregate: {
            args: Prisma.ServiceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateService>
          }
          groupBy: {
            args: Prisma.ServiceGroupByArgs<ExtArgs>
            result: $Utils.Optional<ServiceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ServiceCountArgs<ExtArgs>
            result: $Utils.Optional<ServiceCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      PatientHistory: {
        payload: Prisma.$PatientHistoryPayload<ExtArgs>
        fields: Prisma.PatientHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>
          }
          findFirst: {
            args: Prisma.PatientHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>
          }
          findMany: {
            args: Prisma.PatientHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>[]
          }
          create: {
            args: Prisma.PatientHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>
          }
          createMany: {
            args: Prisma.PatientHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>[]
          }
          delete: {
            args: Prisma.PatientHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>
          }
          update: {
            args: Prisma.PatientHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>
          }
          deleteMany: {
            args: Prisma.PatientHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>[]
          }
          upsert: {
            args: Prisma.PatientHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientHistoryPayload>
          }
          aggregate: {
            args: Prisma.PatientHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientHistory>
          }
          groupBy: {
            args: Prisma.PatientHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<PatientHistoryCountAggregateOutputType> | number
          }
        }
      }
      Package: {
        payload: Prisma.$PackagePayload<ExtArgs>
        fields: Prisma.PackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findFirst: {
            args: Prisma.PackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findMany: {
            args: Prisma.PackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          create: {
            args: Prisma.PackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          createMany: {
            args: Prisma.PackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          delete: {
            args: Prisma.PackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          update: {
            args: Prisma.PackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          deleteMany: {
            args: Prisma.PackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PackageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          upsert: {
            args: Prisma.PackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          aggregate: {
            args: Prisma.PackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackage>
          }
          groupBy: {
            args: Prisma.PackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageCountArgs<ExtArgs>
            result: $Utils.Optional<PackageCountAggregateOutputType> | number
          }
        }
      }
      PackageItem: {
        payload: Prisma.$PackageItemPayload<ExtArgs>
        fields: Prisma.PackageItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>
          }
          findFirst: {
            args: Prisma.PackageItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>
          }
          findMany: {
            args: Prisma.PackageItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>[]
          }
          create: {
            args: Prisma.PackageItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>
          }
          createMany: {
            args: Prisma.PackageItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageItemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>[]
          }
          delete: {
            args: Prisma.PackageItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>
          }
          update: {
            args: Prisma.PackageItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>
          }
          deleteMany: {
            args: Prisma.PackageItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PackageItemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>[]
          }
          upsert: {
            args: Prisma.PackageItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageItemPayload>
          }
          aggregate: {
            args: Prisma.PackageItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackageItem>
          }
          groupBy: {
            args: Prisma.PackageItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageItemCountArgs<ExtArgs>
            result: $Utils.Optional<PackageItemCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: Prisma.$AppointmentPayload<ExtArgs>
        fields: Prisma.AppointmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AppointmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AppointmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>[]
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PaymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      SystemSetting: {
        payload: Prisma.$SystemSettingPayload<ExtArgs>
        fields: Prisma.SystemSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          findMany: {
            args: Prisma.SystemSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
          }
          create: {
            args: Prisma.SystemSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          createMany: {
            args: Prisma.SystemSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
          }
          delete: {
            args: Prisma.SystemSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          update: {
            args: Prisma.SystemSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
          }
          upsert: {
            args: Prisma.SystemSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSetting>
          }
          groupBy: {
            args: Prisma.SystemSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      CalendarSetting: {
        payload: Prisma.$CalendarSettingPayload<ExtArgs>
        fields: Prisma.CalendarSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CalendarSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CalendarSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>
          }
          findFirst: {
            args: Prisma.CalendarSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CalendarSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>
          }
          findMany: {
            args: Prisma.CalendarSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>[]
          }
          create: {
            args: Prisma.CalendarSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>
          }
          createMany: {
            args: Prisma.CalendarSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CalendarSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>[]
          }
          delete: {
            args: Prisma.CalendarSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>
          }
          update: {
            args: Prisma.CalendarSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>
          }
          deleteMany: {
            args: Prisma.CalendarSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CalendarSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CalendarSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>[]
          }
          upsert: {
            args: Prisma.CalendarSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CalendarSettingPayload>
          }
          aggregate: {
            args: Prisma.CalendarSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCalendarSetting>
          }
          groupBy: {
            args: Prisma.CalendarSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<CalendarSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.CalendarSettingCountArgs<ExtArgs>
            result: $Utils.Optional<CalendarSettingCountAggregateOutputType> | number
          }
        }
      }
      ConsentRecord: {
        payload: Prisma.$ConsentRecordPayload<ExtArgs>
        fields: Prisma.ConsentRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ConsentRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ConsentRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          findFirst: {
            args: Prisma.ConsentRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ConsentRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          findMany: {
            args: Prisma.ConsentRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>[]
          }
          create: {
            args: Prisma.ConsentRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          createMany: {
            args: Prisma.ConsentRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ConsentRecordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>[]
          }
          delete: {
            args: Prisma.ConsentRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          update: {
            args: Prisma.ConsentRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          deleteMany: {
            args: Prisma.ConsentRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ConsentRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ConsentRecordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>[]
          }
          upsert: {
            args: Prisma.ConsentRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ConsentRecordPayload>
          }
          aggregate: {
            args: Prisma.ConsentRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsentRecord>
          }
          groupBy: {
            args: Prisma.ConsentRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsentRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.ConsentRecordCountArgs<ExtArgs>
            result: $Utils.Optional<ConsentRecordCountAggregateOutputType> | number
          }
        }
      }
      DataExportRequest: {
        payload: Prisma.$DataExportRequestPayload<ExtArgs>
        fields: Prisma.DataExportRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DataExportRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DataExportRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>
          }
          findFirst: {
            args: Prisma.DataExportRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DataExportRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>
          }
          findMany: {
            args: Prisma.DataExportRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>[]
          }
          create: {
            args: Prisma.DataExportRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>
          }
          createMany: {
            args: Prisma.DataExportRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DataExportRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>[]
          }
          delete: {
            args: Prisma.DataExportRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>
          }
          update: {
            args: Prisma.DataExportRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>
          }
          deleteMany: {
            args: Prisma.DataExportRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DataExportRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DataExportRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>[]
          }
          upsert: {
            args: Prisma.DataExportRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataExportRequestPayload>
          }
          aggregate: {
            args: Prisma.DataExportRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDataExportRequest>
          }
          groupBy: {
            args: Prisma.DataExportRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<DataExportRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.DataExportRequestCountArgs<ExtArgs>
            result: $Utils.Optional<DataExportRequestCountAggregateOutputType> | number
          }
        }
      }
      GDPRAuditLog: {
        payload: Prisma.$GDPRAuditLogPayload<ExtArgs>
        fields: Prisma.GDPRAuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GDPRAuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GDPRAuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>
          }
          findFirst: {
            args: Prisma.GDPRAuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GDPRAuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>
          }
          findMany: {
            args: Prisma.GDPRAuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>[]
          }
          create: {
            args: Prisma.GDPRAuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>
          }
          createMany: {
            args: Prisma.GDPRAuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GDPRAuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>[]
          }
          delete: {
            args: Prisma.GDPRAuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>
          }
          update: {
            args: Prisma.GDPRAuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>
          }
          deleteMany: {
            args: Prisma.GDPRAuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GDPRAuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GDPRAuditLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>[]
          }
          upsert: {
            args: Prisma.GDPRAuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GDPRAuditLogPayload>
          }
          aggregate: {
            args: Prisma.GDPRAuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGDPRAuditLog>
          }
          groupBy: {
            args: Prisma.GDPRAuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<GDPRAuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.GDPRAuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<GDPRAuditLogCountAggregateOutputType> | number
          }
        }
      }
      DataRetentionPolicy: {
        payload: Prisma.$DataRetentionPolicyPayload<ExtArgs>
        fields: Prisma.DataRetentionPolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DataRetentionPolicyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DataRetentionPolicyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>
          }
          findFirst: {
            args: Prisma.DataRetentionPolicyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DataRetentionPolicyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>
          }
          findMany: {
            args: Prisma.DataRetentionPolicyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>[]
          }
          create: {
            args: Prisma.DataRetentionPolicyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>
          }
          createMany: {
            args: Prisma.DataRetentionPolicyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DataRetentionPolicyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>[]
          }
          delete: {
            args: Prisma.DataRetentionPolicyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>
          }
          update: {
            args: Prisma.DataRetentionPolicyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>
          }
          deleteMany: {
            args: Prisma.DataRetentionPolicyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DataRetentionPolicyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DataRetentionPolicyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>[]
          }
          upsert: {
            args: Prisma.DataRetentionPolicyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DataRetentionPolicyPayload>
          }
          aggregate: {
            args: Prisma.DataRetentionPolicyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDataRetentionPolicy>
          }
          groupBy: {
            args: Prisma.DataRetentionPolicyGroupByArgs<ExtArgs>
            result: $Utils.Optional<DataRetentionPolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.DataRetentionPolicyCountArgs<ExtArgs>
            result: $Utils.Optional<DataRetentionPolicyCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    staffSchedule?: StaffScheduleOmit
    staffLeave?: StaffLeaveOmit
    room?: RoomOmit
    service?: ServiceOmit
    patient?: PatientOmit
    patientHistory?: PatientHistoryOmit
    package?: PackageOmit
    packageItem?: PackageItemOmit
    appointment?: AppointmentOmit
    payment?: PaymentOmit
    auditLog?: AuditLogOmit
    userSession?: UserSessionOmit
    systemSetting?: SystemSettingOmit
    notification?: NotificationOmit
    calendarSetting?: CalendarSettingOmit
    consentRecord?: ConsentRecordOmit
    dataExportRequest?: DataExportRequestOmit
    gDPRAuditLog?: GDPRAuditLogOmit
    dataRetentionPolicy?: DataRetentionPolicyOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    staffSchedules: number
    staffLeaves: number
    appointments: number
    auditLogs: number
    userSessions: number
    createdPackages: number
    createdPayments: number
    notifications: number
    patientsCreated: number
    appointmentsCreated: number
    servicesCreated: number
    roomsCreated: number
    patientHistoryCreated: number
    patientsModified: number
    appointmentsModified: number
    servicesModified: number
    roomsModified: number
    patientHistoryModified: number
    consentRecords: number
    dataExportRequests: number
    gdprAuditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staffSchedules?: boolean | UserCountOutputTypeCountStaffSchedulesArgs
    staffLeaves?: boolean | UserCountOutputTypeCountStaffLeavesArgs
    appointments?: boolean | UserCountOutputTypeCountAppointmentsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    userSessions?: boolean | UserCountOutputTypeCountUserSessionsArgs
    createdPackages?: boolean | UserCountOutputTypeCountCreatedPackagesArgs
    createdPayments?: boolean | UserCountOutputTypeCountCreatedPaymentsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    patientsCreated?: boolean | UserCountOutputTypeCountPatientsCreatedArgs
    appointmentsCreated?: boolean | UserCountOutputTypeCountAppointmentsCreatedArgs
    servicesCreated?: boolean | UserCountOutputTypeCountServicesCreatedArgs
    roomsCreated?: boolean | UserCountOutputTypeCountRoomsCreatedArgs
    patientHistoryCreated?: boolean | UserCountOutputTypeCountPatientHistoryCreatedArgs
    patientsModified?: boolean | UserCountOutputTypeCountPatientsModifiedArgs
    appointmentsModified?: boolean | UserCountOutputTypeCountAppointmentsModifiedArgs
    servicesModified?: boolean | UserCountOutputTypeCountServicesModifiedArgs
    roomsModified?: boolean | UserCountOutputTypeCountRoomsModifiedArgs
    patientHistoryModified?: boolean | UserCountOutputTypeCountPatientHistoryModifiedArgs
    consentRecords?: boolean | UserCountOutputTypeCountConsentRecordsArgs
    dataExportRequests?: boolean | UserCountOutputTypeCountDataExportRequestsArgs
    gdprAuditLogs?: boolean | UserCountOutputTypeCountGdprAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStaffSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffScheduleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStaffLeavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffLeaveWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountServicesCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoomsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientHistoryCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientsModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAppointmentsModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountServicesModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRoomsModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientHistoryModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConsentRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsentRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDataExportRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataExportRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGdprAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GDPRAuditLogWhereInput
  }


  /**
   * Count Type RoomCountOutputType
   */

  export type RoomCountOutputType = {
    appointments: number
  }

  export type RoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    appointments?: boolean | RoomCountOutputTypeCountAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoomCountOutputType
     */
    select?: RoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoomCountOutputType without action
   */
  export type RoomCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type ServiceCountOutputType
   */

  export type ServiceCountOutputType = {
    packageItems: number
    appointments: number
  }

  export type ServiceCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packageItems?: boolean | ServiceCountOutputTypeCountPackageItemsArgs
    appointments?: boolean | ServiceCountOutputTypeCountAppointmentsArgs
  }

  // Custom InputTypes
  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ServiceCountOutputType
     */
    select?: ServiceCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountPackageItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageItemWhereInput
  }

  /**
   * ServiceCountOutputType without action
   */
  export type ServiceCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    packages: number
    appointments: number
    patientHistory: number
    payments: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packages?: boolean | PatientCountOutputTypeCountPackagesArgs
    appointments?: boolean | PatientCountOutputTypeCountAppointmentsArgs
    patientHistory?: boolean | PatientCountOutputTypeCountPatientHistoryArgs
    payments?: boolean | PatientCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPatientHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHistoryWhereInput
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type PackageCountOutputType
   */

  export type PackageCountOutputType = {
    packageItems: number
    appointments: number
    patientHistory: number
    payments: number
  }

  export type PackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packageItems?: boolean | PackageCountOutputTypeCountPackageItemsArgs
    appointments?: boolean | PackageCountOutputTypeCountAppointmentsArgs
    patientHistory?: boolean | PackageCountOutputTypeCountPatientHistoryArgs
    payments?: boolean | PackageCountOutputTypeCountPaymentsArgs
  }

  // Custom InputTypes
  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageCountOutputType
     */
    select?: PackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountPackageItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageItemWhereInput
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountAppointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountPatientHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHistoryWhereInput
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }


  /**
   * Count Type AppointmentCountOutputType
   */

  export type AppointmentCountOutputType = {
    patientHistory: number
  }

  export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patientHistory?: boolean | AppointmentCountOutputTypeCountPatientHistoryArgs
  }

  // Custom InputTypes
  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountPatientHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    avatar: string | null
    phone: string | null
    timezone: string | null
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    emailVerified: boolean | null
    emailVerificationToken: string | null
    mfaEnabled: boolean | null
    mfaSecret: string | null
    mfaLastUsed: Date | null
    refreshToken: string | null
    lastLoginAt: Date | null
    specialization: $Enums.StaffSpecialization | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    avatar: string | null
    phone: string | null
    timezone: string | null
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    emailVerified: boolean | null
    emailVerificationToken: string | null
    mfaEnabled: boolean | null
    mfaSecret: string | null
    mfaLastUsed: Date | null
    refreshToken: string | null
    lastLoginAt: Date | null
    specialization: $Enums.StaffSpecialization | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    role: number
    isActive: number
    createdAt: number
    updatedAt: number
    avatar: number
    phone: number
    timezone: number
    resetPasswordToken: number
    resetPasswordExpires: number
    emailVerified: number
    emailVerificationToken: number
    mfaEnabled: number
    mfaSecret: number
    mfaBackupCodes: number
    mfaLastUsed: number
    refreshToken: number
    lastLoginAt: number
    specialization: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    avatar?: true
    phone?: true
    timezone?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    emailVerified?: true
    emailVerificationToken?: true
    mfaEnabled?: true
    mfaSecret?: true
    mfaLastUsed?: true
    refreshToken?: true
    lastLoginAt?: true
    specialization?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    avatar?: true
    phone?: true
    timezone?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    emailVerified?: true
    emailVerificationToken?: true
    mfaEnabled?: true
    mfaSecret?: true
    mfaLastUsed?: true
    refreshToken?: true
    lastLoginAt?: true
    specialization?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    avatar?: true
    phone?: true
    timezone?: true
    resetPasswordToken?: true
    resetPasswordExpires?: true
    emailVerified?: true
    emailVerificationToken?: true
    mfaEnabled?: true
    mfaSecret?: true
    mfaBackupCodes?: true
    mfaLastUsed?: true
    refreshToken?: true
    lastLoginAt?: true
    specialization?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    firstName: string
    lastName: string
    role: $Enums.Role
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    avatar: string | null
    phone: string | null
    timezone: string | null
    resetPasswordToken: string | null
    resetPasswordExpires: Date | null
    emailVerified: boolean
    emailVerificationToken: string | null
    mfaEnabled: boolean
    mfaSecret: string | null
    mfaBackupCodes: string[]
    mfaLastUsed: Date | null
    refreshToken: string | null
    lastLoginAt: Date | null
    specialization: $Enums.StaffSpecialization | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatar?: boolean
    phone?: boolean
    timezone?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    mfaBackupCodes?: boolean
    mfaLastUsed?: boolean
    refreshToken?: boolean
    lastLoginAt?: boolean
    specialization?: boolean
    staffSchedules?: boolean | User$staffSchedulesArgs<ExtArgs>
    staffLeaves?: boolean | User$staffLeavesArgs<ExtArgs>
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    userSessions?: boolean | User$userSessionsArgs<ExtArgs>
    createdPackages?: boolean | User$createdPackagesArgs<ExtArgs>
    createdPayments?: boolean | User$createdPaymentsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    patientsCreated?: boolean | User$patientsCreatedArgs<ExtArgs>
    appointmentsCreated?: boolean | User$appointmentsCreatedArgs<ExtArgs>
    servicesCreated?: boolean | User$servicesCreatedArgs<ExtArgs>
    roomsCreated?: boolean | User$roomsCreatedArgs<ExtArgs>
    patientHistoryCreated?: boolean | User$patientHistoryCreatedArgs<ExtArgs>
    patientsModified?: boolean | User$patientsModifiedArgs<ExtArgs>
    appointmentsModified?: boolean | User$appointmentsModifiedArgs<ExtArgs>
    servicesModified?: boolean | User$servicesModifiedArgs<ExtArgs>
    roomsModified?: boolean | User$roomsModifiedArgs<ExtArgs>
    patientHistoryModified?: boolean | User$patientHistoryModifiedArgs<ExtArgs>
    consentRecords?: boolean | User$consentRecordsArgs<ExtArgs>
    dataExportRequests?: boolean | User$dataExportRequestsArgs<ExtArgs>
    gdprAuditLogs?: boolean | User$gdprAuditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatar?: boolean
    phone?: boolean
    timezone?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    mfaBackupCodes?: boolean
    mfaLastUsed?: boolean
    refreshToken?: boolean
    lastLoginAt?: boolean
    specialization?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatar?: boolean
    phone?: boolean
    timezone?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    mfaBackupCodes?: boolean
    mfaLastUsed?: boolean
    refreshToken?: boolean
    lastLoginAt?: boolean
    specialization?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    avatar?: boolean
    phone?: boolean
    timezone?: boolean
    resetPasswordToken?: boolean
    resetPasswordExpires?: boolean
    emailVerified?: boolean
    emailVerificationToken?: boolean
    mfaEnabled?: boolean
    mfaSecret?: boolean
    mfaBackupCodes?: boolean
    mfaLastUsed?: boolean
    refreshToken?: boolean
    lastLoginAt?: boolean
    specialization?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "firstName" | "lastName" | "role" | "isActive" | "createdAt" | "updatedAt" | "avatar" | "phone" | "timezone" | "resetPasswordToken" | "resetPasswordExpires" | "emailVerified" | "emailVerificationToken" | "mfaEnabled" | "mfaSecret" | "mfaBackupCodes" | "mfaLastUsed" | "refreshToken" | "lastLoginAt" | "specialization", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staffSchedules?: boolean | User$staffSchedulesArgs<ExtArgs>
    staffLeaves?: boolean | User$staffLeavesArgs<ExtArgs>
    appointments?: boolean | User$appointmentsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    userSessions?: boolean | User$userSessionsArgs<ExtArgs>
    createdPackages?: boolean | User$createdPackagesArgs<ExtArgs>
    createdPayments?: boolean | User$createdPaymentsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    patientsCreated?: boolean | User$patientsCreatedArgs<ExtArgs>
    appointmentsCreated?: boolean | User$appointmentsCreatedArgs<ExtArgs>
    servicesCreated?: boolean | User$servicesCreatedArgs<ExtArgs>
    roomsCreated?: boolean | User$roomsCreatedArgs<ExtArgs>
    patientHistoryCreated?: boolean | User$patientHistoryCreatedArgs<ExtArgs>
    patientsModified?: boolean | User$patientsModifiedArgs<ExtArgs>
    appointmentsModified?: boolean | User$appointmentsModifiedArgs<ExtArgs>
    servicesModified?: boolean | User$servicesModifiedArgs<ExtArgs>
    roomsModified?: boolean | User$roomsModifiedArgs<ExtArgs>
    patientHistoryModified?: boolean | User$patientHistoryModifiedArgs<ExtArgs>
    consentRecords?: boolean | User$consentRecordsArgs<ExtArgs>
    dataExportRequests?: boolean | User$dataExportRequestsArgs<ExtArgs>
    gdprAuditLogs?: boolean | User$gdprAuditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      staffSchedules: Prisma.$StaffSchedulePayload<ExtArgs>[]
      staffLeaves: Prisma.$StaffLeavePayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      userSessions: Prisma.$UserSessionPayload<ExtArgs>[]
      createdPackages: Prisma.$PackagePayload<ExtArgs>[]
      createdPayments: Prisma.$PaymentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      patientsCreated: Prisma.$PatientPayload<ExtArgs>[]
      appointmentsCreated: Prisma.$AppointmentPayload<ExtArgs>[]
      servicesCreated: Prisma.$ServicePayload<ExtArgs>[]
      roomsCreated: Prisma.$RoomPayload<ExtArgs>[]
      patientHistoryCreated: Prisma.$PatientHistoryPayload<ExtArgs>[]
      patientsModified: Prisma.$PatientPayload<ExtArgs>[]
      appointmentsModified: Prisma.$AppointmentPayload<ExtArgs>[]
      servicesModified: Prisma.$ServicePayload<ExtArgs>[]
      roomsModified: Prisma.$RoomPayload<ExtArgs>[]
      patientHistoryModified: Prisma.$PatientHistoryPayload<ExtArgs>[]
      consentRecords: Prisma.$ConsentRecordPayload<ExtArgs>[]
      dataExportRequests: Prisma.$DataExportRequestPayload<ExtArgs>[]
      gdprAuditLogs: Prisma.$GDPRAuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      firstName: string
      lastName: string
      role: $Enums.Role
      isActive: boolean
      createdAt: Date
      updatedAt: Date
      avatar: string | null
      phone: string | null
      timezone: string | null
      resetPasswordToken: string | null
      resetPasswordExpires: Date | null
      emailVerified: boolean
      emailVerificationToken: string | null
      mfaEnabled: boolean
      mfaSecret: string | null
      mfaBackupCodes: string[]
      mfaLastUsed: Date | null
      refreshToken: string | null
      lastLoginAt: Date | null
      specialization: $Enums.StaffSpecialization | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staffSchedules<T extends User$staffSchedulesArgs<ExtArgs> = {}>(args?: Subset<T, User$staffSchedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staffLeaves<T extends User$staffLeavesArgs<ExtArgs> = {}>(args?: Subset<T, User$staffLeavesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends User$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userSessions<T extends User$userSessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$userSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdPackages<T extends User$createdPackagesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPackagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdPayments<T extends User$createdPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientsCreated<T extends User$patientsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$patientsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointmentsCreated<T extends User$appointmentsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    servicesCreated<T extends User$servicesCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$servicesCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roomsCreated<T extends User$roomsCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$roomsCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientHistoryCreated<T extends User$patientHistoryCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$patientHistoryCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientsModified<T extends User$patientsModifiedArgs<ExtArgs> = {}>(args?: Subset<T, User$patientsModifiedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointmentsModified<T extends User$appointmentsModifiedArgs<ExtArgs> = {}>(args?: Subset<T, User$appointmentsModifiedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    servicesModified<T extends User$servicesModifiedArgs<ExtArgs> = {}>(args?: Subset<T, User$servicesModifiedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    roomsModified<T extends User$roomsModifiedArgs<ExtArgs> = {}>(args?: Subset<T, User$roomsModifiedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientHistoryModified<T extends User$patientHistoryModifiedArgs<ExtArgs> = {}>(args?: Subset<T, User$patientHistoryModifiedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consentRecords<T extends User$consentRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$consentRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    dataExportRequests<T extends User$dataExportRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$dataExportRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    gdprAuditLogs<T extends User$gdprAuditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$gdprAuditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly timezone: FieldRef<"User", 'String'>
    readonly resetPasswordToken: FieldRef<"User", 'String'>
    readonly resetPasswordExpires: FieldRef<"User", 'DateTime'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly emailVerificationToken: FieldRef<"User", 'String'>
    readonly mfaEnabled: FieldRef<"User", 'Boolean'>
    readonly mfaSecret: FieldRef<"User", 'String'>
    readonly mfaBackupCodes: FieldRef<"User", 'String[]'>
    readonly mfaLastUsed: FieldRef<"User", 'DateTime'>
    readonly refreshToken: FieldRef<"User", 'String'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly specialization: FieldRef<"User", 'StaffSpecialization'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.staffSchedules
   */
  export type User$staffSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    where?: StaffScheduleWhereInput
    orderBy?: StaffScheduleOrderByWithRelationInput | StaffScheduleOrderByWithRelationInput[]
    cursor?: StaffScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScheduleScalarFieldEnum | StaffScheduleScalarFieldEnum[]
  }

  /**
   * User.staffLeaves
   */
  export type User$staffLeavesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    where?: StaffLeaveWhereInput
    orderBy?: StaffLeaveOrderByWithRelationInput | StaffLeaveOrderByWithRelationInput[]
    cursor?: StaffLeaveWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffLeaveScalarFieldEnum | StaffLeaveScalarFieldEnum[]
  }

  /**
   * User.appointments
   */
  export type User$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.userSessions
   */
  export type User$userSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User.createdPackages
   */
  export type User$createdPackagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    cursor?: PackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * User.createdPayments
   */
  export type User$createdPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.patientsCreated
   */
  export type User$patientsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.appointmentsCreated
   */
  export type User$appointmentsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.servicesCreated
   */
  export type User$servicesCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * User.roomsCreated
   */
  export type User$roomsCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    cursor?: RoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * User.patientHistoryCreated
   */
  export type User$patientHistoryCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    where?: PatientHistoryWhereInput
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    cursor?: PatientHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientHistoryScalarFieldEnum | PatientHistoryScalarFieldEnum[]
  }

  /**
   * User.patientsModified
   */
  export type User$patientsModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.appointmentsModified
   */
  export type User$appointmentsModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * User.servicesModified
   */
  export type User$servicesModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    cursor?: ServiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * User.roomsModified
   */
  export type User$roomsModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    cursor?: RoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * User.patientHistoryModified
   */
  export type User$patientHistoryModifiedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    where?: PatientHistoryWhereInput
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    cursor?: PatientHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientHistoryScalarFieldEnum | PatientHistoryScalarFieldEnum[]
  }

  /**
   * User.consentRecords
   */
  export type User$consentRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    where?: ConsentRecordWhereInput
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    cursor?: ConsentRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsentRecordScalarFieldEnum | ConsentRecordScalarFieldEnum[]
  }

  /**
   * User.dataExportRequests
   */
  export type User$dataExportRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    where?: DataExportRequestWhereInput
    orderBy?: DataExportRequestOrderByWithRelationInput | DataExportRequestOrderByWithRelationInput[]
    cursor?: DataExportRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DataExportRequestScalarFieldEnum | DataExportRequestScalarFieldEnum[]
  }

  /**
   * User.gdprAuditLogs
   */
  export type User$gdprAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    where?: GDPRAuditLogWhereInput
    orderBy?: GDPRAuditLogOrderByWithRelationInput | GDPRAuditLogOrderByWithRelationInput[]
    cursor?: GDPRAuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GDPRAuditLogScalarFieldEnum | GDPRAuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model StaffSchedule
   */

  export type AggregateStaffSchedule = {
    _count: StaffScheduleCountAggregateOutputType | null
    _avg: StaffScheduleAvgAggregateOutputType | null
    _sum: StaffScheduleSumAggregateOutputType | null
    _min: StaffScheduleMinAggregateOutputType | null
    _max: StaffScheduleMaxAggregateOutputType | null
  }

  export type StaffScheduleAvgAggregateOutputType = {
    dayOfWeek: number | null
  }

  export type StaffScheduleSumAggregateOutputType = {
    dayOfWeek: number | null
  }

  export type StaffScheduleMinAggregateOutputType = {
    id: string | null
    staffId: string | null
    dayOfWeek: number | null
    startTime: string | null
    endTime: string | null
    breakStartTime: string | null
    breakEndTime: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffScheduleMaxAggregateOutputType = {
    id: string | null
    staffId: string | null
    dayOfWeek: number | null
    startTime: string | null
    endTime: string | null
    breakStartTime: string | null
    breakEndTime: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffScheduleCountAggregateOutputType = {
    id: number
    staffId: number
    dayOfWeek: number
    startTime: number
    endTime: number
    breakStartTime: number
    breakEndTime: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffScheduleAvgAggregateInputType = {
    dayOfWeek?: true
  }

  export type StaffScheduleSumAggregateInputType = {
    dayOfWeek?: true
  }

  export type StaffScheduleMinAggregateInputType = {
    id?: true
    staffId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    breakStartTime?: true
    breakEndTime?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffScheduleMaxAggregateInputType = {
    id?: true
    staffId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    breakStartTime?: true
    breakEndTime?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffScheduleCountAggregateInputType = {
    id?: true
    staffId?: true
    dayOfWeek?: true
    startTime?: true
    endTime?: true
    breakStartTime?: true
    breakEndTime?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffSchedule to aggregate.
     */
    where?: StaffScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffSchedules to fetch.
     */
    orderBy?: StaffScheduleOrderByWithRelationInput | StaffScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffSchedules
    **/
    _count?: true | StaffScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffScheduleMaxAggregateInputType
  }

  export type GetStaffScheduleAggregateType<T extends StaffScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffSchedule[P]>
      : GetScalarType<T[P], AggregateStaffSchedule[P]>
  }




  export type StaffScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffScheduleWhereInput
    orderBy?: StaffScheduleOrderByWithAggregationInput | StaffScheduleOrderByWithAggregationInput[]
    by: StaffScheduleScalarFieldEnum[] | StaffScheduleScalarFieldEnum
    having?: StaffScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffScheduleCountAggregateInputType | true
    _avg?: StaffScheduleAvgAggregateInputType
    _sum?: StaffScheduleSumAggregateInputType
    _min?: StaffScheduleMinAggregateInputType
    _max?: StaffScheduleMaxAggregateInputType
  }

  export type StaffScheduleGroupByOutputType = {
    id: string
    staffId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    breakStartTime: string | null
    breakEndTime: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: StaffScheduleCountAggregateOutputType | null
    _avg: StaffScheduleAvgAggregateOutputType | null
    _sum: StaffScheduleSumAggregateOutputType | null
    _min: StaffScheduleMinAggregateOutputType | null
    _max: StaffScheduleMaxAggregateOutputType | null
  }

  type GetStaffScheduleGroupByPayload<T extends StaffScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], StaffScheduleGroupByOutputType[P]>
        }
      >
    >


  export type StaffScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    breakStartTime?: boolean
    breakEndTime?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffSchedule"]>

  export type StaffScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    breakStartTime?: boolean
    breakEndTime?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffSchedule"]>

  export type StaffScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    breakStartTime?: boolean
    breakEndTime?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffSchedule"]>

  export type StaffScheduleSelectScalar = {
    id?: boolean
    staffId?: boolean
    dayOfWeek?: boolean
    startTime?: boolean
    endTime?: boolean
    breakStartTime?: boolean
    breakEndTime?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "staffId" | "dayOfWeek" | "startTime" | "endTime" | "breakStartTime" | "breakEndTime" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["staffSchedule"]>
  export type StaffScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StaffScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StaffScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StaffSchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffSchedule"
    objects: {
      staff: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffId: string
      dayOfWeek: number
      startTime: string
      endTime: string
      breakStartTime: string | null
      breakEndTime: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staffSchedule"]>
    composites: {}
  }

  type StaffScheduleGetPayload<S extends boolean | null | undefined | StaffScheduleDefaultArgs> = $Result.GetResult<Prisma.$StaffSchedulePayload, S>

  type StaffScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffScheduleCountAggregateInputType | true
    }

  export interface StaffScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffSchedule'], meta: { name: 'StaffSchedule' } }
    /**
     * Find zero or one StaffSchedule that matches the filter.
     * @param {StaffScheduleFindUniqueArgs} args - Arguments to find a StaffSchedule
     * @example
     * // Get one StaffSchedule
     * const staffSchedule = await prisma.staffSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffScheduleFindUniqueArgs>(args: SelectSubset<T, StaffScheduleFindUniqueArgs<ExtArgs>>): Prisma__StaffScheduleClient<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StaffSchedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffScheduleFindUniqueOrThrowArgs} args - Arguments to find a StaffSchedule
     * @example
     * // Get one StaffSchedule
     * const staffSchedule = await prisma.staffSchedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffScheduleClient<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffScheduleFindFirstArgs} args - Arguments to find a StaffSchedule
     * @example
     * // Get one StaffSchedule
     * const staffSchedule = await prisma.staffSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffScheduleFindFirstArgs>(args?: SelectSubset<T, StaffScheduleFindFirstArgs<ExtArgs>>): Prisma__StaffScheduleClient<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffSchedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffScheduleFindFirstOrThrowArgs} args - Arguments to find a StaffSchedule
     * @example
     * // Get one StaffSchedule
     * const staffSchedule = await prisma.staffSchedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffScheduleClient<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StaffSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffSchedules
     * const staffSchedules = await prisma.staffSchedule.findMany()
     * 
     * // Get first 10 StaffSchedules
     * const staffSchedules = await prisma.staffSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffScheduleWithIdOnly = await prisma.staffSchedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffScheduleFindManyArgs>(args?: SelectSubset<T, StaffScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StaffSchedule.
     * @param {StaffScheduleCreateArgs} args - Arguments to create a StaffSchedule.
     * @example
     * // Create one StaffSchedule
     * const StaffSchedule = await prisma.staffSchedule.create({
     *   data: {
     *     // ... data to create a StaffSchedule
     *   }
     * })
     * 
     */
    create<T extends StaffScheduleCreateArgs>(args: SelectSubset<T, StaffScheduleCreateArgs<ExtArgs>>): Prisma__StaffScheduleClient<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StaffSchedules.
     * @param {StaffScheduleCreateManyArgs} args - Arguments to create many StaffSchedules.
     * @example
     * // Create many StaffSchedules
     * const staffSchedule = await prisma.staffSchedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffScheduleCreateManyArgs>(args?: SelectSubset<T, StaffScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffSchedules and returns the data saved in the database.
     * @param {StaffScheduleCreateManyAndReturnArgs} args - Arguments to create many StaffSchedules.
     * @example
     * // Create many StaffSchedules
     * const staffSchedule = await prisma.staffSchedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffSchedules and only return the `id`
     * const staffScheduleWithIdOnly = await prisma.staffSchedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StaffSchedule.
     * @param {StaffScheduleDeleteArgs} args - Arguments to delete one StaffSchedule.
     * @example
     * // Delete one StaffSchedule
     * const StaffSchedule = await prisma.staffSchedule.delete({
     *   where: {
     *     // ... filter to delete one StaffSchedule
     *   }
     * })
     * 
     */
    delete<T extends StaffScheduleDeleteArgs>(args: SelectSubset<T, StaffScheduleDeleteArgs<ExtArgs>>): Prisma__StaffScheduleClient<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StaffSchedule.
     * @param {StaffScheduleUpdateArgs} args - Arguments to update one StaffSchedule.
     * @example
     * // Update one StaffSchedule
     * const staffSchedule = await prisma.staffSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffScheduleUpdateArgs>(args: SelectSubset<T, StaffScheduleUpdateArgs<ExtArgs>>): Prisma__StaffScheduleClient<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StaffSchedules.
     * @param {StaffScheduleDeleteManyArgs} args - Arguments to filter StaffSchedules to delete.
     * @example
     * // Delete a few StaffSchedules
     * const { count } = await prisma.staffSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffScheduleDeleteManyArgs>(args?: SelectSubset<T, StaffScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffSchedules
     * const staffSchedule = await prisma.staffSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffScheduleUpdateManyArgs>(args: SelectSubset<T, StaffScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffSchedules and returns the data updated in the database.
     * @param {StaffScheduleUpdateManyAndReturnArgs} args - Arguments to update many StaffSchedules.
     * @example
     * // Update many StaffSchedules
     * const staffSchedule = await prisma.staffSchedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StaffSchedules and only return the `id`
     * const staffScheduleWithIdOnly = await prisma.staffSchedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StaffSchedule.
     * @param {StaffScheduleUpsertArgs} args - Arguments to update or create a StaffSchedule.
     * @example
     * // Update or create a StaffSchedule
     * const staffSchedule = await prisma.staffSchedule.upsert({
     *   create: {
     *     // ... data to create a StaffSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffSchedule we want to update
     *   }
     * })
     */
    upsert<T extends StaffScheduleUpsertArgs>(args: SelectSubset<T, StaffScheduleUpsertArgs<ExtArgs>>): Prisma__StaffScheduleClient<$Result.GetResult<Prisma.$StaffSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StaffSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffScheduleCountArgs} args - Arguments to filter StaffSchedules to count.
     * @example
     * // Count the number of StaffSchedules
     * const count = await prisma.staffSchedule.count({
     *   where: {
     *     // ... the filter for the StaffSchedules we want to count
     *   }
     * })
    **/
    count<T extends StaffScheduleCountArgs>(
      args?: Subset<T, StaffScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffScheduleAggregateArgs>(args: Subset<T, StaffScheduleAggregateArgs>): Prisma.PrismaPromise<GetStaffScheduleAggregateType<T>>

    /**
     * Group by StaffSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffScheduleGroupByArgs['orderBy'] }
        : { orderBy?: StaffScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffSchedule model
   */
  readonly fields: StaffScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffSchedule model
   */
  interface StaffScheduleFieldRefs {
    readonly id: FieldRef<"StaffSchedule", 'String'>
    readonly staffId: FieldRef<"StaffSchedule", 'String'>
    readonly dayOfWeek: FieldRef<"StaffSchedule", 'Int'>
    readonly startTime: FieldRef<"StaffSchedule", 'String'>
    readonly endTime: FieldRef<"StaffSchedule", 'String'>
    readonly breakStartTime: FieldRef<"StaffSchedule", 'String'>
    readonly breakEndTime: FieldRef<"StaffSchedule", 'String'>
    readonly isActive: FieldRef<"StaffSchedule", 'Boolean'>
    readonly createdAt: FieldRef<"StaffSchedule", 'DateTime'>
    readonly updatedAt: FieldRef<"StaffSchedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StaffSchedule findUnique
   */
  export type StaffScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * Filter, which StaffSchedule to fetch.
     */
    where: StaffScheduleWhereUniqueInput
  }

  /**
   * StaffSchedule findUniqueOrThrow
   */
  export type StaffScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * Filter, which StaffSchedule to fetch.
     */
    where: StaffScheduleWhereUniqueInput
  }

  /**
   * StaffSchedule findFirst
   */
  export type StaffScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * Filter, which StaffSchedule to fetch.
     */
    where?: StaffScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffSchedules to fetch.
     */
    orderBy?: StaffScheduleOrderByWithRelationInput | StaffScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffSchedules.
     */
    cursor?: StaffScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffSchedules.
     */
    distinct?: StaffScheduleScalarFieldEnum | StaffScheduleScalarFieldEnum[]
  }

  /**
   * StaffSchedule findFirstOrThrow
   */
  export type StaffScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * Filter, which StaffSchedule to fetch.
     */
    where?: StaffScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffSchedules to fetch.
     */
    orderBy?: StaffScheduleOrderByWithRelationInput | StaffScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffSchedules.
     */
    cursor?: StaffScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffSchedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffSchedules.
     */
    distinct?: StaffScheduleScalarFieldEnum | StaffScheduleScalarFieldEnum[]
  }

  /**
   * StaffSchedule findMany
   */
  export type StaffScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * Filter, which StaffSchedules to fetch.
     */
    where?: StaffScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffSchedules to fetch.
     */
    orderBy?: StaffScheduleOrderByWithRelationInput | StaffScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffSchedules.
     */
    cursor?: StaffScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffSchedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffSchedules.
     */
    skip?: number
    distinct?: StaffScheduleScalarFieldEnum | StaffScheduleScalarFieldEnum[]
  }

  /**
   * StaffSchedule create
   */
  export type StaffScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffSchedule.
     */
    data: XOR<StaffScheduleCreateInput, StaffScheduleUncheckedCreateInput>
  }

  /**
   * StaffSchedule createMany
   */
  export type StaffScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffSchedules.
     */
    data: StaffScheduleCreateManyInput | StaffScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffSchedule createManyAndReturn
   */
  export type StaffScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many StaffSchedules.
     */
    data: StaffScheduleCreateManyInput | StaffScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffSchedule update
   */
  export type StaffScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffSchedule.
     */
    data: XOR<StaffScheduleUpdateInput, StaffScheduleUncheckedUpdateInput>
    /**
     * Choose, which StaffSchedule to update.
     */
    where: StaffScheduleWhereUniqueInput
  }

  /**
   * StaffSchedule updateMany
   */
  export type StaffScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffSchedules.
     */
    data: XOR<StaffScheduleUpdateManyMutationInput, StaffScheduleUncheckedUpdateManyInput>
    /**
     * Filter which StaffSchedules to update
     */
    where?: StaffScheduleWhereInput
    /**
     * Limit how many StaffSchedules to update.
     */
    limit?: number
  }

  /**
   * StaffSchedule updateManyAndReturn
   */
  export type StaffScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * The data used to update StaffSchedules.
     */
    data: XOR<StaffScheduleUpdateManyMutationInput, StaffScheduleUncheckedUpdateManyInput>
    /**
     * Filter which StaffSchedules to update
     */
    where?: StaffScheduleWhereInput
    /**
     * Limit how many StaffSchedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffSchedule upsert
   */
  export type StaffScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffSchedule to update in case it exists.
     */
    where: StaffScheduleWhereUniqueInput
    /**
     * In case the StaffSchedule found by the `where` argument doesn't exist, create a new StaffSchedule with this data.
     */
    create: XOR<StaffScheduleCreateInput, StaffScheduleUncheckedCreateInput>
    /**
     * In case the StaffSchedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffScheduleUpdateInput, StaffScheduleUncheckedUpdateInput>
  }

  /**
   * StaffSchedule delete
   */
  export type StaffScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
    /**
     * Filter which StaffSchedule to delete.
     */
    where: StaffScheduleWhereUniqueInput
  }

  /**
   * StaffSchedule deleteMany
   */
  export type StaffScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffSchedules to delete
     */
    where?: StaffScheduleWhereInput
    /**
     * Limit how many StaffSchedules to delete.
     */
    limit?: number
  }

  /**
   * StaffSchedule without action
   */
  export type StaffScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffSchedule
     */
    select?: StaffScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffSchedule
     */
    omit?: StaffScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffScheduleInclude<ExtArgs> | null
  }


  /**
   * Model StaffLeave
   */

  export type AggregateStaffLeave = {
    _count: StaffLeaveCountAggregateOutputType | null
    _min: StaffLeaveMinAggregateOutputType | null
    _max: StaffLeaveMaxAggregateOutputType | null
  }

  export type StaffLeaveMinAggregateOutputType = {
    id: string | null
    staffId: string | null
    startDate: Date | null
    endDate: Date | null
    reason: string | null
    isApproved: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffLeaveMaxAggregateOutputType = {
    id: string | null
    staffId: string | null
    startDate: Date | null
    endDate: Date | null
    reason: string | null
    isApproved: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StaffLeaveCountAggregateOutputType = {
    id: number
    staffId: number
    startDate: number
    endDate: number
    reason: number
    isApproved: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StaffLeaveMinAggregateInputType = {
    id?: true
    staffId?: true
    startDate?: true
    endDate?: true
    reason?: true
    isApproved?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffLeaveMaxAggregateInputType = {
    id?: true
    staffId?: true
    startDate?: true
    endDate?: true
    reason?: true
    isApproved?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StaffLeaveCountAggregateInputType = {
    id?: true
    staffId?: true
    startDate?: true
    endDate?: true
    reason?: true
    isApproved?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StaffLeaveAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffLeave to aggregate.
     */
    where?: StaffLeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffLeaves to fetch.
     */
    orderBy?: StaffLeaveOrderByWithRelationInput | StaffLeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StaffLeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffLeaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffLeaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StaffLeaves
    **/
    _count?: true | StaffLeaveCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffLeaveMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffLeaveMaxAggregateInputType
  }

  export type GetStaffLeaveAggregateType<T extends StaffLeaveAggregateArgs> = {
        [P in keyof T & keyof AggregateStaffLeave]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaffLeave[P]>
      : GetScalarType<T[P], AggregateStaffLeave[P]>
  }




  export type StaffLeaveGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StaffLeaveWhereInput
    orderBy?: StaffLeaveOrderByWithAggregationInput | StaffLeaveOrderByWithAggregationInput[]
    by: StaffLeaveScalarFieldEnum[] | StaffLeaveScalarFieldEnum
    having?: StaffLeaveScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffLeaveCountAggregateInputType | true
    _min?: StaffLeaveMinAggregateInputType
    _max?: StaffLeaveMaxAggregateInputType
  }

  export type StaffLeaveGroupByOutputType = {
    id: string
    staffId: string
    startDate: Date
    endDate: Date
    reason: string | null
    isApproved: boolean
    createdAt: Date
    updatedAt: Date
    _count: StaffLeaveCountAggregateOutputType | null
    _min: StaffLeaveMinAggregateOutputType | null
    _max: StaffLeaveMaxAggregateOutputType | null
  }

  type GetStaffLeaveGroupByPayload<T extends StaffLeaveGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffLeaveGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffLeaveGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffLeaveGroupByOutputType[P]>
            : GetScalarType<T[P], StaffLeaveGroupByOutputType[P]>
        }
      >
    >


  export type StaffLeaveSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    isApproved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffLeave"]>

  export type StaffLeaveSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    isApproved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffLeave"]>

  export type StaffLeaveSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    staffId?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    isApproved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staffLeave"]>

  export type StaffLeaveSelectScalar = {
    id?: boolean
    staffId?: boolean
    startDate?: boolean
    endDate?: boolean
    reason?: boolean
    isApproved?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StaffLeaveOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "staffId" | "startDate" | "endDate" | "reason" | "isApproved" | "createdAt" | "updatedAt", ExtArgs["result"]["staffLeave"]>
  export type StaffLeaveInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StaffLeaveIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StaffLeaveIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    staff?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StaffLeavePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StaffLeave"
    objects: {
      staff: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      staffId: string
      startDate: Date
      endDate: Date
      reason: string | null
      isApproved: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["staffLeave"]>
    composites: {}
  }

  type StaffLeaveGetPayload<S extends boolean | null | undefined | StaffLeaveDefaultArgs> = $Result.GetResult<Prisma.$StaffLeavePayload, S>

  type StaffLeaveCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StaffLeaveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffLeaveCountAggregateInputType | true
    }

  export interface StaffLeaveDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StaffLeave'], meta: { name: 'StaffLeave' } }
    /**
     * Find zero or one StaffLeave that matches the filter.
     * @param {StaffLeaveFindUniqueArgs} args - Arguments to find a StaffLeave
     * @example
     * // Get one StaffLeave
     * const staffLeave = await prisma.staffLeave.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StaffLeaveFindUniqueArgs>(args: SelectSubset<T, StaffLeaveFindUniqueArgs<ExtArgs>>): Prisma__StaffLeaveClient<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StaffLeave that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StaffLeaveFindUniqueOrThrowArgs} args - Arguments to find a StaffLeave
     * @example
     * // Get one StaffLeave
     * const staffLeave = await prisma.staffLeave.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StaffLeaveFindUniqueOrThrowArgs>(args: SelectSubset<T, StaffLeaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StaffLeaveClient<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffLeave that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffLeaveFindFirstArgs} args - Arguments to find a StaffLeave
     * @example
     * // Get one StaffLeave
     * const staffLeave = await prisma.staffLeave.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StaffLeaveFindFirstArgs>(args?: SelectSubset<T, StaffLeaveFindFirstArgs<ExtArgs>>): Prisma__StaffLeaveClient<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StaffLeave that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffLeaveFindFirstOrThrowArgs} args - Arguments to find a StaffLeave
     * @example
     * // Get one StaffLeave
     * const staffLeave = await prisma.staffLeave.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StaffLeaveFindFirstOrThrowArgs>(args?: SelectSubset<T, StaffLeaveFindFirstOrThrowArgs<ExtArgs>>): Prisma__StaffLeaveClient<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StaffLeaves that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffLeaveFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StaffLeaves
     * const staffLeaves = await prisma.staffLeave.findMany()
     * 
     * // Get first 10 StaffLeaves
     * const staffLeaves = await prisma.staffLeave.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const staffLeaveWithIdOnly = await prisma.staffLeave.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StaffLeaveFindManyArgs>(args?: SelectSubset<T, StaffLeaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StaffLeave.
     * @param {StaffLeaveCreateArgs} args - Arguments to create a StaffLeave.
     * @example
     * // Create one StaffLeave
     * const StaffLeave = await prisma.staffLeave.create({
     *   data: {
     *     // ... data to create a StaffLeave
     *   }
     * })
     * 
     */
    create<T extends StaffLeaveCreateArgs>(args: SelectSubset<T, StaffLeaveCreateArgs<ExtArgs>>): Prisma__StaffLeaveClient<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StaffLeaves.
     * @param {StaffLeaveCreateManyArgs} args - Arguments to create many StaffLeaves.
     * @example
     * // Create many StaffLeaves
     * const staffLeave = await prisma.staffLeave.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StaffLeaveCreateManyArgs>(args?: SelectSubset<T, StaffLeaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StaffLeaves and returns the data saved in the database.
     * @param {StaffLeaveCreateManyAndReturnArgs} args - Arguments to create many StaffLeaves.
     * @example
     * // Create many StaffLeaves
     * const staffLeave = await prisma.staffLeave.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StaffLeaves and only return the `id`
     * const staffLeaveWithIdOnly = await prisma.staffLeave.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StaffLeaveCreateManyAndReturnArgs>(args?: SelectSubset<T, StaffLeaveCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StaffLeave.
     * @param {StaffLeaveDeleteArgs} args - Arguments to delete one StaffLeave.
     * @example
     * // Delete one StaffLeave
     * const StaffLeave = await prisma.staffLeave.delete({
     *   where: {
     *     // ... filter to delete one StaffLeave
     *   }
     * })
     * 
     */
    delete<T extends StaffLeaveDeleteArgs>(args: SelectSubset<T, StaffLeaveDeleteArgs<ExtArgs>>): Prisma__StaffLeaveClient<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StaffLeave.
     * @param {StaffLeaveUpdateArgs} args - Arguments to update one StaffLeave.
     * @example
     * // Update one StaffLeave
     * const staffLeave = await prisma.staffLeave.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StaffLeaveUpdateArgs>(args: SelectSubset<T, StaffLeaveUpdateArgs<ExtArgs>>): Prisma__StaffLeaveClient<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StaffLeaves.
     * @param {StaffLeaveDeleteManyArgs} args - Arguments to filter StaffLeaves to delete.
     * @example
     * // Delete a few StaffLeaves
     * const { count } = await prisma.staffLeave.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StaffLeaveDeleteManyArgs>(args?: SelectSubset<T, StaffLeaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffLeaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffLeaveUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StaffLeaves
     * const staffLeave = await prisma.staffLeave.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StaffLeaveUpdateManyArgs>(args: SelectSubset<T, StaffLeaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StaffLeaves and returns the data updated in the database.
     * @param {StaffLeaveUpdateManyAndReturnArgs} args - Arguments to update many StaffLeaves.
     * @example
     * // Update many StaffLeaves
     * const staffLeave = await prisma.staffLeave.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StaffLeaves and only return the `id`
     * const staffLeaveWithIdOnly = await prisma.staffLeave.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StaffLeaveUpdateManyAndReturnArgs>(args: SelectSubset<T, StaffLeaveUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StaffLeave.
     * @param {StaffLeaveUpsertArgs} args - Arguments to update or create a StaffLeave.
     * @example
     * // Update or create a StaffLeave
     * const staffLeave = await prisma.staffLeave.upsert({
     *   create: {
     *     // ... data to create a StaffLeave
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StaffLeave we want to update
     *   }
     * })
     */
    upsert<T extends StaffLeaveUpsertArgs>(args: SelectSubset<T, StaffLeaveUpsertArgs<ExtArgs>>): Prisma__StaffLeaveClient<$Result.GetResult<Prisma.$StaffLeavePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StaffLeaves.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffLeaveCountArgs} args - Arguments to filter StaffLeaves to count.
     * @example
     * // Count the number of StaffLeaves
     * const count = await prisma.staffLeave.count({
     *   where: {
     *     // ... the filter for the StaffLeaves we want to count
     *   }
     * })
    **/
    count<T extends StaffLeaveCountArgs>(
      args?: Subset<T, StaffLeaveCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffLeaveCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StaffLeave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffLeaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffLeaveAggregateArgs>(args: Subset<T, StaffLeaveAggregateArgs>): Prisma.PrismaPromise<GetStaffLeaveAggregateType<T>>

    /**
     * Group by StaffLeave.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffLeaveGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StaffLeaveGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StaffLeaveGroupByArgs['orderBy'] }
        : { orderBy?: StaffLeaveGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StaffLeaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffLeaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StaffLeave model
   */
  readonly fields: StaffLeaveFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StaffLeave.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StaffLeaveClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    staff<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StaffLeave model
   */
  interface StaffLeaveFieldRefs {
    readonly id: FieldRef<"StaffLeave", 'String'>
    readonly staffId: FieldRef<"StaffLeave", 'String'>
    readonly startDate: FieldRef<"StaffLeave", 'DateTime'>
    readonly endDate: FieldRef<"StaffLeave", 'DateTime'>
    readonly reason: FieldRef<"StaffLeave", 'String'>
    readonly isApproved: FieldRef<"StaffLeave", 'Boolean'>
    readonly createdAt: FieldRef<"StaffLeave", 'DateTime'>
    readonly updatedAt: FieldRef<"StaffLeave", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StaffLeave findUnique
   */
  export type StaffLeaveFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * Filter, which StaffLeave to fetch.
     */
    where: StaffLeaveWhereUniqueInput
  }

  /**
   * StaffLeave findUniqueOrThrow
   */
  export type StaffLeaveFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * Filter, which StaffLeave to fetch.
     */
    where: StaffLeaveWhereUniqueInput
  }

  /**
   * StaffLeave findFirst
   */
  export type StaffLeaveFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * Filter, which StaffLeave to fetch.
     */
    where?: StaffLeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffLeaves to fetch.
     */
    orderBy?: StaffLeaveOrderByWithRelationInput | StaffLeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffLeaves.
     */
    cursor?: StaffLeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffLeaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffLeaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffLeaves.
     */
    distinct?: StaffLeaveScalarFieldEnum | StaffLeaveScalarFieldEnum[]
  }

  /**
   * StaffLeave findFirstOrThrow
   */
  export type StaffLeaveFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * Filter, which StaffLeave to fetch.
     */
    where?: StaffLeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffLeaves to fetch.
     */
    orderBy?: StaffLeaveOrderByWithRelationInput | StaffLeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StaffLeaves.
     */
    cursor?: StaffLeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffLeaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffLeaves.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StaffLeaves.
     */
    distinct?: StaffLeaveScalarFieldEnum | StaffLeaveScalarFieldEnum[]
  }

  /**
   * StaffLeave findMany
   */
  export type StaffLeaveFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * Filter, which StaffLeaves to fetch.
     */
    where?: StaffLeaveWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StaffLeaves to fetch.
     */
    orderBy?: StaffLeaveOrderByWithRelationInput | StaffLeaveOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StaffLeaves.
     */
    cursor?: StaffLeaveWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StaffLeaves from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StaffLeaves.
     */
    skip?: number
    distinct?: StaffLeaveScalarFieldEnum | StaffLeaveScalarFieldEnum[]
  }

  /**
   * StaffLeave create
   */
  export type StaffLeaveCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * The data needed to create a StaffLeave.
     */
    data: XOR<StaffLeaveCreateInput, StaffLeaveUncheckedCreateInput>
  }

  /**
   * StaffLeave createMany
   */
  export type StaffLeaveCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StaffLeaves.
     */
    data: StaffLeaveCreateManyInput | StaffLeaveCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StaffLeave createManyAndReturn
   */
  export type StaffLeaveCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * The data used to create many StaffLeaves.
     */
    data: StaffLeaveCreateManyInput | StaffLeaveCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffLeave update
   */
  export type StaffLeaveUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * The data needed to update a StaffLeave.
     */
    data: XOR<StaffLeaveUpdateInput, StaffLeaveUncheckedUpdateInput>
    /**
     * Choose, which StaffLeave to update.
     */
    where: StaffLeaveWhereUniqueInput
  }

  /**
   * StaffLeave updateMany
   */
  export type StaffLeaveUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StaffLeaves.
     */
    data: XOR<StaffLeaveUpdateManyMutationInput, StaffLeaveUncheckedUpdateManyInput>
    /**
     * Filter which StaffLeaves to update
     */
    where?: StaffLeaveWhereInput
    /**
     * Limit how many StaffLeaves to update.
     */
    limit?: number
  }

  /**
   * StaffLeave updateManyAndReturn
   */
  export type StaffLeaveUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * The data used to update StaffLeaves.
     */
    data: XOR<StaffLeaveUpdateManyMutationInput, StaffLeaveUncheckedUpdateManyInput>
    /**
     * Filter which StaffLeaves to update
     */
    where?: StaffLeaveWhereInput
    /**
     * Limit how many StaffLeaves to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StaffLeave upsert
   */
  export type StaffLeaveUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * The filter to search for the StaffLeave to update in case it exists.
     */
    where: StaffLeaveWhereUniqueInput
    /**
     * In case the StaffLeave found by the `where` argument doesn't exist, create a new StaffLeave with this data.
     */
    create: XOR<StaffLeaveCreateInput, StaffLeaveUncheckedCreateInput>
    /**
     * In case the StaffLeave was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StaffLeaveUpdateInput, StaffLeaveUncheckedUpdateInput>
  }

  /**
   * StaffLeave delete
   */
  export type StaffLeaveDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
    /**
     * Filter which StaffLeave to delete.
     */
    where: StaffLeaveWhereUniqueInput
  }

  /**
   * StaffLeave deleteMany
   */
  export type StaffLeaveDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StaffLeaves to delete
     */
    where?: StaffLeaveWhereInput
    /**
     * Limit how many StaffLeaves to delete.
     */
    limit?: number
  }

  /**
   * StaffLeave without action
   */
  export type StaffLeaveDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffLeave
     */
    select?: StaffLeaveSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StaffLeave
     */
    omit?: StaffLeaveOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StaffLeaveInclude<ExtArgs> | null
  }


  /**
   * Model Room
   */

  export type AggregateRoom = {
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  export type RoomAvgAggregateOutputType = {
    capacity: number | null
  }

  export type RoomSumAggregateOutputType = {
    capacity: number | null
  }

  export type RoomMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdById: string | null
    modifiedById: string | null
    isActive: boolean | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdById: string | null
    modifiedById: string | null
    isActive: boolean | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoomCountAggregateOutputType = {
    id: number
    name: number
    description: number
    features: number
    createdById: number
    modifiedById: number
    isActive: number
    capacity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoomAvgAggregateInputType = {
    capacity?: true
  }

  export type RoomSumAggregateInputType = {
    capacity?: true
  }

  export type RoomMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoomCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    features?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Room to aggregate.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rooms
    **/
    _count?: true | RoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoomMaxAggregateInputType
  }

  export type GetRoomAggregateType<T extends RoomAggregateArgs> = {
        [P in keyof T & keyof AggregateRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoom[P]>
      : GetScalarType<T[P], AggregateRoom[P]>
  }




  export type RoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoomWhereInput
    orderBy?: RoomOrderByWithAggregationInput | RoomOrderByWithAggregationInput[]
    by: RoomScalarFieldEnum[] | RoomScalarFieldEnum
    having?: RoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoomCountAggregateInputType | true
    _avg?: RoomAvgAggregateInputType
    _sum?: RoomSumAggregateInputType
    _min?: RoomMinAggregateInputType
    _max?: RoomMaxAggregateInputType
  }

  export type RoomGroupByOutputType = {
    id: string
    name: string
    description: string | null
    features: string[]
    createdById: string
    modifiedById: string | null
    isActive: boolean
    capacity: number
    createdAt: Date
    updatedAt: Date
    _count: RoomCountAggregateOutputType | null
    _avg: RoomAvgAggregateOutputType | null
    _sum: RoomSumAggregateOutputType | null
    _min: RoomMinAggregateOutputType | null
    _max: RoomMaxAggregateOutputType | null
  }

  type GetRoomGroupByPayload<T extends RoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoomGroupByOutputType[P]>
            : GetScalarType<T[P], RoomGroupByOutputType[P]>
        }
      >
    >


  export type RoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    features?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Room$modifiedByArgs<ExtArgs>
    appointments?: boolean | Room$appointmentsArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    features?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Room$modifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    features?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Room$modifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["room"]>

  export type RoomSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    features?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "features" | "createdById" | "modifiedById" | "isActive" | "capacity" | "createdAt" | "updatedAt", ExtArgs["result"]["room"]>
  export type RoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Room$modifiedByArgs<ExtArgs>
    appointments?: boolean | Room$appointmentsArgs<ExtArgs>
    _count?: boolean | RoomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Room$modifiedByArgs<ExtArgs>
  }
  export type RoomIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Room$modifiedByArgs<ExtArgs>
  }

  export type $RoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Room"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      modifiedBy: Prisma.$UserPayload<ExtArgs> | null
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      features: string[]
      createdById: string
      modifiedById: string | null
      isActive: boolean
      capacity: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["room"]>
    composites: {}
  }

  type RoomGetPayload<S extends boolean | null | undefined | RoomDefaultArgs> = $Result.GetResult<Prisma.$RoomPayload, S>

  type RoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoomCountAggregateInputType | true
    }

  export interface RoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Room'], meta: { name: 'Room' } }
    /**
     * Find zero or one Room that matches the filter.
     * @param {RoomFindUniqueArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoomFindUniqueArgs>(args: SelectSubset<T, RoomFindUniqueArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Room that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoomFindUniqueOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoomFindUniqueOrThrowArgs>(args: SelectSubset<T, RoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoomFindFirstArgs>(args?: SelectSubset<T, RoomFindFirstArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Room that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindFirstOrThrowArgs} args - Arguments to find a Room
     * @example
     * // Get one Room
     * const room = await prisma.room.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoomFindFirstOrThrowArgs>(args?: SelectSubset<T, RoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rooms
     * const rooms = await prisma.room.findMany()
     * 
     * // Get first 10 Rooms
     * const rooms = await prisma.room.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roomWithIdOnly = await prisma.room.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoomFindManyArgs>(args?: SelectSubset<T, RoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Room.
     * @param {RoomCreateArgs} args - Arguments to create a Room.
     * @example
     * // Create one Room
     * const Room = await prisma.room.create({
     *   data: {
     *     // ... data to create a Room
     *   }
     * })
     * 
     */
    create<T extends RoomCreateArgs>(args: SelectSubset<T, RoomCreateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rooms.
     * @param {RoomCreateManyArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoomCreateManyArgs>(args?: SelectSubset<T, RoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rooms and returns the data saved in the database.
     * @param {RoomCreateManyAndReturnArgs} args - Arguments to create many Rooms.
     * @example
     * // Create many Rooms
     * const room = await prisma.room.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoomCreateManyAndReturnArgs>(args?: SelectSubset<T, RoomCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Room.
     * @param {RoomDeleteArgs} args - Arguments to delete one Room.
     * @example
     * // Delete one Room
     * const Room = await prisma.room.delete({
     *   where: {
     *     // ... filter to delete one Room
     *   }
     * })
     * 
     */
    delete<T extends RoomDeleteArgs>(args: SelectSubset<T, RoomDeleteArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Room.
     * @param {RoomUpdateArgs} args - Arguments to update one Room.
     * @example
     * // Update one Room
     * const room = await prisma.room.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoomUpdateArgs>(args: SelectSubset<T, RoomUpdateArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rooms.
     * @param {RoomDeleteManyArgs} args - Arguments to filter Rooms to delete.
     * @example
     * // Delete a few Rooms
     * const { count } = await prisma.room.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoomDeleteManyArgs>(args?: SelectSubset<T, RoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoomUpdateManyArgs>(args: SelectSubset<T, RoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rooms and returns the data updated in the database.
     * @param {RoomUpdateManyAndReturnArgs} args - Arguments to update many Rooms.
     * @example
     * // Update many Rooms
     * const room = await prisma.room.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rooms and only return the `id`
     * const roomWithIdOnly = await prisma.room.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoomUpdateManyAndReturnArgs>(args: SelectSubset<T, RoomUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Room.
     * @param {RoomUpsertArgs} args - Arguments to update or create a Room.
     * @example
     * // Update or create a Room
     * const room = await prisma.room.upsert({
     *   create: {
     *     // ... data to create a Room
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Room we want to update
     *   }
     * })
     */
    upsert<T extends RoomUpsertArgs>(args: SelectSubset<T, RoomUpsertArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomCountArgs} args - Arguments to filter Rooms to count.
     * @example
     * // Count the number of Rooms
     * const count = await prisma.room.count({
     *   where: {
     *     // ... the filter for the Rooms we want to count
     *   }
     * })
    **/
    count<T extends RoomCountArgs>(
      args?: Subset<T, RoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoomAggregateArgs>(args: Subset<T, RoomAggregateArgs>): Prisma.PrismaPromise<GetRoomAggregateType<T>>

    /**
     * Group by Room.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoomGroupByArgs['orderBy'] }
        : { orderBy?: RoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Room model
   */
  readonly fields: RoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Room.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    modifiedBy<T extends Room$modifiedByArgs<ExtArgs> = {}>(args?: Subset<T, Room$modifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    appointments<T extends Room$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Room$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Room model
   */
  interface RoomFieldRefs {
    readonly id: FieldRef<"Room", 'String'>
    readonly name: FieldRef<"Room", 'String'>
    readonly description: FieldRef<"Room", 'String'>
    readonly features: FieldRef<"Room", 'String[]'>
    readonly createdById: FieldRef<"Room", 'String'>
    readonly modifiedById: FieldRef<"Room", 'String'>
    readonly isActive: FieldRef<"Room", 'Boolean'>
    readonly capacity: FieldRef<"Room", 'Int'>
    readonly createdAt: FieldRef<"Room", 'DateTime'>
    readonly updatedAt: FieldRef<"Room", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Room findUnique
   */
  export type RoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findUniqueOrThrow
   */
  export type RoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room findFirst
   */
  export type RoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findFirstOrThrow
   */
  export type RoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Room to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rooms.
     */
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room findMany
   */
  export type RoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter, which Rooms to fetch.
     */
    where?: RoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rooms to fetch.
     */
    orderBy?: RoomOrderByWithRelationInput | RoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rooms.
     */
    cursor?: RoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rooms.
     */
    skip?: number
    distinct?: RoomScalarFieldEnum | RoomScalarFieldEnum[]
  }

  /**
   * Room create
   */
  export type RoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to create a Room.
     */
    data: XOR<RoomCreateInput, RoomUncheckedCreateInput>
  }

  /**
   * Room createMany
   */
  export type RoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Room createManyAndReturn
   */
  export type RoomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to create many Rooms.
     */
    data: RoomCreateManyInput | RoomCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room update
   */
  export type RoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The data needed to update a Room.
     */
    data: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
    /**
     * Choose, which Room to update.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room updateMany
   */
  export type RoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
  }

  /**
   * Room updateManyAndReturn
   */
  export type RoomUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * The data used to update Rooms.
     */
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyInput>
    /**
     * Filter which Rooms to update
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Room upsert
   */
  export type RoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * The filter to search for the Room to update in case it exists.
     */
    where: RoomWhereUniqueInput
    /**
     * In case the Room found by the `where` argument doesn't exist, create a new Room with this data.
     */
    create: XOR<RoomCreateInput, RoomUncheckedCreateInput>
    /**
     * In case the Room was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoomUpdateInput, RoomUncheckedUpdateInput>
  }

  /**
   * Room delete
   */
  export type RoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
    /**
     * Filter which Room to delete.
     */
    where: RoomWhereUniqueInput
  }

  /**
   * Room deleteMany
   */
  export type RoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rooms to delete
     */
    where?: RoomWhereInput
    /**
     * Limit how many Rooms to delete.
     */
    limit?: number
  }

  /**
   * Room.modifiedBy
   */
  export type Room$modifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Room.appointments
   */
  export type Room$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Room without action
   */
  export type RoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Room
     */
    select?: RoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Room
     */
    omit?: RoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoomInclude<ExtArgs> | null
  }


  /**
   * Model Service
   */

  export type AggregateService = {
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  export type ServiceAvgAggregateOutputType = {
    duration: number | null
    price: Decimal | null
    sessionCount: number | null
  }

  export type ServiceSumAggregateOutputType = {
    duration: number | null
    price: Decimal | null
    sessionCount: number | null
  }

  export type ServiceMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    duration: number | null
    price: Decimal | null
    category: $Enums.ServiceCategory | null
    categoryColor: string | null
    sessionCount: number | null
    isForChildren: boolean | null
    isVoucher: boolean | null
    createdById: string | null
    modifiedById: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    duration: number | null
    price: Decimal | null
    category: $Enums.ServiceCategory | null
    categoryColor: string | null
    sessionCount: number | null
    isForChildren: boolean | null
    isVoucher: boolean | null
    createdById: string | null
    modifiedById: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ServiceCountAggregateOutputType = {
    id: number
    name: number
    description: number
    duration: number
    price: number
    category: number
    categoryColor: number
    sessionCount: number
    isForChildren: number
    isVoucher: number
    createdById: number
    modifiedById: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ServiceAvgAggregateInputType = {
    duration?: true
    price?: true
    sessionCount?: true
  }

  export type ServiceSumAggregateInputType = {
    duration?: true
    price?: true
    sessionCount?: true
  }

  export type ServiceMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    duration?: true
    price?: true
    category?: true
    categoryColor?: true
    sessionCount?: true
    isForChildren?: true
    isVoucher?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    duration?: true
    price?: true
    category?: true
    categoryColor?: true
    sessionCount?: true
    isForChildren?: true
    isVoucher?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ServiceCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    duration?: true
    price?: true
    category?: true
    categoryColor?: true
    sessionCount?: true
    isForChildren?: true
    isVoucher?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ServiceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Service to aggregate.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Services
    **/
    _count?: true | ServiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ServiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ServiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ServiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ServiceMaxAggregateInputType
  }

  export type GetServiceAggregateType<T extends ServiceAggregateArgs> = {
        [P in keyof T & keyof AggregateService]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateService[P]>
      : GetScalarType<T[P], AggregateService[P]>
  }




  export type ServiceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ServiceWhereInput
    orderBy?: ServiceOrderByWithAggregationInput | ServiceOrderByWithAggregationInput[]
    by: ServiceScalarFieldEnum[] | ServiceScalarFieldEnum
    having?: ServiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ServiceCountAggregateInputType | true
    _avg?: ServiceAvgAggregateInputType
    _sum?: ServiceSumAggregateInputType
    _min?: ServiceMinAggregateInputType
    _max?: ServiceMaxAggregateInputType
  }

  export type ServiceGroupByOutputType = {
    id: string
    name: string
    description: string | null
    duration: number
    price: Decimal
    category: $Enums.ServiceCategory
    categoryColor: string
    sessionCount: number
    isForChildren: boolean
    isVoucher: boolean
    createdById: string
    modifiedById: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ServiceCountAggregateOutputType | null
    _avg: ServiceAvgAggregateOutputType | null
    _sum: ServiceSumAggregateOutputType | null
    _min: ServiceMinAggregateOutputType | null
    _max: ServiceMaxAggregateOutputType | null
  }

  type GetServiceGroupByPayload<T extends ServiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ServiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ServiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ServiceGroupByOutputType[P]>
            : GetScalarType<T[P], ServiceGroupByOutputType[P]>
        }
      >
    >


  export type ServiceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    duration?: boolean
    price?: boolean
    category?: boolean
    categoryColor?: boolean
    sessionCount?: boolean
    isForChildren?: boolean
    isVoucher?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Service$modifiedByArgs<ExtArgs>
    packageItems?: boolean | Service$packageItemsArgs<ExtArgs>
    appointments?: boolean | Service$appointmentsArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    duration?: boolean
    price?: boolean
    category?: boolean
    categoryColor?: boolean
    sessionCount?: boolean
    isForChildren?: boolean
    isVoucher?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Service$modifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    duration?: boolean
    price?: boolean
    category?: boolean
    categoryColor?: boolean
    sessionCount?: boolean
    isForChildren?: boolean
    isVoucher?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Service$modifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["service"]>

  export type ServiceSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    duration?: boolean
    price?: boolean
    category?: boolean
    categoryColor?: boolean
    sessionCount?: boolean
    isForChildren?: boolean
    isVoucher?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ServiceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "duration" | "price" | "category" | "categoryColor" | "sessionCount" | "isForChildren" | "isVoucher" | "createdById" | "modifiedById" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["service"]>
  export type ServiceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Service$modifiedByArgs<ExtArgs>
    packageItems?: boolean | Service$packageItemsArgs<ExtArgs>
    appointments?: boolean | Service$appointmentsArgs<ExtArgs>
    _count?: boolean | ServiceCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ServiceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Service$modifiedByArgs<ExtArgs>
  }
  export type ServiceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Service$modifiedByArgs<ExtArgs>
  }

  export type $ServicePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Service"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      modifiedBy: Prisma.$UserPayload<ExtArgs> | null
      packageItems: Prisma.$PackageItemPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      duration: number
      price: Prisma.Decimal
      category: $Enums.ServiceCategory
      categoryColor: string
      sessionCount: number
      isForChildren: boolean
      isVoucher: boolean
      createdById: string
      modifiedById: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["service"]>
    composites: {}
  }

  type ServiceGetPayload<S extends boolean | null | undefined | ServiceDefaultArgs> = $Result.GetResult<Prisma.$ServicePayload, S>

  type ServiceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ServiceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ServiceCountAggregateInputType | true
    }

  export interface ServiceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Service'], meta: { name: 'Service' } }
    /**
     * Find zero or one Service that matches the filter.
     * @param {ServiceFindUniqueArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ServiceFindUniqueArgs>(args: SelectSubset<T, ServiceFindUniqueArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Service that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ServiceFindUniqueOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ServiceFindUniqueOrThrowArgs>(args: SelectSubset<T, ServiceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ServiceFindFirstArgs>(args?: SelectSubset<T, ServiceFindFirstArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Service that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindFirstOrThrowArgs} args - Arguments to find a Service
     * @example
     * // Get one Service
     * const service = await prisma.service.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ServiceFindFirstOrThrowArgs>(args?: SelectSubset<T, ServiceFindFirstOrThrowArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Services that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Services
     * const services = await prisma.service.findMany()
     * 
     * // Get first 10 Services
     * const services = await prisma.service.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const serviceWithIdOnly = await prisma.service.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ServiceFindManyArgs>(args?: SelectSubset<T, ServiceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Service.
     * @param {ServiceCreateArgs} args - Arguments to create a Service.
     * @example
     * // Create one Service
     * const Service = await prisma.service.create({
     *   data: {
     *     // ... data to create a Service
     *   }
     * })
     * 
     */
    create<T extends ServiceCreateArgs>(args: SelectSubset<T, ServiceCreateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Services.
     * @param {ServiceCreateManyArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ServiceCreateManyArgs>(args?: SelectSubset<T, ServiceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Services and returns the data saved in the database.
     * @param {ServiceCreateManyAndReturnArgs} args - Arguments to create many Services.
     * @example
     * // Create many Services
     * const service = await prisma.service.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ServiceCreateManyAndReturnArgs>(args?: SelectSubset<T, ServiceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Service.
     * @param {ServiceDeleteArgs} args - Arguments to delete one Service.
     * @example
     * // Delete one Service
     * const Service = await prisma.service.delete({
     *   where: {
     *     // ... filter to delete one Service
     *   }
     * })
     * 
     */
    delete<T extends ServiceDeleteArgs>(args: SelectSubset<T, ServiceDeleteArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Service.
     * @param {ServiceUpdateArgs} args - Arguments to update one Service.
     * @example
     * // Update one Service
     * const service = await prisma.service.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ServiceUpdateArgs>(args: SelectSubset<T, ServiceUpdateArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Services.
     * @param {ServiceDeleteManyArgs} args - Arguments to filter Services to delete.
     * @example
     * // Delete a few Services
     * const { count } = await prisma.service.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ServiceDeleteManyArgs>(args?: SelectSubset<T, ServiceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ServiceUpdateManyArgs>(args: SelectSubset<T, ServiceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Services and returns the data updated in the database.
     * @param {ServiceUpdateManyAndReturnArgs} args - Arguments to update many Services.
     * @example
     * // Update many Services
     * const service = await prisma.service.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Services and only return the `id`
     * const serviceWithIdOnly = await prisma.service.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ServiceUpdateManyAndReturnArgs>(args: SelectSubset<T, ServiceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Service.
     * @param {ServiceUpsertArgs} args - Arguments to update or create a Service.
     * @example
     * // Update or create a Service
     * const service = await prisma.service.upsert({
     *   create: {
     *     // ... data to create a Service
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Service we want to update
     *   }
     * })
     */
    upsert<T extends ServiceUpsertArgs>(args: SelectSubset<T, ServiceUpsertArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Services.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceCountArgs} args - Arguments to filter Services to count.
     * @example
     * // Count the number of Services
     * const count = await prisma.service.count({
     *   where: {
     *     // ... the filter for the Services we want to count
     *   }
     * })
    **/
    count<T extends ServiceCountArgs>(
      args?: Subset<T, ServiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ServiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ServiceAggregateArgs>(args: Subset<T, ServiceAggregateArgs>): Prisma.PrismaPromise<GetServiceAggregateType<T>>

    /**
     * Group by Service.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ServiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ServiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ServiceGroupByArgs['orderBy'] }
        : { orderBy?: ServiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ServiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetServiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Service model
   */
  readonly fields: ServiceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Service.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ServiceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    modifiedBy<T extends Service$modifiedByArgs<ExtArgs> = {}>(args?: Subset<T, Service$modifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    packageItems<T extends Service$packageItemsArgs<ExtArgs> = {}>(args?: Subset<T, Service$packageItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends Service$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Service$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Service model
   */
  interface ServiceFieldRefs {
    readonly id: FieldRef<"Service", 'String'>
    readonly name: FieldRef<"Service", 'String'>
    readonly description: FieldRef<"Service", 'String'>
    readonly duration: FieldRef<"Service", 'Int'>
    readonly price: FieldRef<"Service", 'Decimal'>
    readonly category: FieldRef<"Service", 'ServiceCategory'>
    readonly categoryColor: FieldRef<"Service", 'String'>
    readonly sessionCount: FieldRef<"Service", 'Int'>
    readonly isForChildren: FieldRef<"Service", 'Boolean'>
    readonly isVoucher: FieldRef<"Service", 'Boolean'>
    readonly createdById: FieldRef<"Service", 'String'>
    readonly modifiedById: FieldRef<"Service", 'String'>
    readonly isActive: FieldRef<"Service", 'Boolean'>
    readonly createdAt: FieldRef<"Service", 'DateTime'>
    readonly updatedAt: FieldRef<"Service", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Service findUnique
   */
  export type ServiceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findUniqueOrThrow
   */
  export type ServiceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service findFirst
   */
  export type ServiceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findFirstOrThrow
   */
  export type ServiceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Service to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Services.
     */
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service findMany
   */
  export type ServiceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter, which Services to fetch.
     */
    where?: ServiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Services to fetch.
     */
    orderBy?: ServiceOrderByWithRelationInput | ServiceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Services.
     */
    cursor?: ServiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Services from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Services.
     */
    skip?: number
    distinct?: ServiceScalarFieldEnum | ServiceScalarFieldEnum[]
  }

  /**
   * Service create
   */
  export type ServiceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to create a Service.
     */
    data: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
  }

  /**
   * Service createMany
   */
  export type ServiceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Service createManyAndReturn
   */
  export type ServiceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to create many Services.
     */
    data: ServiceCreateManyInput | ServiceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Service update
   */
  export type ServiceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The data needed to update a Service.
     */
    data: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
    /**
     * Choose, which Service to update.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service updateMany
   */
  export type ServiceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
  }

  /**
   * Service updateManyAndReturn
   */
  export type ServiceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * The data used to update Services.
     */
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyInput>
    /**
     * Filter which Services to update
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Service upsert
   */
  export type ServiceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * The filter to search for the Service to update in case it exists.
     */
    where: ServiceWhereUniqueInput
    /**
     * In case the Service found by the `where` argument doesn't exist, create a new Service with this data.
     */
    create: XOR<ServiceCreateInput, ServiceUncheckedCreateInput>
    /**
     * In case the Service was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ServiceUpdateInput, ServiceUncheckedUpdateInput>
  }

  /**
   * Service delete
   */
  export type ServiceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
    /**
     * Filter which Service to delete.
     */
    where: ServiceWhereUniqueInput
  }

  /**
   * Service deleteMany
   */
  export type ServiceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Services to delete
     */
    where?: ServiceWhereInput
    /**
     * Limit how many Services to delete.
     */
    limit?: number
  }

  /**
   * Service.modifiedBy
   */
  export type Service$modifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Service.packageItems
   */
  export type Service$packageItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    where?: PackageItemWhereInput
    orderBy?: PackageItemOrderByWithRelationInput | PackageItemOrderByWithRelationInput[]
    cursor?: PackageItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageItemScalarFieldEnum | PackageItemScalarFieldEnum[]
  }

  /**
   * Service.appointments
   */
  export type Service$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Service without action
   */
  export type ServiceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Service
     */
    select?: ServiceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Service
     */
    omit?: ServiceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ServiceInclude<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    email: string | null
    phone: string | null
    address: string | null
    socialInsuranceNumber: string | null
    notes: string | null
    doctorReferral: string | null
    insuranceType: $Enums.InsuranceType | null
    createdById: string | null
    modifiedById: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    email: string | null
    phone: string | null
    address: string | null
    socialInsuranceNumber: string | null
    notes: string | null
    doctorReferral: string | null
    insuranceType: $Enums.InsuranceType | null
    createdById: string | null
    modifiedById: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    dateOfBirth: number
    email: number
    phone: number
    address: number
    socialInsuranceNumber: number
    notes: number
    doctorReferral: number
    insuranceType: number
    createdById: number
    modifiedById: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    phone?: true
    address?: true
    socialInsuranceNumber?: true
    notes?: true
    doctorReferral?: true
    insuranceType?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    phone?: true
    address?: true
    socialInsuranceNumber?: true
    notes?: true
    doctorReferral?: true
    insuranceType?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    email?: true
    phone?: true
    address?: true
    socialInsuranceNumber?: true
    notes?: true
    doctorReferral?: true
    insuranceType?: true
    createdById?: true
    modifiedById?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    dateOfBirth: Date | null
    email: string | null
    phone: string
    address: string | null
    socialInsuranceNumber: string | null
    notes: string | null
    doctorReferral: string | null
    insuranceType: $Enums.InsuranceType | null
    createdById: string
    modifiedById: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: PatientCountAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    socialInsuranceNumber?: boolean
    notes?: boolean
    doctorReferral?: boolean
    insuranceType?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Patient$modifiedByArgs<ExtArgs>
    packages?: boolean | Patient$packagesArgs<ExtArgs>
    appointments?: boolean | Patient$appointmentsArgs<ExtArgs>
    patientHistory?: boolean | Patient$patientHistoryArgs<ExtArgs>
    payments?: boolean | Patient$paymentsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    socialInsuranceNumber?: boolean
    notes?: boolean
    doctorReferral?: boolean
    insuranceType?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Patient$modifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    socialInsuranceNumber?: boolean
    notes?: boolean
    doctorReferral?: boolean
    insuranceType?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Patient$modifiedByArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    socialInsuranceNumber?: boolean
    notes?: boolean
    doctorReferral?: boolean
    insuranceType?: boolean
    createdById?: boolean
    modifiedById?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "dateOfBirth" | "email" | "phone" | "address" | "socialInsuranceNumber" | "notes" | "doctorReferral" | "insuranceType" | "createdById" | "modifiedById" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Patient$modifiedByArgs<ExtArgs>
    packages?: boolean | Patient$packagesArgs<ExtArgs>
    appointments?: boolean | Patient$appointmentsArgs<ExtArgs>
    patientHistory?: boolean | Patient$patientHistoryArgs<ExtArgs>
    payments?: boolean | Patient$paymentsArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PatientIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Patient$modifiedByArgs<ExtArgs>
  }
  export type PatientIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Patient$modifiedByArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      modifiedBy: Prisma.$UserPayload<ExtArgs> | null
      packages: Prisma.$PackagePayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      patientHistory: Prisma.$PatientHistoryPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      dateOfBirth: Date | null
      email: string | null
      phone: string
      address: string | null
      socialInsuranceNumber: string | null
      notes: string | null
      doctorReferral: string | null
      insuranceType: $Enums.InsuranceType | null
      createdById: string
      modifiedById: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Patients and returns the data saved in the database.
     * @param {PatientCreateManyAndReturnArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients and returns the data updated in the database.
     * @param {PatientUpdateManyAndReturnArgs} args - Arguments to update many Patients.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Patients and only return the `id`
     * const patientWithIdOnly = await prisma.patient.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    modifiedBy<T extends Patient$modifiedByArgs<ExtArgs> = {}>(args?: Subset<T, Patient$modifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    packages<T extends Patient$packagesArgs<ExtArgs> = {}>(args?: Subset<T, Patient$packagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends Patient$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientHistory<T extends Patient$patientHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Patient$patientHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Patient$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Patient$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'String'>
    readonly firstName: FieldRef<"Patient", 'String'>
    readonly lastName: FieldRef<"Patient", 'String'>
    readonly dateOfBirth: FieldRef<"Patient", 'DateTime'>
    readonly email: FieldRef<"Patient", 'String'>
    readonly phone: FieldRef<"Patient", 'String'>
    readonly address: FieldRef<"Patient", 'String'>
    readonly socialInsuranceNumber: FieldRef<"Patient", 'String'>
    readonly notes: FieldRef<"Patient", 'String'>
    readonly doctorReferral: FieldRef<"Patient", 'String'>
    readonly insuranceType: FieldRef<"Patient", 'InsuranceType'>
    readonly createdById: FieldRef<"Patient", 'String'>
    readonly modifiedById: FieldRef<"Patient", 'String'>
    readonly isActive: FieldRef<"Patient", 'Boolean'>
    readonly createdAt: FieldRef<"Patient", 'DateTime'>
    readonly updatedAt: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient createManyAndReturn
   */
  export type PatientCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient updateManyAndReturn
   */
  export type PatientUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.modifiedBy
   */
  export type Patient$modifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Patient.packages
   */
  export type Patient$packagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    cursor?: PackageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Patient.appointments
   */
  export type Patient$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Patient.patientHistory
   */
  export type Patient$patientHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    where?: PatientHistoryWhereInput
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    cursor?: PatientHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientHistoryScalarFieldEnum | PatientHistoryScalarFieldEnum[]
  }

  /**
   * Patient.payments
   */
  export type Patient$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model PatientHistory
   */

  export type AggregatePatientHistory = {
    _count: PatientHistoryCountAggregateOutputType | null
    _min: PatientHistoryMinAggregateOutputType | null
    _max: PatientHistoryMaxAggregateOutputType | null
  }

  export type PatientHistoryMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    packageId: string | null
    appointmentId: string | null
    mainSubjectiveProblem: string | null
    symptomHistory: string | null
    previousCourseAndTherapy: string | null
    patientGoals: string | null
    activityStatus: string | null
    trunkAndHeadParticularities: string | null
    edemaTrophicsAtrophies: string | null
    notes: string | null
    createdById: string | null
    modifiedById: string | null
    recordedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientHistoryMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    packageId: string | null
    appointmentId: string | null
    mainSubjectiveProblem: string | null
    symptomHistory: string | null
    previousCourseAndTherapy: string | null
    patientGoals: string | null
    activityStatus: string | null
    trunkAndHeadParticularities: string | null
    edemaTrophicsAtrophies: string | null
    notes: string | null
    createdById: string | null
    modifiedById: string | null
    recordedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PatientHistoryCountAggregateOutputType = {
    id: number
    patientId: number
    packageId: number
    appointmentId: number
    mainSubjectiveProblem: number
    symptomHistory: number
    previousCourseAndTherapy: number
    patientGoals: number
    activityStatus: number
    trunkAndHeadParticularities: number
    edemaTrophicsAtrophies: number
    notes: number
    createdById: number
    modifiedById: number
    recordedAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PatientHistoryMinAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    appointmentId?: true
    mainSubjectiveProblem?: true
    symptomHistory?: true
    previousCourseAndTherapy?: true
    patientGoals?: true
    activityStatus?: true
    trunkAndHeadParticularities?: true
    edemaTrophicsAtrophies?: true
    notes?: true
    createdById?: true
    modifiedById?: true
    recordedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientHistoryMaxAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    appointmentId?: true
    mainSubjectiveProblem?: true
    symptomHistory?: true
    previousCourseAndTherapy?: true
    patientGoals?: true
    activityStatus?: true
    trunkAndHeadParticularities?: true
    edemaTrophicsAtrophies?: true
    notes?: true
    createdById?: true
    modifiedById?: true
    recordedAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PatientHistoryCountAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    appointmentId?: true
    mainSubjectiveProblem?: true
    symptomHistory?: true
    previousCourseAndTherapy?: true
    patientGoals?: true
    activityStatus?: true
    trunkAndHeadParticularities?: true
    edemaTrophicsAtrophies?: true
    notes?: true
    createdById?: true
    modifiedById?: true
    recordedAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PatientHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientHistory to aggregate.
     */
    where?: PatientHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientHistories to fetch.
     */
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientHistories
    **/
    _count?: true | PatientHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientHistoryMaxAggregateInputType
  }

  export type GetPatientHistoryAggregateType<T extends PatientHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientHistory[P]>
      : GetScalarType<T[P], AggregatePatientHistory[P]>
  }




  export type PatientHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientHistoryWhereInput
    orderBy?: PatientHistoryOrderByWithAggregationInput | PatientHistoryOrderByWithAggregationInput[]
    by: PatientHistoryScalarFieldEnum[] | PatientHistoryScalarFieldEnum
    having?: PatientHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientHistoryCountAggregateInputType | true
    _min?: PatientHistoryMinAggregateInputType
    _max?: PatientHistoryMaxAggregateInputType
  }

  export type PatientHistoryGroupByOutputType = {
    id: string
    patientId: string
    packageId: string | null
    appointmentId: string | null
    mainSubjectiveProblem: string | null
    symptomHistory: string | null
    previousCourseAndTherapy: string | null
    patientGoals: string | null
    activityStatus: string | null
    trunkAndHeadParticularities: string | null
    edemaTrophicsAtrophies: string | null
    notes: string | null
    createdById: string
    modifiedById: string | null
    recordedAt: Date
    createdAt: Date
    updatedAt: Date
    _count: PatientHistoryCountAggregateOutputType | null
    _min: PatientHistoryMinAggregateOutputType | null
    _max: PatientHistoryMaxAggregateOutputType | null
  }

  type GetPatientHistoryGroupByPayload<T extends PatientHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], PatientHistoryGroupByOutputType[P]>
        }
      >
    >


  export type PatientHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    appointmentId?: boolean
    mainSubjectiveProblem?: boolean
    symptomHistory?: boolean
    previousCourseAndTherapy?: boolean
    patientGoals?: boolean
    activityStatus?: boolean
    trunkAndHeadParticularities?: boolean
    edemaTrophicsAtrophies?: boolean
    notes?: boolean
    createdById?: boolean
    modifiedById?: boolean
    recordedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | PatientHistory$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | PatientHistory$packageArgs<ExtArgs>
    appointment?: boolean | PatientHistory$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["patientHistory"]>

  export type PatientHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    appointmentId?: boolean
    mainSubjectiveProblem?: boolean
    symptomHistory?: boolean
    previousCourseAndTherapy?: boolean
    patientGoals?: boolean
    activityStatus?: boolean
    trunkAndHeadParticularities?: boolean
    edemaTrophicsAtrophies?: boolean
    notes?: boolean
    createdById?: boolean
    modifiedById?: boolean
    recordedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | PatientHistory$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | PatientHistory$packageArgs<ExtArgs>
    appointment?: boolean | PatientHistory$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["patientHistory"]>

  export type PatientHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    appointmentId?: boolean
    mainSubjectiveProblem?: boolean
    symptomHistory?: boolean
    previousCourseAndTherapy?: boolean
    patientGoals?: boolean
    activityStatus?: boolean
    trunkAndHeadParticularities?: boolean
    edemaTrophicsAtrophies?: boolean
    notes?: boolean
    createdById?: boolean
    modifiedById?: boolean
    recordedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | PatientHistory$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | PatientHistory$packageArgs<ExtArgs>
    appointment?: boolean | PatientHistory$appointmentArgs<ExtArgs>
  }, ExtArgs["result"]["patientHistory"]>

  export type PatientHistorySelectScalar = {
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    appointmentId?: boolean
    mainSubjectiveProblem?: boolean
    symptomHistory?: boolean
    previousCourseAndTherapy?: boolean
    patientGoals?: boolean
    activityStatus?: boolean
    trunkAndHeadParticularities?: boolean
    edemaTrophicsAtrophies?: boolean
    notes?: boolean
    createdById?: boolean
    modifiedById?: boolean
    recordedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PatientHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "packageId" | "appointmentId" | "mainSubjectiveProblem" | "symptomHistory" | "previousCourseAndTherapy" | "patientGoals" | "activityStatus" | "trunkAndHeadParticularities" | "edemaTrophicsAtrophies" | "notes" | "createdById" | "modifiedById" | "recordedAt" | "createdAt" | "updatedAt", ExtArgs["result"]["patientHistory"]>
  export type PatientHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | PatientHistory$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | PatientHistory$packageArgs<ExtArgs>
    appointment?: boolean | PatientHistory$appointmentArgs<ExtArgs>
  }
  export type PatientHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | PatientHistory$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | PatientHistory$packageArgs<ExtArgs>
    appointment?: boolean | PatientHistory$appointmentArgs<ExtArgs>
  }
  export type PatientHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | PatientHistory$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | PatientHistory$packageArgs<ExtArgs>
    appointment?: boolean | PatientHistory$appointmentArgs<ExtArgs>
  }

  export type $PatientHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientHistory"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      modifiedBy: Prisma.$UserPayload<ExtArgs> | null
      patient: Prisma.$PatientPayload<ExtArgs>
      package: Prisma.$PackagePayload<ExtArgs> | null
      appointment: Prisma.$AppointmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      packageId: string | null
      appointmentId: string | null
      mainSubjectiveProblem: string | null
      symptomHistory: string | null
      previousCourseAndTherapy: string | null
      patientGoals: string | null
      activityStatus: string | null
      trunkAndHeadParticularities: string | null
      edemaTrophicsAtrophies: string | null
      notes: string | null
      createdById: string
      modifiedById: string | null
      recordedAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["patientHistory"]>
    composites: {}
  }

  type PatientHistoryGetPayload<S extends boolean | null | undefined | PatientHistoryDefaultArgs> = $Result.GetResult<Prisma.$PatientHistoryPayload, S>

  type PatientHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientHistoryCountAggregateInputType | true
    }

  export interface PatientHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientHistory'], meta: { name: 'PatientHistory' } }
    /**
     * Find zero or one PatientHistory that matches the filter.
     * @param {PatientHistoryFindUniqueArgs} args - Arguments to find a PatientHistory
     * @example
     * // Get one PatientHistory
     * const patientHistory = await prisma.patientHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientHistoryFindUniqueArgs>(args: SelectSubset<T, PatientHistoryFindUniqueArgs<ExtArgs>>): Prisma__PatientHistoryClient<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientHistoryFindUniqueOrThrowArgs} args - Arguments to find a PatientHistory
     * @example
     * // Get one PatientHistory
     * const patientHistory = await prisma.patientHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientHistoryClient<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHistoryFindFirstArgs} args - Arguments to find a PatientHistory
     * @example
     * // Get one PatientHistory
     * const patientHistory = await prisma.patientHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientHistoryFindFirstArgs>(args?: SelectSubset<T, PatientHistoryFindFirstArgs<ExtArgs>>): Prisma__PatientHistoryClient<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHistoryFindFirstOrThrowArgs} args - Arguments to find a PatientHistory
     * @example
     * // Get one PatientHistory
     * const patientHistory = await prisma.patientHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientHistoryClient<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientHistories
     * const patientHistories = await prisma.patientHistory.findMany()
     * 
     * // Get first 10 PatientHistories
     * const patientHistories = await prisma.patientHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientHistoryWithIdOnly = await prisma.patientHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientHistoryFindManyArgs>(args?: SelectSubset<T, PatientHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientHistory.
     * @param {PatientHistoryCreateArgs} args - Arguments to create a PatientHistory.
     * @example
     * // Create one PatientHistory
     * const PatientHistory = await prisma.patientHistory.create({
     *   data: {
     *     // ... data to create a PatientHistory
     *   }
     * })
     * 
     */
    create<T extends PatientHistoryCreateArgs>(args: SelectSubset<T, PatientHistoryCreateArgs<ExtArgs>>): Prisma__PatientHistoryClient<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientHistories.
     * @param {PatientHistoryCreateManyArgs} args - Arguments to create many PatientHistories.
     * @example
     * // Create many PatientHistories
     * const patientHistory = await prisma.patientHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientHistoryCreateManyArgs>(args?: SelectSubset<T, PatientHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientHistories and returns the data saved in the database.
     * @param {PatientHistoryCreateManyAndReturnArgs} args - Arguments to create many PatientHistories.
     * @example
     * // Create many PatientHistories
     * const patientHistory = await prisma.patientHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientHistories and only return the `id`
     * const patientHistoryWithIdOnly = await prisma.patientHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientHistory.
     * @param {PatientHistoryDeleteArgs} args - Arguments to delete one PatientHistory.
     * @example
     * // Delete one PatientHistory
     * const PatientHistory = await prisma.patientHistory.delete({
     *   where: {
     *     // ... filter to delete one PatientHistory
     *   }
     * })
     * 
     */
    delete<T extends PatientHistoryDeleteArgs>(args: SelectSubset<T, PatientHistoryDeleteArgs<ExtArgs>>): Prisma__PatientHistoryClient<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientHistory.
     * @param {PatientHistoryUpdateArgs} args - Arguments to update one PatientHistory.
     * @example
     * // Update one PatientHistory
     * const patientHistory = await prisma.patientHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientHistoryUpdateArgs>(args: SelectSubset<T, PatientHistoryUpdateArgs<ExtArgs>>): Prisma__PatientHistoryClient<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientHistories.
     * @param {PatientHistoryDeleteManyArgs} args - Arguments to filter PatientHistories to delete.
     * @example
     * // Delete a few PatientHistories
     * const { count } = await prisma.patientHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientHistoryDeleteManyArgs>(args?: SelectSubset<T, PatientHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientHistories
     * const patientHistory = await prisma.patientHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientHistoryUpdateManyArgs>(args: SelectSubset<T, PatientHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientHistories and returns the data updated in the database.
     * @param {PatientHistoryUpdateManyAndReturnArgs} args - Arguments to update many PatientHistories.
     * @example
     * // Update many PatientHistories
     * const patientHistory = await prisma.patientHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientHistories and only return the `id`
     * const patientHistoryWithIdOnly = await prisma.patientHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientHistory.
     * @param {PatientHistoryUpsertArgs} args - Arguments to update or create a PatientHistory.
     * @example
     * // Update or create a PatientHistory
     * const patientHistory = await prisma.patientHistory.upsert({
     *   create: {
     *     // ... data to create a PatientHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientHistory we want to update
     *   }
     * })
     */
    upsert<T extends PatientHistoryUpsertArgs>(args: SelectSubset<T, PatientHistoryUpsertArgs<ExtArgs>>): Prisma__PatientHistoryClient<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHistoryCountArgs} args - Arguments to filter PatientHistories to count.
     * @example
     * // Count the number of PatientHistories
     * const count = await prisma.patientHistory.count({
     *   where: {
     *     // ... the filter for the PatientHistories we want to count
     *   }
     * })
    **/
    count<T extends PatientHistoryCountArgs>(
      args?: Subset<T, PatientHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientHistoryAggregateArgs>(args: Subset<T, PatientHistoryAggregateArgs>): Prisma.PrismaPromise<GetPatientHistoryAggregateType<T>>

    /**
     * Group by PatientHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientHistoryGroupByArgs['orderBy'] }
        : { orderBy?: PatientHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientHistory model
   */
  readonly fields: PatientHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    modifiedBy<T extends PatientHistory$modifiedByArgs<ExtArgs> = {}>(args?: Subset<T, PatientHistory$modifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    package<T extends PatientHistory$packageArgs<ExtArgs> = {}>(args?: Subset<T, PatientHistory$packageArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    appointment<T extends PatientHistory$appointmentArgs<ExtArgs> = {}>(args?: Subset<T, PatientHistory$appointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientHistory model
   */
  interface PatientHistoryFieldRefs {
    readonly id: FieldRef<"PatientHistory", 'String'>
    readonly patientId: FieldRef<"PatientHistory", 'String'>
    readonly packageId: FieldRef<"PatientHistory", 'String'>
    readonly appointmentId: FieldRef<"PatientHistory", 'String'>
    readonly mainSubjectiveProblem: FieldRef<"PatientHistory", 'String'>
    readonly symptomHistory: FieldRef<"PatientHistory", 'String'>
    readonly previousCourseAndTherapy: FieldRef<"PatientHistory", 'String'>
    readonly patientGoals: FieldRef<"PatientHistory", 'String'>
    readonly activityStatus: FieldRef<"PatientHistory", 'String'>
    readonly trunkAndHeadParticularities: FieldRef<"PatientHistory", 'String'>
    readonly edemaTrophicsAtrophies: FieldRef<"PatientHistory", 'String'>
    readonly notes: FieldRef<"PatientHistory", 'String'>
    readonly createdById: FieldRef<"PatientHistory", 'String'>
    readonly modifiedById: FieldRef<"PatientHistory", 'String'>
    readonly recordedAt: FieldRef<"PatientHistory", 'DateTime'>
    readonly createdAt: FieldRef<"PatientHistory", 'DateTime'>
    readonly updatedAt: FieldRef<"PatientHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientHistory findUnique
   */
  export type PatientHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PatientHistory to fetch.
     */
    where: PatientHistoryWhereUniqueInput
  }

  /**
   * PatientHistory findUniqueOrThrow
   */
  export type PatientHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PatientHistory to fetch.
     */
    where: PatientHistoryWhereUniqueInput
  }

  /**
   * PatientHistory findFirst
   */
  export type PatientHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PatientHistory to fetch.
     */
    where?: PatientHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientHistories to fetch.
     */
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientHistories.
     */
    cursor?: PatientHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientHistories.
     */
    distinct?: PatientHistoryScalarFieldEnum | PatientHistoryScalarFieldEnum[]
  }

  /**
   * PatientHistory findFirstOrThrow
   */
  export type PatientHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PatientHistory to fetch.
     */
    where?: PatientHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientHistories to fetch.
     */
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientHistories.
     */
    cursor?: PatientHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientHistories.
     */
    distinct?: PatientHistoryScalarFieldEnum | PatientHistoryScalarFieldEnum[]
  }

  /**
   * PatientHistory findMany
   */
  export type PatientHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * Filter, which PatientHistories to fetch.
     */
    where?: PatientHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientHistories to fetch.
     */
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientHistories.
     */
    cursor?: PatientHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientHistories.
     */
    skip?: number
    distinct?: PatientHistoryScalarFieldEnum | PatientHistoryScalarFieldEnum[]
  }

  /**
   * PatientHistory create
   */
  export type PatientHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientHistory.
     */
    data: XOR<PatientHistoryCreateInput, PatientHistoryUncheckedCreateInput>
  }

  /**
   * PatientHistory createMany
   */
  export type PatientHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientHistories.
     */
    data: PatientHistoryCreateManyInput | PatientHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientHistory createManyAndReturn
   */
  export type PatientHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many PatientHistories.
     */
    data: PatientHistoryCreateManyInput | PatientHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientHistory update
   */
  export type PatientHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientHistory.
     */
    data: XOR<PatientHistoryUpdateInput, PatientHistoryUncheckedUpdateInput>
    /**
     * Choose, which PatientHistory to update.
     */
    where: PatientHistoryWhereUniqueInput
  }

  /**
   * PatientHistory updateMany
   */
  export type PatientHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientHistories.
     */
    data: XOR<PatientHistoryUpdateManyMutationInput, PatientHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PatientHistories to update
     */
    where?: PatientHistoryWhereInput
    /**
     * Limit how many PatientHistories to update.
     */
    limit?: number
  }

  /**
   * PatientHistory updateManyAndReturn
   */
  export type PatientHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * The data used to update PatientHistories.
     */
    data: XOR<PatientHistoryUpdateManyMutationInput, PatientHistoryUncheckedUpdateManyInput>
    /**
     * Filter which PatientHistories to update
     */
    where?: PatientHistoryWhereInput
    /**
     * Limit how many PatientHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientHistory upsert
   */
  export type PatientHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientHistory to update in case it exists.
     */
    where: PatientHistoryWhereUniqueInput
    /**
     * In case the PatientHistory found by the `where` argument doesn't exist, create a new PatientHistory with this data.
     */
    create: XOR<PatientHistoryCreateInput, PatientHistoryUncheckedCreateInput>
    /**
     * In case the PatientHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientHistoryUpdateInput, PatientHistoryUncheckedUpdateInput>
  }

  /**
   * PatientHistory delete
   */
  export type PatientHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    /**
     * Filter which PatientHistory to delete.
     */
    where: PatientHistoryWhereUniqueInput
  }

  /**
   * PatientHistory deleteMany
   */
  export type PatientHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientHistories to delete
     */
    where?: PatientHistoryWhereInput
    /**
     * Limit how many PatientHistories to delete.
     */
    limit?: number
  }

  /**
   * PatientHistory.modifiedBy
   */
  export type PatientHistory$modifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * PatientHistory.package
   */
  export type PatientHistory$packageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
  }

  /**
   * PatientHistory.appointment
   */
  export type PatientHistory$appointmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
  }

  /**
   * PatientHistory without action
   */
  export type PatientHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
  }


  /**
   * Model Package
   */

  export type AggregatePackage = {
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  export type PackageAvgAggregateOutputType = {
    totalPrice: Decimal | null
    discountAmount: Decimal | null
    finalPrice: Decimal | null
  }

  export type PackageSumAggregateOutputType = {
    totalPrice: Decimal | null
    discountAmount: Decimal | null
    finalPrice: Decimal | null
  }

  export type PackageMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    name: string | null
    totalPrice: Decimal | null
    discountAmount: Decimal | null
    finalPrice: Decimal | null
    status: $Enums.PackageStatus | null
    paymentStatus: $Enums.PaymentStatus | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackageMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    name: string | null
    totalPrice: Decimal | null
    discountAmount: Decimal | null
    finalPrice: Decimal | null
    status: $Enums.PackageStatus | null
    paymentStatus: $Enums.PaymentStatus | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PackageCountAggregateOutputType = {
    id: number
    patientId: number
    name: number
    totalPrice: number
    discountAmount: number
    finalPrice: number
    status: number
    paymentStatus: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PackageAvgAggregateInputType = {
    totalPrice?: true
    discountAmount?: true
    finalPrice?: true
  }

  export type PackageSumAggregateInputType = {
    totalPrice?: true
    discountAmount?: true
    finalPrice?: true
  }

  export type PackageMinAggregateInputType = {
    id?: true
    patientId?: true
    name?: true
    totalPrice?: true
    discountAmount?: true
    finalPrice?: true
    status?: true
    paymentStatus?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackageMaxAggregateInputType = {
    id?: true
    patientId?: true
    name?: true
    totalPrice?: true
    discountAmount?: true
    finalPrice?: true
    status?: true
    paymentStatus?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PackageCountAggregateInputType = {
    id?: true
    patientId?: true
    name?: true
    totalPrice?: true
    discountAmount?: true
    finalPrice?: true
    status?: true
    paymentStatus?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Package to aggregate.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packages
    **/
    _count?: true | PackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageMaxAggregateInputType
  }

  export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackage[P]>
      : GetScalarType<T[P], AggregatePackage[P]>
  }




  export type PackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithAggregationInput | PackageOrderByWithAggregationInput[]
    by: PackageScalarFieldEnum[] | PackageScalarFieldEnum
    having?: PackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageCountAggregateInputType | true
    _avg?: PackageAvgAggregateInputType
    _sum?: PackageSumAggregateInputType
    _min?: PackageMinAggregateInputType
    _max?: PackageMaxAggregateInputType
  }

  export type PackageGroupByOutputType = {
    id: string
    patientId: string
    name: string
    totalPrice: Decimal
    discountAmount: Decimal | null
    finalPrice: Decimal
    status: $Enums.PackageStatus
    paymentStatus: $Enums.PaymentStatus
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageGroupByOutputType[P]>
            : GetScalarType<T[P], PackageGroupByOutputType[P]>
        }
      >
    >


  export type PackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    name?: boolean
    totalPrice?: boolean
    discountAmount?: boolean
    finalPrice?: boolean
    status?: boolean
    paymentStatus?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    packageItems?: boolean | Package$packageItemsArgs<ExtArgs>
    appointments?: boolean | Package$appointmentsArgs<ExtArgs>
    patientHistory?: boolean | Package$patientHistoryArgs<ExtArgs>
    payments?: boolean | Package$paymentsArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    name?: boolean
    totalPrice?: boolean
    discountAmount?: boolean
    finalPrice?: boolean
    status?: boolean
    paymentStatus?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    name?: boolean
    totalPrice?: boolean
    discountAmount?: boolean
    finalPrice?: boolean
    status?: boolean
    paymentStatus?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectScalar = {
    id?: boolean
    patientId?: boolean
    name?: boolean
    totalPrice?: boolean
    discountAmount?: boolean
    finalPrice?: boolean
    status?: boolean
    paymentStatus?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PackageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "name" | "totalPrice" | "discountAmount" | "finalPrice" | "status" | "paymentStatus" | "createdById" | "createdAt" | "updatedAt", ExtArgs["result"]["package"]>
  export type PackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    packageItems?: boolean | Package$packageItemsArgs<ExtArgs>
    appointments?: boolean | Package$appointmentsArgs<ExtArgs>
    patientHistory?: boolean | Package$patientHistoryArgs<ExtArgs>
    payments?: boolean | Package$paymentsArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PackageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Package"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      packageItems: Prisma.$PackageItemPayload<ExtArgs>[]
      appointments: Prisma.$AppointmentPayload<ExtArgs>[]
      patientHistory: Prisma.$PatientHistoryPayload<ExtArgs>[]
      payments: Prisma.$PaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      name: string
      totalPrice: Prisma.Decimal
      discountAmount: Prisma.Decimal | null
      finalPrice: Prisma.Decimal
      status: $Enums.PackageStatus
      paymentStatus: $Enums.PaymentStatus
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["package"]>
    composites: {}
  }

  type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = $Result.GetResult<Prisma.$PackagePayload, S>

  type PackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackageCountAggregateInputType | true
    }

  export interface PackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
    /**
     * Find zero or one Package that matches the filter.
     * @param {PackageFindUniqueArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageFindUniqueArgs>(args: SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Package that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Package that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageFindFirstArgs>(args?: SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Package that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Packages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packages
     * const packages = await prisma.package.findMany()
     * 
     * // Get first 10 Packages
     * const packages = await prisma.package.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageWithIdOnly = await prisma.package.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageFindManyArgs>(args?: SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Package.
     * @param {PackageCreateArgs} args - Arguments to create a Package.
     * @example
     * // Create one Package
     * const Package = await prisma.package.create({
     *   data: {
     *     // ... data to create a Package
     *   }
     * })
     * 
     */
    create<T extends PackageCreateArgs>(args: SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Packages.
     * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageCreateManyArgs>(args?: SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Packages and returns the data saved in the database.
     * @param {PackageCreateManyAndReturnArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Packages and only return the `id`
     * const packageWithIdOnly = await prisma.package.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Package.
     * @param {PackageDeleteArgs} args - Arguments to delete one Package.
     * @example
     * // Delete one Package
     * const Package = await prisma.package.delete({
     *   where: {
     *     // ... filter to delete one Package
     *   }
     * })
     * 
     */
    delete<T extends PackageDeleteArgs>(args: SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Package.
     * @param {PackageUpdateArgs} args - Arguments to update one Package.
     * @example
     * // Update one Package
     * const package = await prisma.package.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageUpdateArgs>(args: SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Packages.
     * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
     * @example
     * // Delete a few Packages
     * const { count } = await prisma.package.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageDeleteManyArgs>(args?: SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageUpdateManyArgs>(args: SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages and returns the data updated in the database.
     * @param {PackageUpdateManyAndReturnArgs} args - Arguments to update many Packages.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Packages and only return the `id`
     * const packageWithIdOnly = await prisma.package.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PackageUpdateManyAndReturnArgs>(args: SelectSubset<T, PackageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Package.
     * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
     * @example
     * // Update or create a Package
     * const package = await prisma.package.upsert({
     *   create: {
     *     // ... data to create a Package
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Package we want to update
     *   }
     * })
     */
    upsert<T extends PackageUpsertArgs>(args: SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageCountArgs} args - Arguments to filter Packages to count.
     * @example
     * // Count the number of Packages
     * const count = await prisma.package.count({
     *   where: {
     *     // ... the filter for the Packages we want to count
     *   }
     * })
    **/
    count<T extends PackageCountArgs>(
      args?: Subset<T, PackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageAggregateArgs>(args: Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

    /**
     * Group by Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageGroupByArgs['orderBy'] }
        : { orderBy?: PackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Package model
   */
  readonly fields: PackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Package.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    packageItems<T extends Package$packageItemsArgs<ExtArgs> = {}>(args?: Subset<T, Package$packageItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    appointments<T extends Package$appointmentsArgs<ExtArgs> = {}>(args?: Subset<T, Package$appointmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientHistory<T extends Package$patientHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Package$patientHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    payments<T extends Package$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Package$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Package model
   */
  interface PackageFieldRefs {
    readonly id: FieldRef<"Package", 'String'>
    readonly patientId: FieldRef<"Package", 'String'>
    readonly name: FieldRef<"Package", 'String'>
    readonly totalPrice: FieldRef<"Package", 'Decimal'>
    readonly discountAmount: FieldRef<"Package", 'Decimal'>
    readonly finalPrice: FieldRef<"Package", 'Decimal'>
    readonly status: FieldRef<"Package", 'PackageStatus'>
    readonly paymentStatus: FieldRef<"Package", 'PaymentStatus'>
    readonly createdById: FieldRef<"Package", 'String'>
    readonly createdAt: FieldRef<"Package", 'DateTime'>
    readonly updatedAt: FieldRef<"Package", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Package findUnique
   */
  export type PackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findUniqueOrThrow
   */
  export type PackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findFirst
   */
  export type PackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findFirstOrThrow
   */
  export type PackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findMany
   */
  export type PackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Packages to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package create
   */
  export type PackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to create a Package.
     */
    data: XOR<PackageCreateInput, PackageUncheckedCreateInput>
  }

  /**
   * Package createMany
   */
  export type PackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package createManyAndReturn
   */
  export type PackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Package update
   */
  export type PackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to update a Package.
     */
    data: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
    /**
     * Choose, which Package to update.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package updateMany
   */
  export type PackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to update.
     */
    limit?: number
  }

  /**
   * Package updateManyAndReturn
   */
  export type PackageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Package upsert
   */
  export type PackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The filter to search for the Package to update in case it exists.
     */
    where: PackageWhereUniqueInput
    /**
     * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
     */
    create: XOR<PackageCreateInput, PackageUncheckedCreateInput>
    /**
     * In case the Package was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
  }

  /**
   * Package delete
   */
  export type PackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter which Package to delete.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package deleteMany
   */
  export type PackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packages to delete
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to delete.
     */
    limit?: number
  }

  /**
   * Package.packageItems
   */
  export type Package$packageItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    where?: PackageItemWhereInput
    orderBy?: PackageItemOrderByWithRelationInput | PackageItemOrderByWithRelationInput[]
    cursor?: PackageItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageItemScalarFieldEnum | PackageItemScalarFieldEnum[]
  }

  /**
   * Package.appointments
   */
  export type Package$appointmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Package.patientHistory
   */
  export type Package$patientHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    where?: PatientHistoryWhereInput
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    cursor?: PatientHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientHistoryScalarFieldEnum | PatientHistoryScalarFieldEnum[]
  }

  /**
   * Package.payments
   */
  export type Package$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Package without action
   */
  export type PackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
  }


  /**
   * Model PackageItem
   */

  export type AggregatePackageItem = {
    _count: PackageItemCountAggregateOutputType | null
    _avg: PackageItemAvgAggregateOutputType | null
    _sum: PackageItemSumAggregateOutputType | null
    _min: PackageItemMinAggregateOutputType | null
    _max: PackageItemMaxAggregateOutputType | null
  }

  export type PackageItemAvgAggregateOutputType = {
    sessionCount: number | null
    completedCount: number | null
  }

  export type PackageItemSumAggregateOutputType = {
    sessionCount: number | null
    completedCount: number | null
  }

  export type PackageItemMinAggregateOutputType = {
    id: string | null
    packageId: string | null
    serviceId: string | null
    sessionCount: number | null
    completedCount: number | null
  }

  export type PackageItemMaxAggregateOutputType = {
    id: string | null
    packageId: string | null
    serviceId: string | null
    sessionCount: number | null
    completedCount: number | null
  }

  export type PackageItemCountAggregateOutputType = {
    id: number
    packageId: number
    serviceId: number
    sessionCount: number
    completedCount: number
    _all: number
  }


  export type PackageItemAvgAggregateInputType = {
    sessionCount?: true
    completedCount?: true
  }

  export type PackageItemSumAggregateInputType = {
    sessionCount?: true
    completedCount?: true
  }

  export type PackageItemMinAggregateInputType = {
    id?: true
    packageId?: true
    serviceId?: true
    sessionCount?: true
    completedCount?: true
  }

  export type PackageItemMaxAggregateInputType = {
    id?: true
    packageId?: true
    serviceId?: true
    sessionCount?: true
    completedCount?: true
  }

  export type PackageItemCountAggregateInputType = {
    id?: true
    packageId?: true
    serviceId?: true
    sessionCount?: true
    completedCount?: true
    _all?: true
  }

  export type PackageItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageItem to aggregate.
     */
    where?: PackageItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageItems to fetch.
     */
    orderBy?: PackageItemOrderByWithRelationInput | PackageItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PackageItems
    **/
    _count?: true | PackageItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageItemMaxAggregateInputType
  }

  export type GetPackageItemAggregateType<T extends PackageItemAggregateArgs> = {
        [P in keyof T & keyof AggregatePackageItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackageItem[P]>
      : GetScalarType<T[P], AggregatePackageItem[P]>
  }




  export type PackageItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageItemWhereInput
    orderBy?: PackageItemOrderByWithAggregationInput | PackageItemOrderByWithAggregationInput[]
    by: PackageItemScalarFieldEnum[] | PackageItemScalarFieldEnum
    having?: PackageItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageItemCountAggregateInputType | true
    _avg?: PackageItemAvgAggregateInputType
    _sum?: PackageItemSumAggregateInputType
    _min?: PackageItemMinAggregateInputType
    _max?: PackageItemMaxAggregateInputType
  }

  export type PackageItemGroupByOutputType = {
    id: string
    packageId: string
    serviceId: string
    sessionCount: number
    completedCount: number
    _count: PackageItemCountAggregateOutputType | null
    _avg: PackageItemAvgAggregateOutputType | null
    _sum: PackageItemSumAggregateOutputType | null
    _min: PackageItemMinAggregateOutputType | null
    _max: PackageItemMaxAggregateOutputType | null
  }

  type GetPackageItemGroupByPayload<T extends PackageItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageItemGroupByOutputType[P]>
            : GetScalarType<T[P], PackageItemGroupByOutputType[P]>
        }
      >
    >


  export type PackageItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    serviceId?: boolean
    sessionCount?: boolean
    completedCount?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageItem"]>

  export type PackageItemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    serviceId?: boolean
    sessionCount?: boolean
    completedCount?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageItem"]>

  export type PackageItemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    packageId?: boolean
    serviceId?: boolean
    sessionCount?: boolean
    completedCount?: boolean
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageItem"]>

  export type PackageItemSelectScalar = {
    id?: boolean
    packageId?: boolean
    serviceId?: boolean
    sessionCount?: boolean
    completedCount?: boolean
  }

  export type PackageItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "packageId" | "serviceId" | "sessionCount" | "completedCount", ExtArgs["result"]["packageItem"]>
  export type PackageItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type PackageItemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }
  export type PackageItemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    package?: boolean | PackageDefaultArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
  }

  export type $PackageItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PackageItem"
    objects: {
      package: Prisma.$PackagePayload<ExtArgs>
      service: Prisma.$ServicePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      packageId: string
      serviceId: string
      sessionCount: number
      completedCount: number
    }, ExtArgs["result"]["packageItem"]>
    composites: {}
  }

  type PackageItemGetPayload<S extends boolean | null | undefined | PackageItemDefaultArgs> = $Result.GetResult<Prisma.$PackageItemPayload, S>

  type PackageItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackageItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackageItemCountAggregateInputType | true
    }

  export interface PackageItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PackageItem'], meta: { name: 'PackageItem' } }
    /**
     * Find zero or one PackageItem that matches the filter.
     * @param {PackageItemFindUniqueArgs} args - Arguments to find a PackageItem
     * @example
     * // Get one PackageItem
     * const packageItem = await prisma.packageItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageItemFindUniqueArgs>(args: SelectSubset<T, PackageItemFindUniqueArgs<ExtArgs>>): Prisma__PackageItemClient<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PackageItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackageItemFindUniqueOrThrowArgs} args - Arguments to find a PackageItem
     * @example
     * // Get one PackageItem
     * const packageItem = await prisma.packageItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageItemFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageItemClient<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PackageItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageItemFindFirstArgs} args - Arguments to find a PackageItem
     * @example
     * // Get one PackageItem
     * const packageItem = await prisma.packageItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageItemFindFirstArgs>(args?: SelectSubset<T, PackageItemFindFirstArgs<ExtArgs>>): Prisma__PackageItemClient<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PackageItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageItemFindFirstOrThrowArgs} args - Arguments to find a PackageItem
     * @example
     * // Get one PackageItem
     * const packageItem = await prisma.packageItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageItemFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageItemClient<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PackageItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PackageItems
     * const packageItems = await prisma.packageItem.findMany()
     * 
     * // Get first 10 PackageItems
     * const packageItems = await prisma.packageItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const packageItemWithIdOnly = await prisma.packageItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PackageItemFindManyArgs>(args?: SelectSubset<T, PackageItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PackageItem.
     * @param {PackageItemCreateArgs} args - Arguments to create a PackageItem.
     * @example
     * // Create one PackageItem
     * const PackageItem = await prisma.packageItem.create({
     *   data: {
     *     // ... data to create a PackageItem
     *   }
     * })
     * 
     */
    create<T extends PackageItemCreateArgs>(args: SelectSubset<T, PackageItemCreateArgs<ExtArgs>>): Prisma__PackageItemClient<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PackageItems.
     * @param {PackageItemCreateManyArgs} args - Arguments to create many PackageItems.
     * @example
     * // Create many PackageItems
     * const packageItem = await prisma.packageItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageItemCreateManyArgs>(args?: SelectSubset<T, PackageItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PackageItems and returns the data saved in the database.
     * @param {PackageItemCreateManyAndReturnArgs} args - Arguments to create many PackageItems.
     * @example
     * // Create many PackageItems
     * const packageItem = await prisma.packageItem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PackageItems and only return the `id`
     * const packageItemWithIdOnly = await prisma.packageItem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageItemCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageItemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PackageItem.
     * @param {PackageItemDeleteArgs} args - Arguments to delete one PackageItem.
     * @example
     * // Delete one PackageItem
     * const PackageItem = await prisma.packageItem.delete({
     *   where: {
     *     // ... filter to delete one PackageItem
     *   }
     * })
     * 
     */
    delete<T extends PackageItemDeleteArgs>(args: SelectSubset<T, PackageItemDeleteArgs<ExtArgs>>): Prisma__PackageItemClient<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PackageItem.
     * @param {PackageItemUpdateArgs} args - Arguments to update one PackageItem.
     * @example
     * // Update one PackageItem
     * const packageItem = await prisma.packageItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageItemUpdateArgs>(args: SelectSubset<T, PackageItemUpdateArgs<ExtArgs>>): Prisma__PackageItemClient<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PackageItems.
     * @param {PackageItemDeleteManyArgs} args - Arguments to filter PackageItems to delete.
     * @example
     * // Delete a few PackageItems
     * const { count } = await prisma.packageItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageItemDeleteManyArgs>(args?: SelectSubset<T, PackageItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PackageItems
     * const packageItem = await prisma.packageItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageItemUpdateManyArgs>(args: SelectSubset<T, PackageItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageItems and returns the data updated in the database.
     * @param {PackageItemUpdateManyAndReturnArgs} args - Arguments to update many PackageItems.
     * @example
     * // Update many PackageItems
     * const packageItem = await prisma.packageItem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PackageItems and only return the `id`
     * const packageItemWithIdOnly = await prisma.packageItem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PackageItemUpdateManyAndReturnArgs>(args: SelectSubset<T, PackageItemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PackageItem.
     * @param {PackageItemUpsertArgs} args - Arguments to update or create a PackageItem.
     * @example
     * // Update or create a PackageItem
     * const packageItem = await prisma.packageItem.upsert({
     *   create: {
     *     // ... data to create a PackageItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PackageItem we want to update
     *   }
     * })
     */
    upsert<T extends PackageItemUpsertArgs>(args: SelectSubset<T, PackageItemUpsertArgs<ExtArgs>>): Prisma__PackageItemClient<$Result.GetResult<Prisma.$PackageItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PackageItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageItemCountArgs} args - Arguments to filter PackageItems to count.
     * @example
     * // Count the number of PackageItems
     * const count = await prisma.packageItem.count({
     *   where: {
     *     // ... the filter for the PackageItems we want to count
     *   }
     * })
    **/
    count<T extends PackageItemCountArgs>(
      args?: Subset<T, PackageItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PackageItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageItemAggregateArgs>(args: Subset<T, PackageItemAggregateArgs>): Prisma.PrismaPromise<GetPackageItemAggregateType<T>>

    /**
     * Group by PackageItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageItemGroupByArgs['orderBy'] }
        : { orderBy?: PackageItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PackageItem model
   */
  readonly fields: PackageItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PackageItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PackageItem model
   */
  interface PackageItemFieldRefs {
    readonly id: FieldRef<"PackageItem", 'String'>
    readonly packageId: FieldRef<"PackageItem", 'String'>
    readonly serviceId: FieldRef<"PackageItem", 'String'>
    readonly sessionCount: FieldRef<"PackageItem", 'Int'>
    readonly completedCount: FieldRef<"PackageItem", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PackageItem findUnique
   */
  export type PackageItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * Filter, which PackageItem to fetch.
     */
    where: PackageItemWhereUniqueInput
  }

  /**
   * PackageItem findUniqueOrThrow
   */
  export type PackageItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * Filter, which PackageItem to fetch.
     */
    where: PackageItemWhereUniqueInput
  }

  /**
   * PackageItem findFirst
   */
  export type PackageItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * Filter, which PackageItem to fetch.
     */
    where?: PackageItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageItems to fetch.
     */
    orderBy?: PackageItemOrderByWithRelationInput | PackageItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageItems.
     */
    cursor?: PackageItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageItems.
     */
    distinct?: PackageItemScalarFieldEnum | PackageItemScalarFieldEnum[]
  }

  /**
   * PackageItem findFirstOrThrow
   */
  export type PackageItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * Filter, which PackageItem to fetch.
     */
    where?: PackageItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageItems to fetch.
     */
    orderBy?: PackageItemOrderByWithRelationInput | PackageItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageItems.
     */
    cursor?: PackageItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageItems.
     */
    distinct?: PackageItemScalarFieldEnum | PackageItemScalarFieldEnum[]
  }

  /**
   * PackageItem findMany
   */
  export type PackageItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * Filter, which PackageItems to fetch.
     */
    where?: PackageItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageItems to fetch.
     */
    orderBy?: PackageItemOrderByWithRelationInput | PackageItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PackageItems.
     */
    cursor?: PackageItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageItems.
     */
    skip?: number
    distinct?: PackageItemScalarFieldEnum | PackageItemScalarFieldEnum[]
  }

  /**
   * PackageItem create
   */
  export type PackageItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * The data needed to create a PackageItem.
     */
    data: XOR<PackageItemCreateInput, PackageItemUncheckedCreateInput>
  }

  /**
   * PackageItem createMany
   */
  export type PackageItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PackageItems.
     */
    data: PackageItemCreateManyInput | PackageItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PackageItem createManyAndReturn
   */
  export type PackageItemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * The data used to create many PackageItems.
     */
    data: PackageItemCreateManyInput | PackageItemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackageItem update
   */
  export type PackageItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * The data needed to update a PackageItem.
     */
    data: XOR<PackageItemUpdateInput, PackageItemUncheckedUpdateInput>
    /**
     * Choose, which PackageItem to update.
     */
    where: PackageItemWhereUniqueInput
  }

  /**
   * PackageItem updateMany
   */
  export type PackageItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PackageItems.
     */
    data: XOR<PackageItemUpdateManyMutationInput, PackageItemUncheckedUpdateManyInput>
    /**
     * Filter which PackageItems to update
     */
    where?: PackageItemWhereInput
    /**
     * Limit how many PackageItems to update.
     */
    limit?: number
  }

  /**
   * PackageItem updateManyAndReturn
   */
  export type PackageItemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * The data used to update PackageItems.
     */
    data: XOR<PackageItemUpdateManyMutationInput, PackageItemUncheckedUpdateManyInput>
    /**
     * Filter which PackageItems to update
     */
    where?: PackageItemWhereInput
    /**
     * Limit how many PackageItems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackageItem upsert
   */
  export type PackageItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * The filter to search for the PackageItem to update in case it exists.
     */
    where: PackageItemWhereUniqueInput
    /**
     * In case the PackageItem found by the `where` argument doesn't exist, create a new PackageItem with this data.
     */
    create: XOR<PackageItemCreateInput, PackageItemUncheckedCreateInput>
    /**
     * In case the PackageItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageItemUpdateInput, PackageItemUncheckedUpdateInput>
  }

  /**
   * PackageItem delete
   */
  export type PackageItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
    /**
     * Filter which PackageItem to delete.
     */
    where: PackageItemWhereUniqueInput
  }

  /**
   * PackageItem deleteMany
   */
  export type PackageItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageItems to delete
     */
    where?: PackageItemWhereInput
    /**
     * Limit how many PackageItems to delete.
     */
    limit?: number
  }

  /**
   * PackageItem without action
   */
  export type PackageItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageItem
     */
    select?: PackageItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageItem
     */
    omit?: PackageItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageItemInclude<ExtArgs> | null
  }


  /**
   * Model Appointment
   */

  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    packageId: string | null
    serviceId: string | null
    staffId: string | null
    roomId: string | null
    scheduledDate: Date | null
    startTime: string | null
    endTime: string | null
    status: $Enums.AppointmentStatus | null
    notes: string | null
    hasConflict: boolean | null
    conflictReason: string | null
    isVisible: boolean | null
    createdById: string | null
    modifiedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    packageId: string | null
    serviceId: string | null
    staffId: string | null
    roomId: string | null
    scheduledDate: Date | null
    startTime: string | null
    endTime: string | null
    status: $Enums.AppointmentStatus | null
    notes: string | null
    hasConflict: boolean | null
    conflictReason: string | null
    isVisible: boolean | null
    createdById: string | null
    modifiedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    patientId: number
    packageId: number
    serviceId: number
    staffId: number
    roomId: number
    scheduledDate: number
    startTime: number
    endTime: number
    status: number
    notes: number
    hasConflict: number
    conflictReason: number
    isVisible: number
    createdById: number
    modifiedById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AppointmentMinAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    serviceId?: true
    staffId?: true
    roomId?: true
    scheduledDate?: true
    startTime?: true
    endTime?: true
    status?: true
    notes?: true
    hasConflict?: true
    conflictReason?: true
    isVisible?: true
    createdById?: true
    modifiedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    serviceId?: true
    staffId?: true
    roomId?: true
    scheduledDate?: true
    startTime?: true
    endTime?: true
    status?: true
    notes?: true
    hasConflict?: true
    conflictReason?: true
    isVisible?: true
    createdById?: true
    modifiedById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    serviceId?: true
    staffId?: true
    roomId?: true
    scheduledDate?: true
    startTime?: true
    endTime?: true
    status?: true
    notes?: true
    hasConflict?: true
    conflictReason?: true
    isVisible?: true
    createdById?: true
    modifiedById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: AppointmentOrderByWithAggregationInput | AppointmentOrderByWithAggregationInput[]
    by: AppointmentScalarFieldEnum[] | AppointmentScalarFieldEnum
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }

  export type AppointmentGroupByOutputType = {
    id: string
    patientId: string
    packageId: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date
    startTime: string
    endTime: string
    status: $Enums.AppointmentStatus
    notes: string | null
    hasConflict: boolean
    conflictReason: string | null
    isVisible: boolean
    createdById: string
    modifiedById: string | null
    createdAt: Date
    updatedAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    serviceId?: boolean
    staffId?: boolean
    roomId?: boolean
    scheduledDate?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    notes?: boolean
    hasConflict?: boolean
    conflictReason?: boolean
    isVisible?: boolean
    createdById?: boolean
    modifiedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Appointment$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Appointment$packageArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
    patientHistory?: boolean | Appointment$patientHistoryArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    serviceId?: boolean
    staffId?: boolean
    roomId?: boolean
    scheduledDate?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    notes?: boolean
    hasConflict?: boolean
    conflictReason?: boolean
    isVisible?: boolean
    createdById?: boolean
    modifiedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Appointment$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Appointment$packageArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    serviceId?: boolean
    staffId?: boolean
    roomId?: boolean
    scheduledDate?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    notes?: boolean
    hasConflict?: boolean
    conflictReason?: boolean
    isVisible?: boolean
    createdById?: boolean
    modifiedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Appointment$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Appointment$packageArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    serviceId?: boolean
    staffId?: boolean
    roomId?: boolean
    scheduledDate?: boolean
    startTime?: boolean
    endTime?: boolean
    status?: boolean
    notes?: boolean
    hasConflict?: boolean
    conflictReason?: boolean
    isVisible?: boolean
    createdById?: boolean
    modifiedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AppointmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "packageId" | "serviceId" | "staffId" | "roomId" | "scheduledDate" | "startTime" | "endTime" | "status" | "notes" | "hasConflict" | "conflictReason" | "isVisible" | "createdById" | "modifiedById" | "createdAt" | "updatedAt", ExtArgs["result"]["appointment"]>
  export type AppointmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Appointment$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Appointment$packageArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
    patientHistory?: boolean | Appointment$patientHistoryArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Appointment$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Appointment$packageArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }
  export type AppointmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    modifiedBy?: boolean | Appointment$modifiedByArgs<ExtArgs>
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Appointment$packageArgs<ExtArgs>
    service?: boolean | ServiceDefaultArgs<ExtArgs>
    staff?: boolean | UserDefaultArgs<ExtArgs>
    room?: boolean | RoomDefaultArgs<ExtArgs>
  }

  export type $AppointmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Appointment"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      modifiedBy: Prisma.$UserPayload<ExtArgs> | null
      patient: Prisma.$PatientPayload<ExtArgs>
      package: Prisma.$PackagePayload<ExtArgs> | null
      service: Prisma.$ServicePayload<ExtArgs>
      staff: Prisma.$UserPayload<ExtArgs>
      room: Prisma.$RoomPayload<ExtArgs>
      patientHistory: Prisma.$PatientHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      packageId: string | null
      serviceId: string
      staffId: string
      roomId: string
      scheduledDate: Date
      startTime: string
      endTime: string
      status: $Enums.AppointmentStatus
      notes: string | null
      hasConflict: boolean
      conflictReason: string | null
      isVisible: boolean
      createdById: string
      modifiedById: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["appointment"]>
    composites: {}
  }

  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentDefaultArgs> = $Result.GetResult<Prisma.$AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AppointmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AppointmentFindUniqueArgs>(args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Appointment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AppointmentFindFirstArgs>(args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Appointment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AppointmentFindManyArgs>(args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
     */
    create<T extends AppointmentCreateArgs>(args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Appointments.
     * @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AppointmentCreateManyArgs>(args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Appointments and returns the data saved in the database.
     * @param {AppointmentCreateManyAndReturnArgs} args - Arguments to create many Appointments.
     * @example
     * // Create many Appointments
     * const appointment = await prisma.appointment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AppointmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AppointmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
     */
    delete<T extends AppointmentDeleteArgs>(args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AppointmentUpdateArgs>(args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AppointmentDeleteManyArgs>(args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AppointmentUpdateManyArgs>(args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments and returns the data updated in the database.
     * @param {AppointmentUpdateManyAndReturnArgs} args - Arguments to update many Appointments.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Appointments and only return the `id`
     * const appointmentWithIdOnly = await prisma.appointment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AppointmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AppointmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
     */
    upsert<T extends AppointmentUpsertArgs>(args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>): Prisma__AppointmentClient<$Result.GetResult<Prisma.$AppointmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Appointment model
   */
  readonly fields: AppointmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    modifiedBy<T extends Appointment$modifiedByArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$modifiedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    package<T extends Appointment$packageArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$packageArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    service<T extends ServiceDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ServiceDefaultArgs<ExtArgs>>): Prisma__ServiceClient<$Result.GetResult<Prisma.$ServicePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    staff<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    room<T extends RoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoomDefaultArgs<ExtArgs>>): Prisma__RoomClient<$Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patientHistory<T extends Appointment$patientHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$patientHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Appointment model
   */
  interface AppointmentFieldRefs {
    readonly id: FieldRef<"Appointment", 'String'>
    readonly patientId: FieldRef<"Appointment", 'String'>
    readonly packageId: FieldRef<"Appointment", 'String'>
    readonly serviceId: FieldRef<"Appointment", 'String'>
    readonly staffId: FieldRef<"Appointment", 'String'>
    readonly roomId: FieldRef<"Appointment", 'String'>
    readonly scheduledDate: FieldRef<"Appointment", 'DateTime'>
    readonly startTime: FieldRef<"Appointment", 'String'>
    readonly endTime: FieldRef<"Appointment", 'String'>
    readonly status: FieldRef<"Appointment", 'AppointmentStatus'>
    readonly notes: FieldRef<"Appointment", 'String'>
    readonly hasConflict: FieldRef<"Appointment", 'Boolean'>
    readonly conflictReason: FieldRef<"Appointment", 'String'>
    readonly isVisible: FieldRef<"Appointment", 'Boolean'>
    readonly createdById: FieldRef<"Appointment", 'String'>
    readonly modifiedById: FieldRef<"Appointment", 'String'>
    readonly createdAt: FieldRef<"Appointment", 'DateTime'>
    readonly updatedAt: FieldRef<"Appointment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: AppointmentOrderByWithRelationInput | AppointmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: AppointmentScalarFieldEnum | AppointmentScalarFieldEnum[]
  }

  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }

  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Appointment createManyAndReturn
   */
  export type AppointmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to create many Appointments.
     */
    data: AppointmentCreateManyInput | AppointmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
  }

  /**
   * Appointment updateManyAndReturn
   */
  export type AppointmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }

  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
    /**
     * Limit how many Appointments to delete.
     */
    limit?: number
  }

  /**
   * Appointment.modifiedBy
   */
  export type Appointment$modifiedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Appointment.package
   */
  export type Appointment$packageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
  }

  /**
   * Appointment.patientHistory
   */
  export type Appointment$patientHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientHistory
     */
    select?: PatientHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientHistory
     */
    omit?: PatientHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientHistoryInclude<ExtArgs> | null
    where?: PatientHistoryWhereInput
    orderBy?: PatientHistoryOrderByWithRelationInput | PatientHistoryOrderByWithRelationInput[]
    cursor?: PatientHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientHistoryScalarFieldEnum | PatientHistoryScalarFieldEnum[]
  }

  /**
   * Appointment without action
   */
  export type AppointmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Appointment
     */
    omit?: AppointmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AppointmentInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: Decimal | null
    paidSessionsCount: number | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: Decimal | null
    paidSessionsCount: number | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    packageId: string | null
    amount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    paidSessionsCount: number | null
    status: $Enums.PaymentStatus | null
    paidAt: Date | null
    notes: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    packageId: string | null
    amount: Decimal | null
    paymentMethod: $Enums.PaymentMethod | null
    paidSessionsCount: number | null
    status: $Enums.PaymentStatus | null
    paidAt: Date | null
    notes: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    patientId: number
    packageId: number
    amount: number
    paymentMethod: number
    paidSessionsCount: number
    status: number
    paidAt: number
    notes: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
    paidSessionsCount?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
    paidSessionsCount?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    amount?: true
    paymentMethod?: true
    paidSessionsCount?: true
    status?: true
    paidAt?: true
    notes?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    amount?: true
    paymentMethod?: true
    paidSessionsCount?: true
    status?: true
    paidAt?: true
    notes?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    patientId?: true
    packageId?: true
    amount?: true
    paymentMethod?: true
    paidSessionsCount?: true
    status?: true
    paidAt?: true
    notes?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    patientId: string
    packageId: string | null
    amount: Decimal
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount: number | null
    status: $Enums.PaymentStatus
    paidAt: Date | null
    notes: string | null
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paidSessionsCount?: boolean
    status?: boolean
    paidAt?: boolean
    notes?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Payment$packageArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paidSessionsCount?: boolean
    status?: boolean
    paidAt?: boolean
    notes?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Payment$packageArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paidSessionsCount?: boolean
    status?: boolean
    paidAt?: boolean
    notes?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Payment$packageArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    patientId?: boolean
    packageId?: boolean
    amount?: boolean
    paymentMethod?: boolean
    paidSessionsCount?: boolean
    status?: boolean
    paidAt?: boolean
    notes?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "packageId" | "amount" | "paymentMethod" | "paidSessionsCount" | "status" | "paidAt" | "notes" | "createdById" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Payment$packageArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Payment$packageArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    package?: boolean | Payment$packageArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      package: Prisma.$PackagePayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      packageId: string | null
      amount: Prisma.Decimal
      paymentMethod: $Enums.PaymentMethod
      paidSessionsCount: number | null
      status: $Enums.PaymentStatus
      paidAt: Date | null
      notes: string | null
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {PaymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PaymentUpdateManyAndReturnArgs>(args: SelectSubset<T, PaymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    package<T extends Payment$packageArgs<ExtArgs> = {}>(args?: Subset<T, Payment$packageArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly patientId: FieldRef<"Payment", 'String'>
    readonly packageId: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Decimal'>
    readonly paymentMethod: FieldRef<"Payment", 'PaymentMethod'>
    readonly paidSessionsCount: FieldRef<"Payment", 'Int'>
    readonly status: FieldRef<"Payment", 'PaymentStatus'>
    readonly paidAt: FieldRef<"Payment", 'DateTime'>
    readonly notes: FieldRef<"Payment", 'String'>
    readonly createdById: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment updateManyAndReturn
   */
  export type PaymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment.package
   */
  export type Payment$packageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    where?: PackageWhereInput
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: $Enums.AuditAction | null
    tableName: string | null
    recordId: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: $Enums.AuditAction | null
    tableName: string | null
    recordId: string | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    tableName: number
    recordId: number
    oldValues: number
    newValues: number
    description: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    tableName?: true
    recordId?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    tableName?: true
    recordId?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    tableName?: true
    recordId?: true
    oldValues?: true
    newValues?: true
    description?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string
    action: $Enums.AuditAction
    tableName: string
    recordId: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    description: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    description?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "tableName" | "recordId" | "oldValues" | "newValues" | "description" | "ipAddress" | "userAgent" | "createdAt", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: $Enums.AuditAction
      tableName: string
      recordId: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      description: string | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs and returns the data updated in the database.
     * @param {AuditLogUpdateManyAndReturnArgs} args - Arguments to update many AuditLogs.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'AuditAction'>
    readonly tableName: FieldRef<"AuditLog", 'String'>
    readonly recordId: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly description: FieldRef<"AuditLog", 'String'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog updateManyAndReturn
   */
  export type AuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionToken: string | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionToken: string | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    sessionToken: number
    ipAddress: number
    userAgent: number
    isActive: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    sessionToken: string
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "sessionToken" | "ipAddress" | "userAgent" | "isActive" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["userSession"]>
  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      sessionToken: string
      ipAddress: string | null
      userAgent: string | null
      isActive: boolean
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions and returns the data updated in the database.
     * @param {UserSessionUpdateManyAndReturnArgs} args - Arguments to update many UserSessions.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly sessionToken: FieldRef<"UserSession", 'String'>
    readonly ipAddress: FieldRef<"UserSession", 'String'>
    readonly userAgent: FieldRef<"UserSession", 'String'>
    readonly isActive: FieldRef<"UserSession", 'Boolean'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
  }

  /**
   * UserSession updateManyAndReturn
   */
  export type UserSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
    /**
     * Limit how many UserSessions to delete.
     */
    limit?: number
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSession
     */
    omit?: UserSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model SystemSetting
   */

  export type AggregateSystemSetting = {
    _count: SystemSettingCountAggregateOutputType | null
    _min: SystemSettingMinAggregateOutputType | null
    _max: SystemSettingMaxAggregateOutputType | null
  }

  export type SystemSettingMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    description: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    description: string | null
    isPublic: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingCountAggregateOutputType = {
    id: number
    key: number
    value: number
    description: number
    isPublic: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemSettingMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    description?: true
    isPublic?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSetting to aggregate.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingMaxAggregateInputType
  }

  export type GetSystemSettingAggregateType<T extends SystemSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSetting[P]>
      : GetScalarType<T[P], AggregateSystemSetting[P]>
  }




  export type SystemSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingWhereInput
    orderBy?: SystemSettingOrderByWithAggregationInput | SystemSettingOrderByWithAggregationInput[]
    by: SystemSettingScalarFieldEnum[] | SystemSettingScalarFieldEnum
    having?: SystemSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingCountAggregateInputType | true
    _min?: SystemSettingMinAggregateInputType
    _max?: SystemSettingMaxAggregateInputType
  }

  export type SystemSettingGroupByOutputType = {
    id: string
    key: string
    value: string
    description: string | null
    isPublic: boolean
    createdAt: Date
    updatedAt: Date
    _count: SystemSettingCountAggregateOutputType | null
    _min: SystemSettingMinAggregateOutputType | null
    _max: SystemSettingMaxAggregateOutputType | null
  }

  type GetSystemSettingGroupByPayload<T extends SystemSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSetting"]>

  export type SystemSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSetting"]>

  export type SystemSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSetting"]>

  export type SystemSettingSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    description?: boolean
    isPublic?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SystemSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "key" | "value" | "description" | "isPublic" | "createdAt" | "updatedAt", ExtArgs["result"]["systemSetting"]>

  export type $SystemSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSetting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      description: string | null
      isPublic: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemSetting"]>
    composites: {}
  }

  type SystemSettingGetPayload<S extends boolean | null | undefined | SystemSettingDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingPayload, S>

  type SystemSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemSettingCountAggregateInputType | true
    }

  export interface SystemSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSetting'], meta: { name: 'SystemSetting' } }
    /**
     * Find zero or one SystemSetting that matches the filter.
     * @param {SystemSettingFindUniqueArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingFindUniqueArgs>(args: SelectSubset<T, SystemSettingFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemSettingFindUniqueOrThrowArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindFirstArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingFindFirstArgs>(args?: SelectSubset<T, SystemSettingFindFirstArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindFirstOrThrowArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSetting.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingWithIdOnly = await prisma.systemSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingFindManyArgs>(args?: SelectSubset<T, SystemSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemSetting.
     * @param {SystemSettingCreateArgs} args - Arguments to create a SystemSetting.
     * @example
     * // Create one SystemSetting
     * const SystemSetting = await prisma.systemSetting.create({
     *   data: {
     *     // ... data to create a SystemSetting
     *   }
     * })
     * 
     */
    create<T extends SystemSettingCreateArgs>(args: SelectSubset<T, SystemSettingCreateArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSetting = await prisma.systemSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingCreateManyArgs>(args?: SelectSubset<T, SystemSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemSettings and returns the data saved in the database.
     * @param {SystemSettingCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSetting = await prisma.systemSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemSettings and only return the `id`
     * const systemSettingWithIdOnly = await prisma.systemSetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemSetting.
     * @param {SystemSettingDeleteArgs} args - Arguments to delete one SystemSetting.
     * @example
     * // Delete one SystemSetting
     * const SystemSetting = await prisma.systemSetting.delete({
     *   where: {
     *     // ... filter to delete one SystemSetting
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingDeleteArgs>(args: SelectSubset<T, SystemSettingDeleteArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemSetting.
     * @param {SystemSettingUpdateArgs} args - Arguments to update one SystemSetting.
     * @example
     * // Update one SystemSetting
     * const systemSetting = await prisma.systemSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingUpdateArgs>(args: SelectSubset<T, SystemSettingUpdateArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingDeleteManyArgs>(args?: SelectSubset<T, SystemSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSetting = await prisma.systemSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingUpdateManyArgs>(args: SelectSubset<T, SystemSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings and returns the data updated in the database.
     * @param {SystemSettingUpdateManyAndReturnArgs} args - Arguments to update many SystemSettings.
     * @example
     * // Update many SystemSettings
     * const systemSetting = await prisma.systemSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemSettings and only return the `id`
     * const systemSettingWithIdOnly = await prisma.systemSetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemSetting.
     * @param {SystemSettingUpsertArgs} args - Arguments to update or create a SystemSetting.
     * @example
     * // Update or create a SystemSetting
     * const systemSetting = await prisma.systemSetting.upsert({
     *   create: {
     *     // ... data to create a SystemSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSetting we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingUpsertArgs>(args: SelectSubset<T, SystemSettingUpsertArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSetting.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingCountArgs>(
      args?: Subset<T, SystemSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingAggregateArgs>(args: Subset<T, SystemSettingAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingAggregateType<T>>

    /**
     * Group by SystemSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSetting model
   */
  readonly fields: SystemSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSetting model
   */
  interface SystemSettingFieldRefs {
    readonly id: FieldRef<"SystemSetting", 'String'>
    readonly key: FieldRef<"SystemSetting", 'String'>
    readonly value: FieldRef<"SystemSetting", 'String'>
    readonly description: FieldRef<"SystemSetting", 'String'>
    readonly isPublic: FieldRef<"SystemSetting", 'Boolean'>
    readonly createdAt: FieldRef<"SystemSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemSetting findUnique
   */
  export type SystemSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting findUniqueOrThrow
   */
  export type SystemSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting findFirst
   */
  export type SystemSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting findFirstOrThrow
   */
  export type SystemSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting findMany
   */
  export type SystemSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting create
   */
  export type SystemSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The data needed to create a SystemSetting.
     */
    data: XOR<SystemSettingCreateInput, SystemSettingUncheckedCreateInput>
  }

  /**
   * SystemSetting createMany
   */
  export type SystemSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingCreateManyInput | SystemSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSetting createManyAndReturn
   */
  export type SystemSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingCreateManyInput | SystemSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSetting update
   */
  export type SystemSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The data needed to update a SystemSetting.
     */
    data: XOR<SystemSettingUpdateInput, SystemSettingUncheckedUpdateInput>
    /**
     * Choose, which SystemSetting to update.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting updateMany
   */
  export type SystemSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingUpdateManyMutationInput, SystemSettingUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSetting updateManyAndReturn
   */
  export type SystemSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingUpdateManyMutationInput, SystemSettingUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSetting upsert
   */
  export type SystemSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * The filter to search for the SystemSetting to update in case it exists.
     */
    where: SystemSettingWhereUniqueInput
    /**
     * In case the SystemSetting found by the `where` argument doesn't exist, create a new SystemSetting with this data.
     */
    create: XOR<SystemSettingCreateInput, SystemSettingUncheckedCreateInput>
    /**
     * In case the SystemSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingUpdateInput, SystemSettingUncheckedUpdateInput>
  }

  /**
   * SystemSetting delete
   */
  export type SystemSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
    /**
     * Filter which SystemSetting to delete.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting deleteMany
   */
  export type SystemSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingWhereInput
    /**
     * Limit how many SystemSettings to delete.
     */
    limit?: number
  }

  /**
   * SystemSetting without action
   */
  export type SystemSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSetting
     */
    omit?: SystemSettingOmit<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    scheduledFor: Date | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    scheduledFor: Date | null
    sentAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    isRead: number
    scheduledFor: number
    sentAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    scheduledFor?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    scheduledFor?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    scheduledFor?: true
    sentAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string | null
    type: $Enums.NotificationType
    title: string
    message: string
    isRead: boolean
    scheduledFor: Date | null
    sentAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    scheduledFor?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    scheduledFor?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    scheduledFor?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | Notification$userArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    scheduledFor?: boolean
    sentAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "title" | "message" | "isRead" | "scheduledFor" | "sentAt" | "createdAt" | "updatedAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Notification$userArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Notification$userArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Notification$userArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      type: $Enums.NotificationType
      title: string
      message: string
      isRead: boolean
      scheduledFor: Date | null
      sentAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Notification$userArgs<ExtArgs> = {}>(args?: Subset<T, Notification$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly scheduledFor: FieldRef<"Notification", 'DateTime'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.user
   */
  export type Notification$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model CalendarSetting
   */

  export type AggregateCalendarSetting = {
    _count: CalendarSettingCountAggregateOutputType | null
    _avg: CalendarSettingAvgAggregateOutputType | null
    _sum: CalendarSettingSumAggregateOutputType | null
    _min: CalendarSettingMinAggregateOutputType | null
    _max: CalendarSettingMaxAggregateOutputType | null
  }

  export type CalendarSettingAvgAggregateOutputType = {
    timeSlotInterval: number | null
    autoRefreshInterval: number | null
  }

  export type CalendarSettingSumAggregateOutputType = {
    timeSlotInterval: number | null
    autoRefreshInterval: number | null
  }

  export type CalendarSettingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    workingHoursStart: string | null
    workingHoursEnd: string | null
    timeSlotInterval: number | null
    showWeekends: boolean | null
    defaultView: string | null
    showStaffAvailability: boolean | null
    showRoomInfo: boolean | null
    autoRefreshInterval: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CalendarSettingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    workingHoursStart: string | null
    workingHoursEnd: string | null
    timeSlotInterval: number | null
    showWeekends: boolean | null
    defaultView: string | null
    showStaffAvailability: boolean | null
    showRoomInfo: boolean | null
    autoRefreshInterval: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CalendarSettingCountAggregateOutputType = {
    id: number
    userId: number
    workingHoursStart: number
    workingHoursEnd: number
    timeSlotInterval: number
    showWeekends: number
    defaultView: number
    showStaffAvailability: number
    showRoomInfo: number
    autoRefreshInterval: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CalendarSettingAvgAggregateInputType = {
    timeSlotInterval?: true
    autoRefreshInterval?: true
  }

  export type CalendarSettingSumAggregateInputType = {
    timeSlotInterval?: true
    autoRefreshInterval?: true
  }

  export type CalendarSettingMinAggregateInputType = {
    id?: true
    userId?: true
    workingHoursStart?: true
    workingHoursEnd?: true
    timeSlotInterval?: true
    showWeekends?: true
    defaultView?: true
    showStaffAvailability?: true
    showRoomInfo?: true
    autoRefreshInterval?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CalendarSettingMaxAggregateInputType = {
    id?: true
    userId?: true
    workingHoursStart?: true
    workingHoursEnd?: true
    timeSlotInterval?: true
    showWeekends?: true
    defaultView?: true
    showStaffAvailability?: true
    showRoomInfo?: true
    autoRefreshInterval?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CalendarSettingCountAggregateInputType = {
    id?: true
    userId?: true
    workingHoursStart?: true
    workingHoursEnd?: true
    timeSlotInterval?: true
    showWeekends?: true
    defaultView?: true
    showStaffAvailability?: true
    showRoomInfo?: true
    autoRefreshInterval?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CalendarSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarSetting to aggregate.
     */
    where?: CalendarSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarSettings to fetch.
     */
    orderBy?: CalendarSettingOrderByWithRelationInput | CalendarSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CalendarSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CalendarSettings
    **/
    _count?: true | CalendarSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CalendarSettingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CalendarSettingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CalendarSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CalendarSettingMaxAggregateInputType
  }

  export type GetCalendarSettingAggregateType<T extends CalendarSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateCalendarSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCalendarSetting[P]>
      : GetScalarType<T[P], AggregateCalendarSetting[P]>
  }




  export type CalendarSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CalendarSettingWhereInput
    orderBy?: CalendarSettingOrderByWithAggregationInput | CalendarSettingOrderByWithAggregationInput[]
    by: CalendarSettingScalarFieldEnum[] | CalendarSettingScalarFieldEnum
    having?: CalendarSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CalendarSettingCountAggregateInputType | true
    _avg?: CalendarSettingAvgAggregateInputType
    _sum?: CalendarSettingSumAggregateInputType
    _min?: CalendarSettingMinAggregateInputType
    _max?: CalendarSettingMaxAggregateInputType
  }

  export type CalendarSettingGroupByOutputType = {
    id: string
    userId: string | null
    workingHoursStart: string
    workingHoursEnd: string
    timeSlotInterval: number
    showWeekends: boolean
    defaultView: string
    showStaffAvailability: boolean
    showRoomInfo: boolean
    autoRefreshInterval: number
    createdAt: Date
    updatedAt: Date
    _count: CalendarSettingCountAggregateOutputType | null
    _avg: CalendarSettingAvgAggregateOutputType | null
    _sum: CalendarSettingSumAggregateOutputType | null
    _min: CalendarSettingMinAggregateOutputType | null
    _max: CalendarSettingMaxAggregateOutputType | null
  }

  type GetCalendarSettingGroupByPayload<T extends CalendarSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CalendarSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CalendarSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CalendarSettingGroupByOutputType[P]>
            : GetScalarType<T[P], CalendarSettingGroupByOutputType[P]>
        }
      >
    >


  export type CalendarSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workingHoursStart?: boolean
    workingHoursEnd?: boolean
    timeSlotInterval?: boolean
    showWeekends?: boolean
    defaultView?: boolean
    showStaffAvailability?: boolean
    showRoomInfo?: boolean
    autoRefreshInterval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["calendarSetting"]>

  export type CalendarSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workingHoursStart?: boolean
    workingHoursEnd?: boolean
    timeSlotInterval?: boolean
    showWeekends?: boolean
    defaultView?: boolean
    showStaffAvailability?: boolean
    showRoomInfo?: boolean
    autoRefreshInterval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["calendarSetting"]>

  export type CalendarSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    workingHoursStart?: boolean
    workingHoursEnd?: boolean
    timeSlotInterval?: boolean
    showWeekends?: boolean
    defaultView?: boolean
    showStaffAvailability?: boolean
    showRoomInfo?: boolean
    autoRefreshInterval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["calendarSetting"]>

  export type CalendarSettingSelectScalar = {
    id?: boolean
    userId?: boolean
    workingHoursStart?: boolean
    workingHoursEnd?: boolean
    timeSlotInterval?: boolean
    showWeekends?: boolean
    defaultView?: boolean
    showStaffAvailability?: boolean
    showRoomInfo?: boolean
    autoRefreshInterval?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CalendarSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "workingHoursStart" | "workingHoursEnd" | "timeSlotInterval" | "showWeekends" | "defaultView" | "showStaffAvailability" | "showRoomInfo" | "autoRefreshInterval" | "createdAt" | "updatedAt", ExtArgs["result"]["calendarSetting"]>

  export type $CalendarSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CalendarSetting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      workingHoursStart: string
      workingHoursEnd: string
      timeSlotInterval: number
      showWeekends: boolean
      defaultView: string
      showStaffAvailability: boolean
      showRoomInfo: boolean
      autoRefreshInterval: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["calendarSetting"]>
    composites: {}
  }

  type CalendarSettingGetPayload<S extends boolean | null | undefined | CalendarSettingDefaultArgs> = $Result.GetResult<Prisma.$CalendarSettingPayload, S>

  type CalendarSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CalendarSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CalendarSettingCountAggregateInputType | true
    }

  export interface CalendarSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CalendarSetting'], meta: { name: 'CalendarSetting' } }
    /**
     * Find zero or one CalendarSetting that matches the filter.
     * @param {CalendarSettingFindUniqueArgs} args - Arguments to find a CalendarSetting
     * @example
     * // Get one CalendarSetting
     * const calendarSetting = await prisma.calendarSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CalendarSettingFindUniqueArgs>(args: SelectSubset<T, CalendarSettingFindUniqueArgs<ExtArgs>>): Prisma__CalendarSettingClient<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CalendarSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CalendarSettingFindUniqueOrThrowArgs} args - Arguments to find a CalendarSetting
     * @example
     * // Get one CalendarSetting
     * const calendarSetting = await prisma.calendarSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CalendarSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, CalendarSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CalendarSettingClient<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalendarSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarSettingFindFirstArgs} args - Arguments to find a CalendarSetting
     * @example
     * // Get one CalendarSetting
     * const calendarSetting = await prisma.calendarSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CalendarSettingFindFirstArgs>(args?: SelectSubset<T, CalendarSettingFindFirstArgs<ExtArgs>>): Prisma__CalendarSettingClient<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CalendarSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarSettingFindFirstOrThrowArgs} args - Arguments to find a CalendarSetting
     * @example
     * // Get one CalendarSetting
     * const calendarSetting = await prisma.calendarSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CalendarSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, CalendarSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__CalendarSettingClient<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CalendarSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CalendarSettings
     * const calendarSettings = await prisma.calendarSetting.findMany()
     * 
     * // Get first 10 CalendarSettings
     * const calendarSettings = await prisma.calendarSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const calendarSettingWithIdOnly = await prisma.calendarSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CalendarSettingFindManyArgs>(args?: SelectSubset<T, CalendarSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CalendarSetting.
     * @param {CalendarSettingCreateArgs} args - Arguments to create a CalendarSetting.
     * @example
     * // Create one CalendarSetting
     * const CalendarSetting = await prisma.calendarSetting.create({
     *   data: {
     *     // ... data to create a CalendarSetting
     *   }
     * })
     * 
     */
    create<T extends CalendarSettingCreateArgs>(args: SelectSubset<T, CalendarSettingCreateArgs<ExtArgs>>): Prisma__CalendarSettingClient<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CalendarSettings.
     * @param {CalendarSettingCreateManyArgs} args - Arguments to create many CalendarSettings.
     * @example
     * // Create many CalendarSettings
     * const calendarSetting = await prisma.calendarSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CalendarSettingCreateManyArgs>(args?: SelectSubset<T, CalendarSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CalendarSettings and returns the data saved in the database.
     * @param {CalendarSettingCreateManyAndReturnArgs} args - Arguments to create many CalendarSettings.
     * @example
     * // Create many CalendarSettings
     * const calendarSetting = await prisma.calendarSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CalendarSettings and only return the `id`
     * const calendarSettingWithIdOnly = await prisma.calendarSetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CalendarSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, CalendarSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CalendarSetting.
     * @param {CalendarSettingDeleteArgs} args - Arguments to delete one CalendarSetting.
     * @example
     * // Delete one CalendarSetting
     * const CalendarSetting = await prisma.calendarSetting.delete({
     *   where: {
     *     // ... filter to delete one CalendarSetting
     *   }
     * })
     * 
     */
    delete<T extends CalendarSettingDeleteArgs>(args: SelectSubset<T, CalendarSettingDeleteArgs<ExtArgs>>): Prisma__CalendarSettingClient<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CalendarSetting.
     * @param {CalendarSettingUpdateArgs} args - Arguments to update one CalendarSetting.
     * @example
     * // Update one CalendarSetting
     * const calendarSetting = await prisma.calendarSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CalendarSettingUpdateArgs>(args: SelectSubset<T, CalendarSettingUpdateArgs<ExtArgs>>): Prisma__CalendarSettingClient<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CalendarSettings.
     * @param {CalendarSettingDeleteManyArgs} args - Arguments to filter CalendarSettings to delete.
     * @example
     * // Delete a few CalendarSettings
     * const { count } = await prisma.calendarSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CalendarSettingDeleteManyArgs>(args?: SelectSubset<T, CalendarSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CalendarSettings
     * const calendarSetting = await prisma.calendarSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CalendarSettingUpdateManyArgs>(args: SelectSubset<T, CalendarSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CalendarSettings and returns the data updated in the database.
     * @param {CalendarSettingUpdateManyAndReturnArgs} args - Arguments to update many CalendarSettings.
     * @example
     * // Update many CalendarSettings
     * const calendarSetting = await prisma.calendarSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CalendarSettings and only return the `id`
     * const calendarSettingWithIdOnly = await prisma.calendarSetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CalendarSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, CalendarSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CalendarSetting.
     * @param {CalendarSettingUpsertArgs} args - Arguments to update or create a CalendarSetting.
     * @example
     * // Update or create a CalendarSetting
     * const calendarSetting = await prisma.calendarSetting.upsert({
     *   create: {
     *     // ... data to create a CalendarSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CalendarSetting we want to update
     *   }
     * })
     */
    upsert<T extends CalendarSettingUpsertArgs>(args: SelectSubset<T, CalendarSettingUpsertArgs<ExtArgs>>): Prisma__CalendarSettingClient<$Result.GetResult<Prisma.$CalendarSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CalendarSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarSettingCountArgs} args - Arguments to filter CalendarSettings to count.
     * @example
     * // Count the number of CalendarSettings
     * const count = await prisma.calendarSetting.count({
     *   where: {
     *     // ... the filter for the CalendarSettings we want to count
     *   }
     * })
    **/
    count<T extends CalendarSettingCountArgs>(
      args?: Subset<T, CalendarSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CalendarSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CalendarSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CalendarSettingAggregateArgs>(args: Subset<T, CalendarSettingAggregateArgs>): Prisma.PrismaPromise<GetCalendarSettingAggregateType<T>>

    /**
     * Group by CalendarSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CalendarSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CalendarSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CalendarSettingGroupByArgs['orderBy'] }
        : { orderBy?: CalendarSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CalendarSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendarSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CalendarSetting model
   */
  readonly fields: CalendarSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CalendarSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CalendarSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CalendarSetting model
   */
  interface CalendarSettingFieldRefs {
    readonly id: FieldRef<"CalendarSetting", 'String'>
    readonly userId: FieldRef<"CalendarSetting", 'String'>
    readonly workingHoursStart: FieldRef<"CalendarSetting", 'String'>
    readonly workingHoursEnd: FieldRef<"CalendarSetting", 'String'>
    readonly timeSlotInterval: FieldRef<"CalendarSetting", 'Int'>
    readonly showWeekends: FieldRef<"CalendarSetting", 'Boolean'>
    readonly defaultView: FieldRef<"CalendarSetting", 'String'>
    readonly showStaffAvailability: FieldRef<"CalendarSetting", 'Boolean'>
    readonly showRoomInfo: FieldRef<"CalendarSetting", 'Boolean'>
    readonly autoRefreshInterval: FieldRef<"CalendarSetting", 'Int'>
    readonly createdAt: FieldRef<"CalendarSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"CalendarSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CalendarSetting findUnique
   */
  export type CalendarSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * Filter, which CalendarSetting to fetch.
     */
    where: CalendarSettingWhereUniqueInput
  }

  /**
   * CalendarSetting findUniqueOrThrow
   */
  export type CalendarSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * Filter, which CalendarSetting to fetch.
     */
    where: CalendarSettingWhereUniqueInput
  }

  /**
   * CalendarSetting findFirst
   */
  export type CalendarSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * Filter, which CalendarSetting to fetch.
     */
    where?: CalendarSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarSettings to fetch.
     */
    orderBy?: CalendarSettingOrderByWithRelationInput | CalendarSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarSettings.
     */
    cursor?: CalendarSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarSettings.
     */
    distinct?: CalendarSettingScalarFieldEnum | CalendarSettingScalarFieldEnum[]
  }

  /**
   * CalendarSetting findFirstOrThrow
   */
  export type CalendarSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * Filter, which CalendarSetting to fetch.
     */
    where?: CalendarSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarSettings to fetch.
     */
    orderBy?: CalendarSettingOrderByWithRelationInput | CalendarSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CalendarSettings.
     */
    cursor?: CalendarSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CalendarSettings.
     */
    distinct?: CalendarSettingScalarFieldEnum | CalendarSettingScalarFieldEnum[]
  }

  /**
   * CalendarSetting findMany
   */
  export type CalendarSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * Filter, which CalendarSettings to fetch.
     */
    where?: CalendarSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CalendarSettings to fetch.
     */
    orderBy?: CalendarSettingOrderByWithRelationInput | CalendarSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CalendarSettings.
     */
    cursor?: CalendarSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CalendarSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CalendarSettings.
     */
    skip?: number
    distinct?: CalendarSettingScalarFieldEnum | CalendarSettingScalarFieldEnum[]
  }

  /**
   * CalendarSetting create
   */
  export type CalendarSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * The data needed to create a CalendarSetting.
     */
    data: XOR<CalendarSettingCreateInput, CalendarSettingUncheckedCreateInput>
  }

  /**
   * CalendarSetting createMany
   */
  export type CalendarSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CalendarSettings.
     */
    data: CalendarSettingCreateManyInput | CalendarSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalendarSetting createManyAndReturn
   */
  export type CalendarSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * The data used to create many CalendarSettings.
     */
    data: CalendarSettingCreateManyInput | CalendarSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CalendarSetting update
   */
  export type CalendarSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * The data needed to update a CalendarSetting.
     */
    data: XOR<CalendarSettingUpdateInput, CalendarSettingUncheckedUpdateInput>
    /**
     * Choose, which CalendarSetting to update.
     */
    where: CalendarSettingWhereUniqueInput
  }

  /**
   * CalendarSetting updateMany
   */
  export type CalendarSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CalendarSettings.
     */
    data: XOR<CalendarSettingUpdateManyMutationInput, CalendarSettingUncheckedUpdateManyInput>
    /**
     * Filter which CalendarSettings to update
     */
    where?: CalendarSettingWhereInput
    /**
     * Limit how many CalendarSettings to update.
     */
    limit?: number
  }

  /**
   * CalendarSetting updateManyAndReturn
   */
  export type CalendarSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * The data used to update CalendarSettings.
     */
    data: XOR<CalendarSettingUpdateManyMutationInput, CalendarSettingUncheckedUpdateManyInput>
    /**
     * Filter which CalendarSettings to update
     */
    where?: CalendarSettingWhereInput
    /**
     * Limit how many CalendarSettings to update.
     */
    limit?: number
  }

  /**
   * CalendarSetting upsert
   */
  export type CalendarSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * The filter to search for the CalendarSetting to update in case it exists.
     */
    where: CalendarSettingWhereUniqueInput
    /**
     * In case the CalendarSetting found by the `where` argument doesn't exist, create a new CalendarSetting with this data.
     */
    create: XOR<CalendarSettingCreateInput, CalendarSettingUncheckedCreateInput>
    /**
     * In case the CalendarSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CalendarSettingUpdateInput, CalendarSettingUncheckedUpdateInput>
  }

  /**
   * CalendarSetting delete
   */
  export type CalendarSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
    /**
     * Filter which CalendarSetting to delete.
     */
    where: CalendarSettingWhereUniqueInput
  }

  /**
   * CalendarSetting deleteMany
   */
  export type CalendarSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CalendarSettings to delete
     */
    where?: CalendarSettingWhereInput
    /**
     * Limit how many CalendarSettings to delete.
     */
    limit?: number
  }

  /**
   * CalendarSetting without action
   */
  export type CalendarSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CalendarSetting
     */
    select?: CalendarSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CalendarSetting
     */
    omit?: CalendarSettingOmit<ExtArgs> | null
  }


  /**
   * Model ConsentRecord
   */

  export type AggregateConsentRecord = {
    _count: ConsentRecordCountAggregateOutputType | null
    _min: ConsentRecordMinAggregateOutputType | null
    _max: ConsentRecordMaxAggregateOutputType | null
  }

  export type ConsentRecordMinAggregateOutputType = {
    id: string | null
    userId: string | null
    consentType: $Enums.ConsentType | null
    granted: boolean | null
    ipAddress: string | null
    userAgent: string | null
    consentString: string | null
    expiresAt: Date | null
    withdrawnAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsentRecordMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    consentType: $Enums.ConsentType | null
    granted: boolean | null
    ipAddress: string | null
    userAgent: string | null
    consentString: string | null
    expiresAt: Date | null
    withdrawnAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ConsentRecordCountAggregateOutputType = {
    id: number
    userId: number
    consentType: number
    granted: number
    ipAddress: number
    userAgent: number
    consentString: number
    expiresAt: number
    withdrawnAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ConsentRecordMinAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    ipAddress?: true
    userAgent?: true
    consentString?: true
    expiresAt?: true
    withdrawnAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsentRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    ipAddress?: true
    userAgent?: true
    consentString?: true
    expiresAt?: true
    withdrawnAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ConsentRecordCountAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    ipAddress?: true
    userAgent?: true
    consentString?: true
    expiresAt?: true
    withdrawnAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ConsentRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsentRecord to aggregate.
     */
    where?: ConsentRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentRecords to fetch.
     */
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ConsentRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ConsentRecords
    **/
    _count?: true | ConsentRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsentRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsentRecordMaxAggregateInputType
  }

  export type GetConsentRecordAggregateType<T extends ConsentRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateConsentRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsentRecord[P]>
      : GetScalarType<T[P], AggregateConsentRecord[P]>
  }




  export type ConsentRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ConsentRecordWhereInput
    orderBy?: ConsentRecordOrderByWithAggregationInput | ConsentRecordOrderByWithAggregationInput[]
    by: ConsentRecordScalarFieldEnum[] | ConsentRecordScalarFieldEnum
    having?: ConsentRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsentRecordCountAggregateInputType | true
    _min?: ConsentRecordMinAggregateInputType
    _max?: ConsentRecordMaxAggregateInputType
  }

  export type ConsentRecordGroupByOutputType = {
    id: string
    userId: string | null
    consentType: $Enums.ConsentType
    granted: boolean
    ipAddress: string | null
    userAgent: string | null
    consentString: string | null
    expiresAt: Date | null
    withdrawnAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ConsentRecordCountAggregateOutputType | null
    _min: ConsentRecordMinAggregateOutputType | null
    _max: ConsentRecordMaxAggregateOutputType | null
  }

  type GetConsentRecordGroupByPayload<T extends ConsentRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsentRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsentRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsentRecordGroupByOutputType[P]>
            : GetScalarType<T[P], ConsentRecordGroupByOutputType[P]>
        }
      >
    >


  export type ConsentRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    consentString?: boolean
    expiresAt?: boolean
    withdrawnAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | ConsentRecord$userArgs<ExtArgs>
  }, ExtArgs["result"]["consentRecord"]>

  export type ConsentRecordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    consentString?: boolean
    expiresAt?: boolean
    withdrawnAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | ConsentRecord$userArgs<ExtArgs>
  }, ExtArgs["result"]["consentRecord"]>

  export type ConsentRecordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    consentString?: boolean
    expiresAt?: boolean
    withdrawnAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | ConsentRecord$userArgs<ExtArgs>
  }, ExtArgs["result"]["consentRecord"]>

  export type ConsentRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    consentString?: boolean
    expiresAt?: boolean
    withdrawnAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ConsentRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "consentType" | "granted" | "ipAddress" | "userAgent" | "consentString" | "expiresAt" | "withdrawnAt" | "createdAt" | "updatedAt", ExtArgs["result"]["consentRecord"]>
  export type ConsentRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ConsentRecord$userArgs<ExtArgs>
  }
  export type ConsentRecordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ConsentRecord$userArgs<ExtArgs>
  }
  export type ConsentRecordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ConsentRecord$userArgs<ExtArgs>
  }

  export type $ConsentRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ConsentRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      consentType: $Enums.ConsentType
      granted: boolean
      ipAddress: string | null
      userAgent: string | null
      consentString: string | null
      expiresAt: Date | null
      withdrawnAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["consentRecord"]>
    composites: {}
  }

  type ConsentRecordGetPayload<S extends boolean | null | undefined | ConsentRecordDefaultArgs> = $Result.GetResult<Prisma.$ConsentRecordPayload, S>

  type ConsentRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ConsentRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsentRecordCountAggregateInputType | true
    }

  export interface ConsentRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConsentRecord'], meta: { name: 'ConsentRecord' } }
    /**
     * Find zero or one ConsentRecord that matches the filter.
     * @param {ConsentRecordFindUniqueArgs} args - Arguments to find a ConsentRecord
     * @example
     * // Get one ConsentRecord
     * const consentRecord = await prisma.consentRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ConsentRecordFindUniqueArgs>(args: SelectSubset<T, ConsentRecordFindUniqueArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ConsentRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ConsentRecordFindUniqueOrThrowArgs} args - Arguments to find a ConsentRecord
     * @example
     * // Get one ConsentRecord
     * const consentRecord = await prisma.consentRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ConsentRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, ConsentRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsentRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordFindFirstArgs} args - Arguments to find a ConsentRecord
     * @example
     * // Get one ConsentRecord
     * const consentRecord = await prisma.consentRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ConsentRecordFindFirstArgs>(args?: SelectSubset<T, ConsentRecordFindFirstArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ConsentRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordFindFirstOrThrowArgs} args - Arguments to find a ConsentRecord
     * @example
     * // Get one ConsentRecord
     * const consentRecord = await prisma.consentRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ConsentRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, ConsentRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ConsentRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ConsentRecords
     * const consentRecords = await prisma.consentRecord.findMany()
     * 
     * // Get first 10 ConsentRecords
     * const consentRecords = await prisma.consentRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consentRecordWithIdOnly = await prisma.consentRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ConsentRecordFindManyArgs>(args?: SelectSubset<T, ConsentRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ConsentRecord.
     * @param {ConsentRecordCreateArgs} args - Arguments to create a ConsentRecord.
     * @example
     * // Create one ConsentRecord
     * const ConsentRecord = await prisma.consentRecord.create({
     *   data: {
     *     // ... data to create a ConsentRecord
     *   }
     * })
     * 
     */
    create<T extends ConsentRecordCreateArgs>(args: SelectSubset<T, ConsentRecordCreateArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ConsentRecords.
     * @param {ConsentRecordCreateManyArgs} args - Arguments to create many ConsentRecords.
     * @example
     * // Create many ConsentRecords
     * const consentRecord = await prisma.consentRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ConsentRecordCreateManyArgs>(args?: SelectSubset<T, ConsentRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ConsentRecords and returns the data saved in the database.
     * @param {ConsentRecordCreateManyAndReturnArgs} args - Arguments to create many ConsentRecords.
     * @example
     * // Create many ConsentRecords
     * const consentRecord = await prisma.consentRecord.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ConsentRecords and only return the `id`
     * const consentRecordWithIdOnly = await prisma.consentRecord.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ConsentRecordCreateManyAndReturnArgs>(args?: SelectSubset<T, ConsentRecordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ConsentRecord.
     * @param {ConsentRecordDeleteArgs} args - Arguments to delete one ConsentRecord.
     * @example
     * // Delete one ConsentRecord
     * const ConsentRecord = await prisma.consentRecord.delete({
     *   where: {
     *     // ... filter to delete one ConsentRecord
     *   }
     * })
     * 
     */
    delete<T extends ConsentRecordDeleteArgs>(args: SelectSubset<T, ConsentRecordDeleteArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ConsentRecord.
     * @param {ConsentRecordUpdateArgs} args - Arguments to update one ConsentRecord.
     * @example
     * // Update one ConsentRecord
     * const consentRecord = await prisma.consentRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ConsentRecordUpdateArgs>(args: SelectSubset<T, ConsentRecordUpdateArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ConsentRecords.
     * @param {ConsentRecordDeleteManyArgs} args - Arguments to filter ConsentRecords to delete.
     * @example
     * // Delete a few ConsentRecords
     * const { count } = await prisma.consentRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ConsentRecordDeleteManyArgs>(args?: SelectSubset<T, ConsentRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsentRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ConsentRecords
     * const consentRecord = await prisma.consentRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ConsentRecordUpdateManyArgs>(args: SelectSubset<T, ConsentRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ConsentRecords and returns the data updated in the database.
     * @param {ConsentRecordUpdateManyAndReturnArgs} args - Arguments to update many ConsentRecords.
     * @example
     * // Update many ConsentRecords
     * const consentRecord = await prisma.consentRecord.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ConsentRecords and only return the `id`
     * const consentRecordWithIdOnly = await prisma.consentRecord.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ConsentRecordUpdateManyAndReturnArgs>(args: SelectSubset<T, ConsentRecordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ConsentRecord.
     * @param {ConsentRecordUpsertArgs} args - Arguments to update or create a ConsentRecord.
     * @example
     * // Update or create a ConsentRecord
     * const consentRecord = await prisma.consentRecord.upsert({
     *   create: {
     *     // ... data to create a ConsentRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ConsentRecord we want to update
     *   }
     * })
     */
    upsert<T extends ConsentRecordUpsertArgs>(args: SelectSubset<T, ConsentRecordUpsertArgs<ExtArgs>>): Prisma__ConsentRecordClient<$Result.GetResult<Prisma.$ConsentRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ConsentRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordCountArgs} args - Arguments to filter ConsentRecords to count.
     * @example
     * // Count the number of ConsentRecords
     * const count = await prisma.consentRecord.count({
     *   where: {
     *     // ... the filter for the ConsentRecords we want to count
     *   }
     * })
    **/
    count<T extends ConsentRecordCountArgs>(
      args?: Subset<T, ConsentRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsentRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ConsentRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsentRecordAggregateArgs>(args: Subset<T, ConsentRecordAggregateArgs>): Prisma.PrismaPromise<GetConsentRecordAggregateType<T>>

    /**
     * Group by ConsentRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsentRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConsentRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConsentRecordGroupByArgs['orderBy'] }
        : { orderBy?: ConsentRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConsentRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsentRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ConsentRecord model
   */
  readonly fields: ConsentRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ConsentRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ConsentRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends ConsentRecord$userArgs<ExtArgs> = {}>(args?: Subset<T, ConsentRecord$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ConsentRecord model
   */
  interface ConsentRecordFieldRefs {
    readonly id: FieldRef<"ConsentRecord", 'String'>
    readonly userId: FieldRef<"ConsentRecord", 'String'>
    readonly consentType: FieldRef<"ConsentRecord", 'ConsentType'>
    readonly granted: FieldRef<"ConsentRecord", 'Boolean'>
    readonly ipAddress: FieldRef<"ConsentRecord", 'String'>
    readonly userAgent: FieldRef<"ConsentRecord", 'String'>
    readonly consentString: FieldRef<"ConsentRecord", 'String'>
    readonly expiresAt: FieldRef<"ConsentRecord", 'DateTime'>
    readonly withdrawnAt: FieldRef<"ConsentRecord", 'DateTime'>
    readonly createdAt: FieldRef<"ConsentRecord", 'DateTime'>
    readonly updatedAt: FieldRef<"ConsentRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ConsentRecord findUnique
   */
  export type ConsentRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * Filter, which ConsentRecord to fetch.
     */
    where: ConsentRecordWhereUniqueInput
  }

  /**
   * ConsentRecord findUniqueOrThrow
   */
  export type ConsentRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * Filter, which ConsentRecord to fetch.
     */
    where: ConsentRecordWhereUniqueInput
  }

  /**
   * ConsentRecord findFirst
   */
  export type ConsentRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * Filter, which ConsentRecord to fetch.
     */
    where?: ConsentRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentRecords to fetch.
     */
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsentRecords.
     */
    cursor?: ConsentRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsentRecords.
     */
    distinct?: ConsentRecordScalarFieldEnum | ConsentRecordScalarFieldEnum[]
  }

  /**
   * ConsentRecord findFirstOrThrow
   */
  export type ConsentRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * Filter, which ConsentRecord to fetch.
     */
    where?: ConsentRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentRecords to fetch.
     */
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ConsentRecords.
     */
    cursor?: ConsentRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ConsentRecords.
     */
    distinct?: ConsentRecordScalarFieldEnum | ConsentRecordScalarFieldEnum[]
  }

  /**
   * ConsentRecord findMany
   */
  export type ConsentRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * Filter, which ConsentRecords to fetch.
     */
    where?: ConsentRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ConsentRecords to fetch.
     */
    orderBy?: ConsentRecordOrderByWithRelationInput | ConsentRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ConsentRecords.
     */
    cursor?: ConsentRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ConsentRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ConsentRecords.
     */
    skip?: number
    distinct?: ConsentRecordScalarFieldEnum | ConsentRecordScalarFieldEnum[]
  }

  /**
   * ConsentRecord create
   */
  export type ConsentRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a ConsentRecord.
     */
    data: XOR<ConsentRecordCreateInput, ConsentRecordUncheckedCreateInput>
  }

  /**
   * ConsentRecord createMany
   */
  export type ConsentRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ConsentRecords.
     */
    data: ConsentRecordCreateManyInput | ConsentRecordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ConsentRecord createManyAndReturn
   */
  export type ConsentRecordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * The data used to create many ConsentRecords.
     */
    data: ConsentRecordCreateManyInput | ConsentRecordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsentRecord update
   */
  export type ConsentRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a ConsentRecord.
     */
    data: XOR<ConsentRecordUpdateInput, ConsentRecordUncheckedUpdateInput>
    /**
     * Choose, which ConsentRecord to update.
     */
    where: ConsentRecordWhereUniqueInput
  }

  /**
   * ConsentRecord updateMany
   */
  export type ConsentRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ConsentRecords.
     */
    data: XOR<ConsentRecordUpdateManyMutationInput, ConsentRecordUncheckedUpdateManyInput>
    /**
     * Filter which ConsentRecords to update
     */
    where?: ConsentRecordWhereInput
    /**
     * Limit how many ConsentRecords to update.
     */
    limit?: number
  }

  /**
   * ConsentRecord updateManyAndReturn
   */
  export type ConsentRecordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * The data used to update ConsentRecords.
     */
    data: XOR<ConsentRecordUpdateManyMutationInput, ConsentRecordUncheckedUpdateManyInput>
    /**
     * Filter which ConsentRecords to update
     */
    where?: ConsentRecordWhereInput
    /**
     * Limit how many ConsentRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ConsentRecord upsert
   */
  export type ConsentRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the ConsentRecord to update in case it exists.
     */
    where: ConsentRecordWhereUniqueInput
    /**
     * In case the ConsentRecord found by the `where` argument doesn't exist, create a new ConsentRecord with this data.
     */
    create: XOR<ConsentRecordCreateInput, ConsentRecordUncheckedCreateInput>
    /**
     * In case the ConsentRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ConsentRecordUpdateInput, ConsentRecordUncheckedUpdateInput>
  }

  /**
   * ConsentRecord delete
   */
  export type ConsentRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
    /**
     * Filter which ConsentRecord to delete.
     */
    where: ConsentRecordWhereUniqueInput
  }

  /**
   * ConsentRecord deleteMany
   */
  export type ConsentRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ConsentRecords to delete
     */
    where?: ConsentRecordWhereInput
    /**
     * Limit how many ConsentRecords to delete.
     */
    limit?: number
  }

  /**
   * ConsentRecord.user
   */
  export type ConsentRecord$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ConsentRecord without action
   */
  export type ConsentRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ConsentRecord
     */
    select?: ConsentRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ConsentRecord
     */
    omit?: ConsentRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ConsentRecordInclude<ExtArgs> | null
  }


  /**
   * Model DataExportRequest
   */

  export type AggregateDataExportRequest = {
    _count: DataExportRequestCountAggregateOutputType | null
    _min: DataExportRequestMinAggregateOutputType | null
    _max: DataExportRequestMaxAggregateOutputType | null
  }

  export type DataExportRequestMinAggregateOutputType = {
    id: string | null
    userId: string | null
    requestType: $Enums.DataRequestType | null
    status: $Enums.DataRequestStatus | null
    filePath: string | null
    downloadedAt: Date | null
    expiresAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DataExportRequestMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    requestType: $Enums.DataRequestType | null
    status: $Enums.DataRequestStatus | null
    filePath: string | null
    downloadedAt: Date | null
    expiresAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DataExportRequestCountAggregateOutputType = {
    id: number
    userId: number
    requestType: number
    status: number
    requestedData: number
    filePath: number
    downloadedAt: number
    expiresAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DataExportRequestMinAggregateInputType = {
    id?: true
    userId?: true
    requestType?: true
    status?: true
    filePath?: true
    downloadedAt?: true
    expiresAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DataExportRequestMaxAggregateInputType = {
    id?: true
    userId?: true
    requestType?: true
    status?: true
    filePath?: true
    downloadedAt?: true
    expiresAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DataExportRequestCountAggregateInputType = {
    id?: true
    userId?: true
    requestType?: true
    status?: true
    requestedData?: true
    filePath?: true
    downloadedAt?: true
    expiresAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DataExportRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataExportRequest to aggregate.
     */
    where?: DataExportRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataExportRequests to fetch.
     */
    orderBy?: DataExportRequestOrderByWithRelationInput | DataExportRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DataExportRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataExportRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataExportRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DataExportRequests
    **/
    _count?: true | DataExportRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DataExportRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DataExportRequestMaxAggregateInputType
  }

  export type GetDataExportRequestAggregateType<T extends DataExportRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateDataExportRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDataExportRequest[P]>
      : GetScalarType<T[P], AggregateDataExportRequest[P]>
  }




  export type DataExportRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataExportRequestWhereInput
    orderBy?: DataExportRequestOrderByWithAggregationInput | DataExportRequestOrderByWithAggregationInput[]
    by: DataExportRequestScalarFieldEnum[] | DataExportRequestScalarFieldEnum
    having?: DataExportRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DataExportRequestCountAggregateInputType | true
    _min?: DataExportRequestMinAggregateInputType
    _max?: DataExportRequestMaxAggregateInputType
  }

  export type DataExportRequestGroupByOutputType = {
    id: string
    userId: string
    requestType: $Enums.DataRequestType
    status: $Enums.DataRequestStatus
    requestedData: string[]
    filePath: string | null
    downloadedAt: Date | null
    expiresAt: Date
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: DataExportRequestCountAggregateOutputType | null
    _min: DataExportRequestMinAggregateOutputType | null
    _max: DataExportRequestMaxAggregateOutputType | null
  }

  type GetDataExportRequestGroupByPayload<T extends DataExportRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DataExportRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DataExportRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DataExportRequestGroupByOutputType[P]>
            : GetScalarType<T[P], DataExportRequestGroupByOutputType[P]>
        }
      >
    >


  export type DataExportRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    requestType?: boolean
    status?: boolean
    requestedData?: boolean
    filePath?: boolean
    downloadedAt?: boolean
    expiresAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataExportRequest"]>

  export type DataExportRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    requestType?: boolean
    status?: boolean
    requestedData?: boolean
    filePath?: boolean
    downloadedAt?: boolean
    expiresAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataExportRequest"]>

  export type DataExportRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    requestType?: boolean
    status?: boolean
    requestedData?: boolean
    filePath?: boolean
    downloadedAt?: boolean
    expiresAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["dataExportRequest"]>

  export type DataExportRequestSelectScalar = {
    id?: boolean
    userId?: boolean
    requestType?: boolean
    status?: boolean
    requestedData?: boolean
    filePath?: boolean
    downloadedAt?: boolean
    expiresAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DataExportRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "requestType" | "status" | "requestedData" | "filePath" | "downloadedAt" | "expiresAt" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["dataExportRequest"]>
  export type DataExportRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DataExportRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DataExportRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DataExportRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DataExportRequest"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      requestType: $Enums.DataRequestType
      status: $Enums.DataRequestStatus
      requestedData: string[]
      filePath: string | null
      downloadedAt: Date | null
      expiresAt: Date
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dataExportRequest"]>
    composites: {}
  }

  type DataExportRequestGetPayload<S extends boolean | null | undefined | DataExportRequestDefaultArgs> = $Result.GetResult<Prisma.$DataExportRequestPayload, S>

  type DataExportRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DataExportRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DataExportRequestCountAggregateInputType | true
    }

  export interface DataExportRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DataExportRequest'], meta: { name: 'DataExportRequest' } }
    /**
     * Find zero or one DataExportRequest that matches the filter.
     * @param {DataExportRequestFindUniqueArgs} args - Arguments to find a DataExportRequest
     * @example
     * // Get one DataExportRequest
     * const dataExportRequest = await prisma.dataExportRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DataExportRequestFindUniqueArgs>(args: SelectSubset<T, DataExportRequestFindUniqueArgs<ExtArgs>>): Prisma__DataExportRequestClient<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DataExportRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DataExportRequestFindUniqueOrThrowArgs} args - Arguments to find a DataExportRequest
     * @example
     * // Get one DataExportRequest
     * const dataExportRequest = await prisma.dataExportRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DataExportRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, DataExportRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DataExportRequestClient<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DataExportRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataExportRequestFindFirstArgs} args - Arguments to find a DataExportRequest
     * @example
     * // Get one DataExportRequest
     * const dataExportRequest = await prisma.dataExportRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DataExportRequestFindFirstArgs>(args?: SelectSubset<T, DataExportRequestFindFirstArgs<ExtArgs>>): Prisma__DataExportRequestClient<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DataExportRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataExportRequestFindFirstOrThrowArgs} args - Arguments to find a DataExportRequest
     * @example
     * // Get one DataExportRequest
     * const dataExportRequest = await prisma.dataExportRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DataExportRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, DataExportRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__DataExportRequestClient<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DataExportRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataExportRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DataExportRequests
     * const dataExportRequests = await prisma.dataExportRequest.findMany()
     * 
     * // Get first 10 DataExportRequests
     * const dataExportRequests = await prisma.dataExportRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dataExportRequestWithIdOnly = await prisma.dataExportRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DataExportRequestFindManyArgs>(args?: SelectSubset<T, DataExportRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DataExportRequest.
     * @param {DataExportRequestCreateArgs} args - Arguments to create a DataExportRequest.
     * @example
     * // Create one DataExportRequest
     * const DataExportRequest = await prisma.dataExportRequest.create({
     *   data: {
     *     // ... data to create a DataExportRequest
     *   }
     * })
     * 
     */
    create<T extends DataExportRequestCreateArgs>(args: SelectSubset<T, DataExportRequestCreateArgs<ExtArgs>>): Prisma__DataExportRequestClient<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DataExportRequests.
     * @param {DataExportRequestCreateManyArgs} args - Arguments to create many DataExportRequests.
     * @example
     * // Create many DataExportRequests
     * const dataExportRequest = await prisma.dataExportRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DataExportRequestCreateManyArgs>(args?: SelectSubset<T, DataExportRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DataExportRequests and returns the data saved in the database.
     * @param {DataExportRequestCreateManyAndReturnArgs} args - Arguments to create many DataExportRequests.
     * @example
     * // Create many DataExportRequests
     * const dataExportRequest = await prisma.dataExportRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DataExportRequests and only return the `id`
     * const dataExportRequestWithIdOnly = await prisma.dataExportRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DataExportRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, DataExportRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DataExportRequest.
     * @param {DataExportRequestDeleteArgs} args - Arguments to delete one DataExportRequest.
     * @example
     * // Delete one DataExportRequest
     * const DataExportRequest = await prisma.dataExportRequest.delete({
     *   where: {
     *     // ... filter to delete one DataExportRequest
     *   }
     * })
     * 
     */
    delete<T extends DataExportRequestDeleteArgs>(args: SelectSubset<T, DataExportRequestDeleteArgs<ExtArgs>>): Prisma__DataExportRequestClient<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DataExportRequest.
     * @param {DataExportRequestUpdateArgs} args - Arguments to update one DataExportRequest.
     * @example
     * // Update one DataExportRequest
     * const dataExportRequest = await prisma.dataExportRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DataExportRequestUpdateArgs>(args: SelectSubset<T, DataExportRequestUpdateArgs<ExtArgs>>): Prisma__DataExportRequestClient<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DataExportRequests.
     * @param {DataExportRequestDeleteManyArgs} args - Arguments to filter DataExportRequests to delete.
     * @example
     * // Delete a few DataExportRequests
     * const { count } = await prisma.dataExportRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DataExportRequestDeleteManyArgs>(args?: SelectSubset<T, DataExportRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataExportRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataExportRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DataExportRequests
     * const dataExportRequest = await prisma.dataExportRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DataExportRequestUpdateManyArgs>(args: SelectSubset<T, DataExportRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataExportRequests and returns the data updated in the database.
     * @param {DataExportRequestUpdateManyAndReturnArgs} args - Arguments to update many DataExportRequests.
     * @example
     * // Update many DataExportRequests
     * const dataExportRequest = await prisma.dataExportRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DataExportRequests and only return the `id`
     * const dataExportRequestWithIdOnly = await prisma.dataExportRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DataExportRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, DataExportRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DataExportRequest.
     * @param {DataExportRequestUpsertArgs} args - Arguments to update or create a DataExportRequest.
     * @example
     * // Update or create a DataExportRequest
     * const dataExportRequest = await prisma.dataExportRequest.upsert({
     *   create: {
     *     // ... data to create a DataExportRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DataExportRequest we want to update
     *   }
     * })
     */
    upsert<T extends DataExportRequestUpsertArgs>(args: SelectSubset<T, DataExportRequestUpsertArgs<ExtArgs>>): Prisma__DataExportRequestClient<$Result.GetResult<Prisma.$DataExportRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DataExportRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataExportRequestCountArgs} args - Arguments to filter DataExportRequests to count.
     * @example
     * // Count the number of DataExportRequests
     * const count = await prisma.dataExportRequest.count({
     *   where: {
     *     // ... the filter for the DataExportRequests we want to count
     *   }
     * })
    **/
    count<T extends DataExportRequestCountArgs>(
      args?: Subset<T, DataExportRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DataExportRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DataExportRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataExportRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DataExportRequestAggregateArgs>(args: Subset<T, DataExportRequestAggregateArgs>): Prisma.PrismaPromise<GetDataExportRequestAggregateType<T>>

    /**
     * Group by DataExportRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataExportRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DataExportRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DataExportRequestGroupByArgs['orderBy'] }
        : { orderBy?: DataExportRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DataExportRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDataExportRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DataExportRequest model
   */
  readonly fields: DataExportRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DataExportRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DataExportRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DataExportRequest model
   */
  interface DataExportRequestFieldRefs {
    readonly id: FieldRef<"DataExportRequest", 'String'>
    readonly userId: FieldRef<"DataExportRequest", 'String'>
    readonly requestType: FieldRef<"DataExportRequest", 'DataRequestType'>
    readonly status: FieldRef<"DataExportRequest", 'DataRequestStatus'>
    readonly requestedData: FieldRef<"DataExportRequest", 'String[]'>
    readonly filePath: FieldRef<"DataExportRequest", 'String'>
    readonly downloadedAt: FieldRef<"DataExportRequest", 'DateTime'>
    readonly expiresAt: FieldRef<"DataExportRequest", 'DateTime'>
    readonly notes: FieldRef<"DataExportRequest", 'String'>
    readonly createdAt: FieldRef<"DataExportRequest", 'DateTime'>
    readonly updatedAt: FieldRef<"DataExportRequest", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DataExportRequest findUnique
   */
  export type DataExportRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataExportRequest to fetch.
     */
    where: DataExportRequestWhereUniqueInput
  }

  /**
   * DataExportRequest findUniqueOrThrow
   */
  export type DataExportRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataExportRequest to fetch.
     */
    where: DataExportRequestWhereUniqueInput
  }

  /**
   * DataExportRequest findFirst
   */
  export type DataExportRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataExportRequest to fetch.
     */
    where?: DataExportRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataExportRequests to fetch.
     */
    orderBy?: DataExportRequestOrderByWithRelationInput | DataExportRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataExportRequests.
     */
    cursor?: DataExportRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataExportRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataExportRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataExportRequests.
     */
    distinct?: DataExportRequestScalarFieldEnum | DataExportRequestScalarFieldEnum[]
  }

  /**
   * DataExportRequest findFirstOrThrow
   */
  export type DataExportRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataExportRequest to fetch.
     */
    where?: DataExportRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataExportRequests to fetch.
     */
    orderBy?: DataExportRequestOrderByWithRelationInput | DataExportRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataExportRequests.
     */
    cursor?: DataExportRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataExportRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataExportRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataExportRequests.
     */
    distinct?: DataExportRequestScalarFieldEnum | DataExportRequestScalarFieldEnum[]
  }

  /**
   * DataExportRequest findMany
   */
  export type DataExportRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * Filter, which DataExportRequests to fetch.
     */
    where?: DataExportRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataExportRequests to fetch.
     */
    orderBy?: DataExportRequestOrderByWithRelationInput | DataExportRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DataExportRequests.
     */
    cursor?: DataExportRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataExportRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataExportRequests.
     */
    skip?: number
    distinct?: DataExportRequestScalarFieldEnum | DataExportRequestScalarFieldEnum[]
  }

  /**
   * DataExportRequest create
   */
  export type DataExportRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a DataExportRequest.
     */
    data: XOR<DataExportRequestCreateInput, DataExportRequestUncheckedCreateInput>
  }

  /**
   * DataExportRequest createMany
   */
  export type DataExportRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DataExportRequests.
     */
    data: DataExportRequestCreateManyInput | DataExportRequestCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DataExportRequest createManyAndReturn
   */
  export type DataExportRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * The data used to create many DataExportRequests.
     */
    data: DataExportRequestCreateManyInput | DataExportRequestCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DataExportRequest update
   */
  export type DataExportRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a DataExportRequest.
     */
    data: XOR<DataExportRequestUpdateInput, DataExportRequestUncheckedUpdateInput>
    /**
     * Choose, which DataExportRequest to update.
     */
    where: DataExportRequestWhereUniqueInput
  }

  /**
   * DataExportRequest updateMany
   */
  export type DataExportRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DataExportRequests.
     */
    data: XOR<DataExportRequestUpdateManyMutationInput, DataExportRequestUncheckedUpdateManyInput>
    /**
     * Filter which DataExportRequests to update
     */
    where?: DataExportRequestWhereInput
    /**
     * Limit how many DataExportRequests to update.
     */
    limit?: number
  }

  /**
   * DataExportRequest updateManyAndReturn
   */
  export type DataExportRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * The data used to update DataExportRequests.
     */
    data: XOR<DataExportRequestUpdateManyMutationInput, DataExportRequestUncheckedUpdateManyInput>
    /**
     * Filter which DataExportRequests to update
     */
    where?: DataExportRequestWhereInput
    /**
     * Limit how many DataExportRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DataExportRequest upsert
   */
  export type DataExportRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the DataExportRequest to update in case it exists.
     */
    where: DataExportRequestWhereUniqueInput
    /**
     * In case the DataExportRequest found by the `where` argument doesn't exist, create a new DataExportRequest with this data.
     */
    create: XOR<DataExportRequestCreateInput, DataExportRequestUncheckedCreateInput>
    /**
     * In case the DataExportRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DataExportRequestUpdateInput, DataExportRequestUncheckedUpdateInput>
  }

  /**
   * DataExportRequest delete
   */
  export type DataExportRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
    /**
     * Filter which DataExportRequest to delete.
     */
    where: DataExportRequestWhereUniqueInput
  }

  /**
   * DataExportRequest deleteMany
   */
  export type DataExportRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataExportRequests to delete
     */
    where?: DataExportRequestWhereInput
    /**
     * Limit how many DataExportRequests to delete.
     */
    limit?: number
  }

  /**
   * DataExportRequest without action
   */
  export type DataExportRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataExportRequest
     */
    select?: DataExportRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataExportRequest
     */
    omit?: DataExportRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DataExportRequestInclude<ExtArgs> | null
  }


  /**
   * Model GDPRAuditLog
   */

  export type AggregateGDPRAuditLog = {
    _count: GDPRAuditLogCountAggregateOutputType | null
    _min: GDPRAuditLogMinAggregateOutputType | null
    _max: GDPRAuditLogMaxAggregateOutputType | null
  }

  export type GDPRAuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: $Enums.GDPRAction | null
    dataType: string | null
    recordId: string | null
    legalBasis: string | null
    purpose: string | null
    ipAddress: string | null
    userAgent: string | null
    consentId: string | null
    automated: boolean | null
    createdAt: Date | null
  }

  export type GDPRAuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: $Enums.GDPRAction | null
    dataType: string | null
    recordId: string | null
    legalBasis: string | null
    purpose: string | null
    ipAddress: string | null
    userAgent: string | null
    consentId: string | null
    automated: boolean | null
    createdAt: Date | null
  }

  export type GDPRAuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    dataType: number
    recordId: number
    legalBasis: number
    purpose: number
    ipAddress: number
    userAgent: number
    consentId: number
    automated: number
    createdAt: number
    _all: number
  }


  export type GDPRAuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    dataType?: true
    recordId?: true
    legalBasis?: true
    purpose?: true
    ipAddress?: true
    userAgent?: true
    consentId?: true
    automated?: true
    createdAt?: true
  }

  export type GDPRAuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    dataType?: true
    recordId?: true
    legalBasis?: true
    purpose?: true
    ipAddress?: true
    userAgent?: true
    consentId?: true
    automated?: true
    createdAt?: true
  }

  export type GDPRAuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    dataType?: true
    recordId?: true
    legalBasis?: true
    purpose?: true
    ipAddress?: true
    userAgent?: true
    consentId?: true
    automated?: true
    createdAt?: true
    _all?: true
  }

  export type GDPRAuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GDPRAuditLog to aggregate.
     */
    where?: GDPRAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GDPRAuditLogs to fetch.
     */
    orderBy?: GDPRAuditLogOrderByWithRelationInput | GDPRAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GDPRAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GDPRAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GDPRAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GDPRAuditLogs
    **/
    _count?: true | GDPRAuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GDPRAuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GDPRAuditLogMaxAggregateInputType
  }

  export type GetGDPRAuditLogAggregateType<T extends GDPRAuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateGDPRAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGDPRAuditLog[P]>
      : GetScalarType<T[P], AggregateGDPRAuditLog[P]>
  }




  export type GDPRAuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GDPRAuditLogWhereInput
    orderBy?: GDPRAuditLogOrderByWithAggregationInput | GDPRAuditLogOrderByWithAggregationInput[]
    by: GDPRAuditLogScalarFieldEnum[] | GDPRAuditLogScalarFieldEnum
    having?: GDPRAuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GDPRAuditLogCountAggregateInputType | true
    _min?: GDPRAuditLogMinAggregateInputType
    _max?: GDPRAuditLogMaxAggregateInputType
  }

  export type GDPRAuditLogGroupByOutputType = {
    id: string
    userId: string | null
    action: $Enums.GDPRAction
    dataType: string
    recordId: string | null
    legalBasis: string | null
    purpose: string
    ipAddress: string | null
    userAgent: string | null
    consentId: string | null
    automated: boolean
    createdAt: Date
    _count: GDPRAuditLogCountAggregateOutputType | null
    _min: GDPRAuditLogMinAggregateOutputType | null
    _max: GDPRAuditLogMaxAggregateOutputType | null
  }

  type GetGDPRAuditLogGroupByPayload<T extends GDPRAuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GDPRAuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GDPRAuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GDPRAuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], GDPRAuditLogGroupByOutputType[P]>
        }
      >
    >


  export type GDPRAuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    dataType?: boolean
    recordId?: boolean
    legalBasis?: boolean
    purpose?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    consentId?: boolean
    automated?: boolean
    createdAt?: boolean
    user?: boolean | GDPRAuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["gDPRAuditLog"]>

  export type GDPRAuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    dataType?: boolean
    recordId?: boolean
    legalBasis?: boolean
    purpose?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    consentId?: boolean
    automated?: boolean
    createdAt?: boolean
    user?: boolean | GDPRAuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["gDPRAuditLog"]>

  export type GDPRAuditLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    dataType?: boolean
    recordId?: boolean
    legalBasis?: boolean
    purpose?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    consentId?: boolean
    automated?: boolean
    createdAt?: boolean
    user?: boolean | GDPRAuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["gDPRAuditLog"]>

  export type GDPRAuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    dataType?: boolean
    recordId?: boolean
    legalBasis?: boolean
    purpose?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    consentId?: boolean
    automated?: boolean
    createdAt?: boolean
  }

  export type GDPRAuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "dataType" | "recordId" | "legalBasis" | "purpose" | "ipAddress" | "userAgent" | "consentId" | "automated" | "createdAt", ExtArgs["result"]["gDPRAuditLog"]>
  export type GDPRAuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | GDPRAuditLog$userArgs<ExtArgs>
  }
  export type GDPRAuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | GDPRAuditLog$userArgs<ExtArgs>
  }
  export type GDPRAuditLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | GDPRAuditLog$userArgs<ExtArgs>
  }

  export type $GDPRAuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GDPRAuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      action: $Enums.GDPRAction
      dataType: string
      recordId: string | null
      legalBasis: string | null
      purpose: string
      ipAddress: string | null
      userAgent: string | null
      consentId: string | null
      automated: boolean
      createdAt: Date
    }, ExtArgs["result"]["gDPRAuditLog"]>
    composites: {}
  }

  type GDPRAuditLogGetPayload<S extends boolean | null | undefined | GDPRAuditLogDefaultArgs> = $Result.GetResult<Prisma.$GDPRAuditLogPayload, S>

  type GDPRAuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GDPRAuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GDPRAuditLogCountAggregateInputType | true
    }

  export interface GDPRAuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GDPRAuditLog'], meta: { name: 'GDPRAuditLog' } }
    /**
     * Find zero or one GDPRAuditLog that matches the filter.
     * @param {GDPRAuditLogFindUniqueArgs} args - Arguments to find a GDPRAuditLog
     * @example
     * // Get one GDPRAuditLog
     * const gDPRAuditLog = await prisma.gDPRAuditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GDPRAuditLogFindUniqueArgs>(args: SelectSubset<T, GDPRAuditLogFindUniqueArgs<ExtArgs>>): Prisma__GDPRAuditLogClient<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GDPRAuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GDPRAuditLogFindUniqueOrThrowArgs} args - Arguments to find a GDPRAuditLog
     * @example
     * // Get one GDPRAuditLog
     * const gDPRAuditLog = await prisma.gDPRAuditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GDPRAuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, GDPRAuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GDPRAuditLogClient<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GDPRAuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GDPRAuditLogFindFirstArgs} args - Arguments to find a GDPRAuditLog
     * @example
     * // Get one GDPRAuditLog
     * const gDPRAuditLog = await prisma.gDPRAuditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GDPRAuditLogFindFirstArgs>(args?: SelectSubset<T, GDPRAuditLogFindFirstArgs<ExtArgs>>): Prisma__GDPRAuditLogClient<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GDPRAuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GDPRAuditLogFindFirstOrThrowArgs} args - Arguments to find a GDPRAuditLog
     * @example
     * // Get one GDPRAuditLog
     * const gDPRAuditLog = await prisma.gDPRAuditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GDPRAuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, GDPRAuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__GDPRAuditLogClient<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GDPRAuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GDPRAuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GDPRAuditLogs
     * const gDPRAuditLogs = await prisma.gDPRAuditLog.findMany()
     * 
     * // Get first 10 GDPRAuditLogs
     * const gDPRAuditLogs = await prisma.gDPRAuditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gDPRAuditLogWithIdOnly = await prisma.gDPRAuditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GDPRAuditLogFindManyArgs>(args?: SelectSubset<T, GDPRAuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GDPRAuditLog.
     * @param {GDPRAuditLogCreateArgs} args - Arguments to create a GDPRAuditLog.
     * @example
     * // Create one GDPRAuditLog
     * const GDPRAuditLog = await prisma.gDPRAuditLog.create({
     *   data: {
     *     // ... data to create a GDPRAuditLog
     *   }
     * })
     * 
     */
    create<T extends GDPRAuditLogCreateArgs>(args: SelectSubset<T, GDPRAuditLogCreateArgs<ExtArgs>>): Prisma__GDPRAuditLogClient<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GDPRAuditLogs.
     * @param {GDPRAuditLogCreateManyArgs} args - Arguments to create many GDPRAuditLogs.
     * @example
     * // Create many GDPRAuditLogs
     * const gDPRAuditLog = await prisma.gDPRAuditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GDPRAuditLogCreateManyArgs>(args?: SelectSubset<T, GDPRAuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many GDPRAuditLogs and returns the data saved in the database.
     * @param {GDPRAuditLogCreateManyAndReturnArgs} args - Arguments to create many GDPRAuditLogs.
     * @example
     * // Create many GDPRAuditLogs
     * const gDPRAuditLog = await prisma.gDPRAuditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many GDPRAuditLogs and only return the `id`
     * const gDPRAuditLogWithIdOnly = await prisma.gDPRAuditLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GDPRAuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, GDPRAuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a GDPRAuditLog.
     * @param {GDPRAuditLogDeleteArgs} args - Arguments to delete one GDPRAuditLog.
     * @example
     * // Delete one GDPRAuditLog
     * const GDPRAuditLog = await prisma.gDPRAuditLog.delete({
     *   where: {
     *     // ... filter to delete one GDPRAuditLog
     *   }
     * })
     * 
     */
    delete<T extends GDPRAuditLogDeleteArgs>(args: SelectSubset<T, GDPRAuditLogDeleteArgs<ExtArgs>>): Prisma__GDPRAuditLogClient<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GDPRAuditLog.
     * @param {GDPRAuditLogUpdateArgs} args - Arguments to update one GDPRAuditLog.
     * @example
     * // Update one GDPRAuditLog
     * const gDPRAuditLog = await prisma.gDPRAuditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GDPRAuditLogUpdateArgs>(args: SelectSubset<T, GDPRAuditLogUpdateArgs<ExtArgs>>): Prisma__GDPRAuditLogClient<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GDPRAuditLogs.
     * @param {GDPRAuditLogDeleteManyArgs} args - Arguments to filter GDPRAuditLogs to delete.
     * @example
     * // Delete a few GDPRAuditLogs
     * const { count } = await prisma.gDPRAuditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GDPRAuditLogDeleteManyArgs>(args?: SelectSubset<T, GDPRAuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GDPRAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GDPRAuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GDPRAuditLogs
     * const gDPRAuditLog = await prisma.gDPRAuditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GDPRAuditLogUpdateManyArgs>(args: SelectSubset<T, GDPRAuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GDPRAuditLogs and returns the data updated in the database.
     * @param {GDPRAuditLogUpdateManyAndReturnArgs} args - Arguments to update many GDPRAuditLogs.
     * @example
     * // Update many GDPRAuditLogs
     * const gDPRAuditLog = await prisma.gDPRAuditLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more GDPRAuditLogs and only return the `id`
     * const gDPRAuditLogWithIdOnly = await prisma.gDPRAuditLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GDPRAuditLogUpdateManyAndReturnArgs>(args: SelectSubset<T, GDPRAuditLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one GDPRAuditLog.
     * @param {GDPRAuditLogUpsertArgs} args - Arguments to update or create a GDPRAuditLog.
     * @example
     * // Update or create a GDPRAuditLog
     * const gDPRAuditLog = await prisma.gDPRAuditLog.upsert({
     *   create: {
     *     // ... data to create a GDPRAuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GDPRAuditLog we want to update
     *   }
     * })
     */
    upsert<T extends GDPRAuditLogUpsertArgs>(args: SelectSubset<T, GDPRAuditLogUpsertArgs<ExtArgs>>): Prisma__GDPRAuditLogClient<$Result.GetResult<Prisma.$GDPRAuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GDPRAuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GDPRAuditLogCountArgs} args - Arguments to filter GDPRAuditLogs to count.
     * @example
     * // Count the number of GDPRAuditLogs
     * const count = await prisma.gDPRAuditLog.count({
     *   where: {
     *     // ... the filter for the GDPRAuditLogs we want to count
     *   }
     * })
    **/
    count<T extends GDPRAuditLogCountArgs>(
      args?: Subset<T, GDPRAuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GDPRAuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GDPRAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GDPRAuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GDPRAuditLogAggregateArgs>(args: Subset<T, GDPRAuditLogAggregateArgs>): Prisma.PrismaPromise<GetGDPRAuditLogAggregateType<T>>

    /**
     * Group by GDPRAuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GDPRAuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GDPRAuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GDPRAuditLogGroupByArgs['orderBy'] }
        : { orderBy?: GDPRAuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GDPRAuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGDPRAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GDPRAuditLog model
   */
  readonly fields: GDPRAuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GDPRAuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GDPRAuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends GDPRAuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, GDPRAuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GDPRAuditLog model
   */
  interface GDPRAuditLogFieldRefs {
    readonly id: FieldRef<"GDPRAuditLog", 'String'>
    readonly userId: FieldRef<"GDPRAuditLog", 'String'>
    readonly action: FieldRef<"GDPRAuditLog", 'GDPRAction'>
    readonly dataType: FieldRef<"GDPRAuditLog", 'String'>
    readonly recordId: FieldRef<"GDPRAuditLog", 'String'>
    readonly legalBasis: FieldRef<"GDPRAuditLog", 'String'>
    readonly purpose: FieldRef<"GDPRAuditLog", 'String'>
    readonly ipAddress: FieldRef<"GDPRAuditLog", 'String'>
    readonly userAgent: FieldRef<"GDPRAuditLog", 'String'>
    readonly consentId: FieldRef<"GDPRAuditLog", 'String'>
    readonly automated: FieldRef<"GDPRAuditLog", 'Boolean'>
    readonly createdAt: FieldRef<"GDPRAuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GDPRAuditLog findUnique
   */
  export type GDPRAuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which GDPRAuditLog to fetch.
     */
    where: GDPRAuditLogWhereUniqueInput
  }

  /**
   * GDPRAuditLog findUniqueOrThrow
   */
  export type GDPRAuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which GDPRAuditLog to fetch.
     */
    where: GDPRAuditLogWhereUniqueInput
  }

  /**
   * GDPRAuditLog findFirst
   */
  export type GDPRAuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which GDPRAuditLog to fetch.
     */
    where?: GDPRAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GDPRAuditLogs to fetch.
     */
    orderBy?: GDPRAuditLogOrderByWithRelationInput | GDPRAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GDPRAuditLogs.
     */
    cursor?: GDPRAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GDPRAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GDPRAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GDPRAuditLogs.
     */
    distinct?: GDPRAuditLogScalarFieldEnum | GDPRAuditLogScalarFieldEnum[]
  }

  /**
   * GDPRAuditLog findFirstOrThrow
   */
  export type GDPRAuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which GDPRAuditLog to fetch.
     */
    where?: GDPRAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GDPRAuditLogs to fetch.
     */
    orderBy?: GDPRAuditLogOrderByWithRelationInput | GDPRAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GDPRAuditLogs.
     */
    cursor?: GDPRAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GDPRAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GDPRAuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GDPRAuditLogs.
     */
    distinct?: GDPRAuditLogScalarFieldEnum | GDPRAuditLogScalarFieldEnum[]
  }

  /**
   * GDPRAuditLog findMany
   */
  export type GDPRAuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * Filter, which GDPRAuditLogs to fetch.
     */
    where?: GDPRAuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GDPRAuditLogs to fetch.
     */
    orderBy?: GDPRAuditLogOrderByWithRelationInput | GDPRAuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GDPRAuditLogs.
     */
    cursor?: GDPRAuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GDPRAuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GDPRAuditLogs.
     */
    skip?: number
    distinct?: GDPRAuditLogScalarFieldEnum | GDPRAuditLogScalarFieldEnum[]
  }

  /**
   * GDPRAuditLog create
   */
  export type GDPRAuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a GDPRAuditLog.
     */
    data: XOR<GDPRAuditLogCreateInput, GDPRAuditLogUncheckedCreateInput>
  }

  /**
   * GDPRAuditLog createMany
   */
  export type GDPRAuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GDPRAuditLogs.
     */
    data: GDPRAuditLogCreateManyInput | GDPRAuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GDPRAuditLog createManyAndReturn
   */
  export type GDPRAuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * The data used to create many GDPRAuditLogs.
     */
    data: GDPRAuditLogCreateManyInput | GDPRAuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * GDPRAuditLog update
   */
  export type GDPRAuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a GDPRAuditLog.
     */
    data: XOR<GDPRAuditLogUpdateInput, GDPRAuditLogUncheckedUpdateInput>
    /**
     * Choose, which GDPRAuditLog to update.
     */
    where: GDPRAuditLogWhereUniqueInput
  }

  /**
   * GDPRAuditLog updateMany
   */
  export type GDPRAuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GDPRAuditLogs.
     */
    data: XOR<GDPRAuditLogUpdateManyMutationInput, GDPRAuditLogUncheckedUpdateManyInput>
    /**
     * Filter which GDPRAuditLogs to update
     */
    where?: GDPRAuditLogWhereInput
    /**
     * Limit how many GDPRAuditLogs to update.
     */
    limit?: number
  }

  /**
   * GDPRAuditLog updateManyAndReturn
   */
  export type GDPRAuditLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * The data used to update GDPRAuditLogs.
     */
    data: XOR<GDPRAuditLogUpdateManyMutationInput, GDPRAuditLogUncheckedUpdateManyInput>
    /**
     * Filter which GDPRAuditLogs to update
     */
    where?: GDPRAuditLogWhereInput
    /**
     * Limit how many GDPRAuditLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * GDPRAuditLog upsert
   */
  export type GDPRAuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the GDPRAuditLog to update in case it exists.
     */
    where: GDPRAuditLogWhereUniqueInput
    /**
     * In case the GDPRAuditLog found by the `where` argument doesn't exist, create a new GDPRAuditLog with this data.
     */
    create: XOR<GDPRAuditLogCreateInput, GDPRAuditLogUncheckedCreateInput>
    /**
     * In case the GDPRAuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GDPRAuditLogUpdateInput, GDPRAuditLogUncheckedUpdateInput>
  }

  /**
   * GDPRAuditLog delete
   */
  export type GDPRAuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
    /**
     * Filter which GDPRAuditLog to delete.
     */
    where: GDPRAuditLogWhereUniqueInput
  }

  /**
   * GDPRAuditLog deleteMany
   */
  export type GDPRAuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GDPRAuditLogs to delete
     */
    where?: GDPRAuditLogWhereInput
    /**
     * Limit how many GDPRAuditLogs to delete.
     */
    limit?: number
  }

  /**
   * GDPRAuditLog.user
   */
  export type GDPRAuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * GDPRAuditLog without action
   */
  export type GDPRAuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GDPRAuditLog
     */
    select?: GDPRAuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GDPRAuditLog
     */
    omit?: GDPRAuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GDPRAuditLogInclude<ExtArgs> | null
  }


  /**
   * Model DataRetentionPolicy
   */

  export type AggregateDataRetentionPolicy = {
    _count: DataRetentionPolicyCountAggregateOutputType | null
    _avg: DataRetentionPolicyAvgAggregateOutputType | null
    _sum: DataRetentionPolicySumAggregateOutputType | null
    _min: DataRetentionPolicyMinAggregateOutputType | null
    _max: DataRetentionPolicyMaxAggregateOutputType | null
  }

  export type DataRetentionPolicyAvgAggregateOutputType = {
    retentionPeriod: number | null
  }

  export type DataRetentionPolicySumAggregateOutputType = {
    retentionPeriod: number | null
  }

  export type DataRetentionPolicyMinAggregateOutputType = {
    id: string | null
    dataType: string | null
    retentionPeriod: number | null
    description: string | null
    legalBasis: string | null
    autoDelete: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DataRetentionPolicyMaxAggregateOutputType = {
    id: string | null
    dataType: string | null
    retentionPeriod: number | null
    description: string | null
    legalBasis: string | null
    autoDelete: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DataRetentionPolicyCountAggregateOutputType = {
    id: number
    dataType: number
    retentionPeriod: number
    description: number
    legalBasis: number
    autoDelete: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DataRetentionPolicyAvgAggregateInputType = {
    retentionPeriod?: true
  }

  export type DataRetentionPolicySumAggregateInputType = {
    retentionPeriod?: true
  }

  export type DataRetentionPolicyMinAggregateInputType = {
    id?: true
    dataType?: true
    retentionPeriod?: true
    description?: true
    legalBasis?: true
    autoDelete?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DataRetentionPolicyMaxAggregateInputType = {
    id?: true
    dataType?: true
    retentionPeriod?: true
    description?: true
    legalBasis?: true
    autoDelete?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DataRetentionPolicyCountAggregateInputType = {
    id?: true
    dataType?: true
    retentionPeriod?: true
    description?: true
    legalBasis?: true
    autoDelete?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DataRetentionPolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataRetentionPolicy to aggregate.
     */
    where?: DataRetentionPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRetentionPolicies to fetch.
     */
    orderBy?: DataRetentionPolicyOrderByWithRelationInput | DataRetentionPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DataRetentionPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRetentionPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRetentionPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DataRetentionPolicies
    **/
    _count?: true | DataRetentionPolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DataRetentionPolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DataRetentionPolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DataRetentionPolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DataRetentionPolicyMaxAggregateInputType
  }

  export type GetDataRetentionPolicyAggregateType<T extends DataRetentionPolicyAggregateArgs> = {
        [P in keyof T & keyof AggregateDataRetentionPolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDataRetentionPolicy[P]>
      : GetScalarType<T[P], AggregateDataRetentionPolicy[P]>
  }




  export type DataRetentionPolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DataRetentionPolicyWhereInput
    orderBy?: DataRetentionPolicyOrderByWithAggregationInput | DataRetentionPolicyOrderByWithAggregationInput[]
    by: DataRetentionPolicyScalarFieldEnum[] | DataRetentionPolicyScalarFieldEnum
    having?: DataRetentionPolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DataRetentionPolicyCountAggregateInputType | true
    _avg?: DataRetentionPolicyAvgAggregateInputType
    _sum?: DataRetentionPolicySumAggregateInputType
    _min?: DataRetentionPolicyMinAggregateInputType
    _max?: DataRetentionPolicyMaxAggregateInputType
  }

  export type DataRetentionPolicyGroupByOutputType = {
    id: string
    dataType: string
    retentionPeriod: number
    description: string | null
    legalBasis: string
    autoDelete: boolean
    createdAt: Date
    updatedAt: Date
    _count: DataRetentionPolicyCountAggregateOutputType | null
    _avg: DataRetentionPolicyAvgAggregateOutputType | null
    _sum: DataRetentionPolicySumAggregateOutputType | null
    _min: DataRetentionPolicyMinAggregateOutputType | null
    _max: DataRetentionPolicyMaxAggregateOutputType | null
  }

  type GetDataRetentionPolicyGroupByPayload<T extends DataRetentionPolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DataRetentionPolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DataRetentionPolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DataRetentionPolicyGroupByOutputType[P]>
            : GetScalarType<T[P], DataRetentionPolicyGroupByOutputType[P]>
        }
      >
    >


  export type DataRetentionPolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataType?: boolean
    retentionPeriod?: boolean
    description?: boolean
    legalBasis?: boolean
    autoDelete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dataRetentionPolicy"]>

  export type DataRetentionPolicySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataType?: boolean
    retentionPeriod?: boolean
    description?: boolean
    legalBasis?: boolean
    autoDelete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dataRetentionPolicy"]>

  export type DataRetentionPolicySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    dataType?: boolean
    retentionPeriod?: boolean
    description?: boolean
    legalBasis?: boolean
    autoDelete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["dataRetentionPolicy"]>

  export type DataRetentionPolicySelectScalar = {
    id?: boolean
    dataType?: boolean
    retentionPeriod?: boolean
    description?: boolean
    legalBasis?: boolean
    autoDelete?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DataRetentionPolicyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "dataType" | "retentionPeriod" | "description" | "legalBasis" | "autoDelete" | "createdAt" | "updatedAt", ExtArgs["result"]["dataRetentionPolicy"]>

  export type $DataRetentionPolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DataRetentionPolicy"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      dataType: string
      retentionPeriod: number
      description: string | null
      legalBasis: string
      autoDelete: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["dataRetentionPolicy"]>
    composites: {}
  }

  type DataRetentionPolicyGetPayload<S extends boolean | null | undefined | DataRetentionPolicyDefaultArgs> = $Result.GetResult<Prisma.$DataRetentionPolicyPayload, S>

  type DataRetentionPolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DataRetentionPolicyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DataRetentionPolicyCountAggregateInputType | true
    }

  export interface DataRetentionPolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DataRetentionPolicy'], meta: { name: 'DataRetentionPolicy' } }
    /**
     * Find zero or one DataRetentionPolicy that matches the filter.
     * @param {DataRetentionPolicyFindUniqueArgs} args - Arguments to find a DataRetentionPolicy
     * @example
     * // Get one DataRetentionPolicy
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DataRetentionPolicyFindUniqueArgs>(args: SelectSubset<T, DataRetentionPolicyFindUniqueArgs<ExtArgs>>): Prisma__DataRetentionPolicyClient<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DataRetentionPolicy that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DataRetentionPolicyFindUniqueOrThrowArgs} args - Arguments to find a DataRetentionPolicy
     * @example
     * // Get one DataRetentionPolicy
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DataRetentionPolicyFindUniqueOrThrowArgs>(args: SelectSubset<T, DataRetentionPolicyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DataRetentionPolicyClient<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DataRetentionPolicy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRetentionPolicyFindFirstArgs} args - Arguments to find a DataRetentionPolicy
     * @example
     * // Get one DataRetentionPolicy
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DataRetentionPolicyFindFirstArgs>(args?: SelectSubset<T, DataRetentionPolicyFindFirstArgs<ExtArgs>>): Prisma__DataRetentionPolicyClient<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DataRetentionPolicy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRetentionPolicyFindFirstOrThrowArgs} args - Arguments to find a DataRetentionPolicy
     * @example
     * // Get one DataRetentionPolicy
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DataRetentionPolicyFindFirstOrThrowArgs>(args?: SelectSubset<T, DataRetentionPolicyFindFirstOrThrowArgs<ExtArgs>>): Prisma__DataRetentionPolicyClient<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DataRetentionPolicies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRetentionPolicyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DataRetentionPolicies
     * const dataRetentionPolicies = await prisma.dataRetentionPolicy.findMany()
     * 
     * // Get first 10 DataRetentionPolicies
     * const dataRetentionPolicies = await prisma.dataRetentionPolicy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const dataRetentionPolicyWithIdOnly = await prisma.dataRetentionPolicy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DataRetentionPolicyFindManyArgs>(args?: SelectSubset<T, DataRetentionPolicyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DataRetentionPolicy.
     * @param {DataRetentionPolicyCreateArgs} args - Arguments to create a DataRetentionPolicy.
     * @example
     * // Create one DataRetentionPolicy
     * const DataRetentionPolicy = await prisma.dataRetentionPolicy.create({
     *   data: {
     *     // ... data to create a DataRetentionPolicy
     *   }
     * })
     * 
     */
    create<T extends DataRetentionPolicyCreateArgs>(args: SelectSubset<T, DataRetentionPolicyCreateArgs<ExtArgs>>): Prisma__DataRetentionPolicyClient<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DataRetentionPolicies.
     * @param {DataRetentionPolicyCreateManyArgs} args - Arguments to create many DataRetentionPolicies.
     * @example
     * // Create many DataRetentionPolicies
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DataRetentionPolicyCreateManyArgs>(args?: SelectSubset<T, DataRetentionPolicyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DataRetentionPolicies and returns the data saved in the database.
     * @param {DataRetentionPolicyCreateManyAndReturnArgs} args - Arguments to create many DataRetentionPolicies.
     * @example
     * // Create many DataRetentionPolicies
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DataRetentionPolicies and only return the `id`
     * const dataRetentionPolicyWithIdOnly = await prisma.dataRetentionPolicy.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DataRetentionPolicyCreateManyAndReturnArgs>(args?: SelectSubset<T, DataRetentionPolicyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DataRetentionPolicy.
     * @param {DataRetentionPolicyDeleteArgs} args - Arguments to delete one DataRetentionPolicy.
     * @example
     * // Delete one DataRetentionPolicy
     * const DataRetentionPolicy = await prisma.dataRetentionPolicy.delete({
     *   where: {
     *     // ... filter to delete one DataRetentionPolicy
     *   }
     * })
     * 
     */
    delete<T extends DataRetentionPolicyDeleteArgs>(args: SelectSubset<T, DataRetentionPolicyDeleteArgs<ExtArgs>>): Prisma__DataRetentionPolicyClient<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DataRetentionPolicy.
     * @param {DataRetentionPolicyUpdateArgs} args - Arguments to update one DataRetentionPolicy.
     * @example
     * // Update one DataRetentionPolicy
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DataRetentionPolicyUpdateArgs>(args: SelectSubset<T, DataRetentionPolicyUpdateArgs<ExtArgs>>): Prisma__DataRetentionPolicyClient<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DataRetentionPolicies.
     * @param {DataRetentionPolicyDeleteManyArgs} args - Arguments to filter DataRetentionPolicies to delete.
     * @example
     * // Delete a few DataRetentionPolicies
     * const { count } = await prisma.dataRetentionPolicy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DataRetentionPolicyDeleteManyArgs>(args?: SelectSubset<T, DataRetentionPolicyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataRetentionPolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRetentionPolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DataRetentionPolicies
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DataRetentionPolicyUpdateManyArgs>(args: SelectSubset<T, DataRetentionPolicyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DataRetentionPolicies and returns the data updated in the database.
     * @param {DataRetentionPolicyUpdateManyAndReturnArgs} args - Arguments to update many DataRetentionPolicies.
     * @example
     * // Update many DataRetentionPolicies
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DataRetentionPolicies and only return the `id`
     * const dataRetentionPolicyWithIdOnly = await prisma.dataRetentionPolicy.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DataRetentionPolicyUpdateManyAndReturnArgs>(args: SelectSubset<T, DataRetentionPolicyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DataRetentionPolicy.
     * @param {DataRetentionPolicyUpsertArgs} args - Arguments to update or create a DataRetentionPolicy.
     * @example
     * // Update or create a DataRetentionPolicy
     * const dataRetentionPolicy = await prisma.dataRetentionPolicy.upsert({
     *   create: {
     *     // ... data to create a DataRetentionPolicy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DataRetentionPolicy we want to update
     *   }
     * })
     */
    upsert<T extends DataRetentionPolicyUpsertArgs>(args: SelectSubset<T, DataRetentionPolicyUpsertArgs<ExtArgs>>): Prisma__DataRetentionPolicyClient<$Result.GetResult<Prisma.$DataRetentionPolicyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DataRetentionPolicies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRetentionPolicyCountArgs} args - Arguments to filter DataRetentionPolicies to count.
     * @example
     * // Count the number of DataRetentionPolicies
     * const count = await prisma.dataRetentionPolicy.count({
     *   where: {
     *     // ... the filter for the DataRetentionPolicies we want to count
     *   }
     * })
    **/
    count<T extends DataRetentionPolicyCountArgs>(
      args?: Subset<T, DataRetentionPolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DataRetentionPolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DataRetentionPolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRetentionPolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DataRetentionPolicyAggregateArgs>(args: Subset<T, DataRetentionPolicyAggregateArgs>): Prisma.PrismaPromise<GetDataRetentionPolicyAggregateType<T>>

    /**
     * Group by DataRetentionPolicy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DataRetentionPolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DataRetentionPolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DataRetentionPolicyGroupByArgs['orderBy'] }
        : { orderBy?: DataRetentionPolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DataRetentionPolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDataRetentionPolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DataRetentionPolicy model
   */
  readonly fields: DataRetentionPolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DataRetentionPolicy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DataRetentionPolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DataRetentionPolicy model
   */
  interface DataRetentionPolicyFieldRefs {
    readonly id: FieldRef<"DataRetentionPolicy", 'String'>
    readonly dataType: FieldRef<"DataRetentionPolicy", 'String'>
    readonly retentionPeriod: FieldRef<"DataRetentionPolicy", 'Int'>
    readonly description: FieldRef<"DataRetentionPolicy", 'String'>
    readonly legalBasis: FieldRef<"DataRetentionPolicy", 'String'>
    readonly autoDelete: FieldRef<"DataRetentionPolicy", 'Boolean'>
    readonly createdAt: FieldRef<"DataRetentionPolicy", 'DateTime'>
    readonly updatedAt: FieldRef<"DataRetentionPolicy", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DataRetentionPolicy findUnique
   */
  export type DataRetentionPolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * Filter, which DataRetentionPolicy to fetch.
     */
    where: DataRetentionPolicyWhereUniqueInput
  }

  /**
   * DataRetentionPolicy findUniqueOrThrow
   */
  export type DataRetentionPolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * Filter, which DataRetentionPolicy to fetch.
     */
    where: DataRetentionPolicyWhereUniqueInput
  }

  /**
   * DataRetentionPolicy findFirst
   */
  export type DataRetentionPolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * Filter, which DataRetentionPolicy to fetch.
     */
    where?: DataRetentionPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRetentionPolicies to fetch.
     */
    orderBy?: DataRetentionPolicyOrderByWithRelationInput | DataRetentionPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataRetentionPolicies.
     */
    cursor?: DataRetentionPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRetentionPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRetentionPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataRetentionPolicies.
     */
    distinct?: DataRetentionPolicyScalarFieldEnum | DataRetentionPolicyScalarFieldEnum[]
  }

  /**
   * DataRetentionPolicy findFirstOrThrow
   */
  export type DataRetentionPolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * Filter, which DataRetentionPolicy to fetch.
     */
    where?: DataRetentionPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRetentionPolicies to fetch.
     */
    orderBy?: DataRetentionPolicyOrderByWithRelationInput | DataRetentionPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DataRetentionPolicies.
     */
    cursor?: DataRetentionPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRetentionPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRetentionPolicies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DataRetentionPolicies.
     */
    distinct?: DataRetentionPolicyScalarFieldEnum | DataRetentionPolicyScalarFieldEnum[]
  }

  /**
   * DataRetentionPolicy findMany
   */
  export type DataRetentionPolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * Filter, which DataRetentionPolicies to fetch.
     */
    where?: DataRetentionPolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DataRetentionPolicies to fetch.
     */
    orderBy?: DataRetentionPolicyOrderByWithRelationInput | DataRetentionPolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DataRetentionPolicies.
     */
    cursor?: DataRetentionPolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DataRetentionPolicies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DataRetentionPolicies.
     */
    skip?: number
    distinct?: DataRetentionPolicyScalarFieldEnum | DataRetentionPolicyScalarFieldEnum[]
  }

  /**
   * DataRetentionPolicy create
   */
  export type DataRetentionPolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * The data needed to create a DataRetentionPolicy.
     */
    data: XOR<DataRetentionPolicyCreateInput, DataRetentionPolicyUncheckedCreateInput>
  }

  /**
   * DataRetentionPolicy createMany
   */
  export type DataRetentionPolicyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DataRetentionPolicies.
     */
    data: DataRetentionPolicyCreateManyInput | DataRetentionPolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DataRetentionPolicy createManyAndReturn
   */
  export type DataRetentionPolicyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * The data used to create many DataRetentionPolicies.
     */
    data: DataRetentionPolicyCreateManyInput | DataRetentionPolicyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DataRetentionPolicy update
   */
  export type DataRetentionPolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * The data needed to update a DataRetentionPolicy.
     */
    data: XOR<DataRetentionPolicyUpdateInput, DataRetentionPolicyUncheckedUpdateInput>
    /**
     * Choose, which DataRetentionPolicy to update.
     */
    where: DataRetentionPolicyWhereUniqueInput
  }

  /**
   * DataRetentionPolicy updateMany
   */
  export type DataRetentionPolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DataRetentionPolicies.
     */
    data: XOR<DataRetentionPolicyUpdateManyMutationInput, DataRetentionPolicyUncheckedUpdateManyInput>
    /**
     * Filter which DataRetentionPolicies to update
     */
    where?: DataRetentionPolicyWhereInput
    /**
     * Limit how many DataRetentionPolicies to update.
     */
    limit?: number
  }

  /**
   * DataRetentionPolicy updateManyAndReturn
   */
  export type DataRetentionPolicyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * The data used to update DataRetentionPolicies.
     */
    data: XOR<DataRetentionPolicyUpdateManyMutationInput, DataRetentionPolicyUncheckedUpdateManyInput>
    /**
     * Filter which DataRetentionPolicies to update
     */
    where?: DataRetentionPolicyWhereInput
    /**
     * Limit how many DataRetentionPolicies to update.
     */
    limit?: number
  }

  /**
   * DataRetentionPolicy upsert
   */
  export type DataRetentionPolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * The filter to search for the DataRetentionPolicy to update in case it exists.
     */
    where: DataRetentionPolicyWhereUniqueInput
    /**
     * In case the DataRetentionPolicy found by the `where` argument doesn't exist, create a new DataRetentionPolicy with this data.
     */
    create: XOR<DataRetentionPolicyCreateInput, DataRetentionPolicyUncheckedCreateInput>
    /**
     * In case the DataRetentionPolicy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DataRetentionPolicyUpdateInput, DataRetentionPolicyUncheckedUpdateInput>
  }

  /**
   * DataRetentionPolicy delete
   */
  export type DataRetentionPolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
    /**
     * Filter which DataRetentionPolicy to delete.
     */
    where: DataRetentionPolicyWhereUniqueInput
  }

  /**
   * DataRetentionPolicy deleteMany
   */
  export type DataRetentionPolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DataRetentionPolicies to delete
     */
    where?: DataRetentionPolicyWhereInput
    /**
     * Limit how many DataRetentionPolicies to delete.
     */
    limit?: number
  }

  /**
   * DataRetentionPolicy without action
   */
  export type DataRetentionPolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DataRetentionPolicy
     */
    select?: DataRetentionPolicySelect<ExtArgs> | null
    /**
     * Omit specific fields from the DataRetentionPolicy
     */
    omit?: DataRetentionPolicyOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    avatar: 'avatar',
    phone: 'phone',
    timezone: 'timezone',
    resetPasswordToken: 'resetPasswordToken',
    resetPasswordExpires: 'resetPasswordExpires',
    emailVerified: 'emailVerified',
    emailVerificationToken: 'emailVerificationToken',
    mfaEnabled: 'mfaEnabled',
    mfaSecret: 'mfaSecret',
    mfaBackupCodes: 'mfaBackupCodes',
    mfaLastUsed: 'mfaLastUsed',
    refreshToken: 'refreshToken',
    lastLoginAt: 'lastLoginAt',
    specialization: 'specialization'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StaffScheduleScalarFieldEnum: {
    id: 'id',
    staffId: 'staffId',
    dayOfWeek: 'dayOfWeek',
    startTime: 'startTime',
    endTime: 'endTime',
    breakStartTime: 'breakStartTime',
    breakEndTime: 'breakEndTime',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffScheduleScalarFieldEnum = (typeof StaffScheduleScalarFieldEnum)[keyof typeof StaffScheduleScalarFieldEnum]


  export const StaffLeaveScalarFieldEnum: {
    id: 'id',
    staffId: 'staffId',
    startDate: 'startDate',
    endDate: 'endDate',
    reason: 'reason',
    isApproved: 'isApproved',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StaffLeaveScalarFieldEnum = (typeof StaffLeaveScalarFieldEnum)[keyof typeof StaffLeaveScalarFieldEnum]


  export const RoomScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    features: 'features',
    createdById: 'createdById',
    modifiedById: 'modifiedById',
    isActive: 'isActive',
    capacity: 'capacity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoomScalarFieldEnum = (typeof RoomScalarFieldEnum)[keyof typeof RoomScalarFieldEnum]


  export const ServiceScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    duration: 'duration',
    price: 'price',
    category: 'category',
    categoryColor: 'categoryColor',
    sessionCount: 'sessionCount',
    isForChildren: 'isForChildren',
    isVoucher: 'isVoucher',
    createdById: 'createdById',
    modifiedById: 'modifiedById',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ServiceScalarFieldEnum = (typeof ServiceScalarFieldEnum)[keyof typeof ServiceScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    email: 'email',
    phone: 'phone',
    address: 'address',
    socialInsuranceNumber: 'socialInsuranceNumber',
    notes: 'notes',
    doctorReferral: 'doctorReferral',
    insuranceType: 'insuranceType',
    createdById: 'createdById',
    modifiedById: 'modifiedById',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const PatientHistoryScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    packageId: 'packageId',
    appointmentId: 'appointmentId',
    mainSubjectiveProblem: 'mainSubjectiveProblem',
    symptomHistory: 'symptomHistory',
    previousCourseAndTherapy: 'previousCourseAndTherapy',
    patientGoals: 'patientGoals',
    activityStatus: 'activityStatus',
    trunkAndHeadParticularities: 'trunkAndHeadParticularities',
    edemaTrophicsAtrophies: 'edemaTrophicsAtrophies',
    notes: 'notes',
    createdById: 'createdById',
    modifiedById: 'modifiedById',
    recordedAt: 'recordedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PatientHistoryScalarFieldEnum = (typeof PatientHistoryScalarFieldEnum)[keyof typeof PatientHistoryScalarFieldEnum]


  export const PackageScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    name: 'name',
    totalPrice: 'totalPrice',
    discountAmount: 'discountAmount',
    finalPrice: 'finalPrice',
    status: 'status',
    paymentStatus: 'paymentStatus',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PackageScalarFieldEnum = (typeof PackageScalarFieldEnum)[keyof typeof PackageScalarFieldEnum]


  export const PackageItemScalarFieldEnum: {
    id: 'id',
    packageId: 'packageId',
    serviceId: 'serviceId',
    sessionCount: 'sessionCount',
    completedCount: 'completedCount'
  };

  export type PackageItemScalarFieldEnum = (typeof PackageItemScalarFieldEnum)[keyof typeof PackageItemScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    packageId: 'packageId',
    serviceId: 'serviceId',
    staffId: 'staffId',
    roomId: 'roomId',
    scheduledDate: 'scheduledDate',
    startTime: 'startTime',
    endTime: 'endTime',
    status: 'status',
    notes: 'notes',
    hasConflict: 'hasConflict',
    conflictReason: 'conflictReason',
    isVisible: 'isVisible',
    createdById: 'createdById',
    modifiedById: 'modifiedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    packageId: 'packageId',
    amount: 'amount',
    paymentMethod: 'paymentMethod',
    paidSessionsCount: 'paidSessionsCount',
    status: 'status',
    paidAt: 'paidAt',
    notes: 'notes',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    tableName: 'tableName',
    recordId: 'recordId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    description: 'description',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionToken: 'sessionToken',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    isActive: 'isActive',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const SystemSettingScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    description: 'description',
    isPublic: 'isPublic',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemSettingScalarFieldEnum = (typeof SystemSettingScalarFieldEnum)[keyof typeof SystemSettingScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    scheduledFor: 'scheduledFor',
    sentAt: 'sentAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const CalendarSettingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    workingHoursStart: 'workingHoursStart',
    workingHoursEnd: 'workingHoursEnd',
    timeSlotInterval: 'timeSlotInterval',
    showWeekends: 'showWeekends',
    defaultView: 'defaultView',
    showStaffAvailability: 'showStaffAvailability',
    showRoomInfo: 'showRoomInfo',
    autoRefreshInterval: 'autoRefreshInterval',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CalendarSettingScalarFieldEnum = (typeof CalendarSettingScalarFieldEnum)[keyof typeof CalendarSettingScalarFieldEnum]


  export const ConsentRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    consentType: 'consentType',
    granted: 'granted',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    consentString: 'consentString',
    expiresAt: 'expiresAt',
    withdrawnAt: 'withdrawnAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ConsentRecordScalarFieldEnum = (typeof ConsentRecordScalarFieldEnum)[keyof typeof ConsentRecordScalarFieldEnum]


  export const DataExportRequestScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    requestType: 'requestType',
    status: 'status',
    requestedData: 'requestedData',
    filePath: 'filePath',
    downloadedAt: 'downloadedAt',
    expiresAt: 'expiresAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DataExportRequestScalarFieldEnum = (typeof DataExportRequestScalarFieldEnum)[keyof typeof DataExportRequestScalarFieldEnum]


  export const GDPRAuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    dataType: 'dataType',
    recordId: 'recordId',
    legalBasis: 'legalBasis',
    purpose: 'purpose',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    consentId: 'consentId',
    automated: 'automated',
    createdAt: 'createdAt'
  };

  export type GDPRAuditLogScalarFieldEnum = (typeof GDPRAuditLogScalarFieldEnum)[keyof typeof GDPRAuditLogScalarFieldEnum]


  export const DataRetentionPolicyScalarFieldEnum: {
    id: 'id',
    dataType: 'dataType',
    retentionPeriod: 'retentionPeriod',
    description: 'description',
    legalBasis: 'legalBasis',
    autoDelete: 'autoDelete',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DataRetentionPolicyScalarFieldEnum = (typeof DataRetentionPolicyScalarFieldEnum)[keyof typeof DataRetentionPolicyScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'StaffSpecialization'
   */
  export type EnumStaffSpecializationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StaffSpecialization'>
    


  /**
   * Reference to a field of type 'StaffSpecialization[]'
   */
  export type ListEnumStaffSpecializationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StaffSpecialization[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'ServiceCategory'
   */
  export type EnumServiceCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceCategory'>
    


  /**
   * Reference to a field of type 'ServiceCategory[]'
   */
  export type ListEnumServiceCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ServiceCategory[]'>
    


  /**
   * Reference to a field of type 'InsuranceType'
   */
  export type EnumInsuranceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InsuranceType'>
    


  /**
   * Reference to a field of type 'InsuranceType[]'
   */
  export type ListEnumInsuranceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'InsuranceType[]'>
    


  /**
   * Reference to a field of type 'PackageStatus'
   */
  export type EnumPackageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackageStatus'>
    


  /**
   * Reference to a field of type 'PackageStatus[]'
   */
  export type ListEnumPackageStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PackageStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'AppointmentStatus'
   */
  export type EnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus'>
    


  /**
   * Reference to a field of type 'AppointmentStatus[]'
   */
  export type ListEnumAppointmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AppointmentStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'AuditAction'
   */
  export type EnumAuditActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditAction'>
    


  /**
   * Reference to a field of type 'AuditAction[]'
   */
  export type ListEnumAuditActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuditAction[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'ConsentType'
   */
  export type EnumConsentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConsentType'>
    


  /**
   * Reference to a field of type 'ConsentType[]'
   */
  export type ListEnumConsentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ConsentType[]'>
    


  /**
   * Reference to a field of type 'DataRequestType'
   */
  export type EnumDataRequestTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataRequestType'>
    


  /**
   * Reference to a field of type 'DataRequestType[]'
   */
  export type ListEnumDataRequestTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataRequestType[]'>
    


  /**
   * Reference to a field of type 'DataRequestStatus'
   */
  export type EnumDataRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataRequestStatus'>
    


  /**
   * Reference to a field of type 'DataRequestStatus[]'
   */
  export type ListEnumDataRequestStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DataRequestStatus[]'>
    


  /**
   * Reference to a field of type 'GDPRAction'
   */
  export type EnumGDPRActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GDPRAction'>
    


  /**
   * Reference to a field of type 'GDPRAction[]'
   */
  export type ListEnumGDPRActionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GDPRAction[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    mfaEnabled?: BoolFilter<"User"> | boolean
    mfaSecret?: StringNullableFilter<"User"> | string | null
    mfaBackupCodes?: StringNullableListFilter<"User">
    mfaLastUsed?: DateTimeNullableFilter<"User"> | Date | string | null
    refreshToken?: StringNullableFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    specialization?: EnumStaffSpecializationNullableFilter<"User"> | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleListRelationFilter
    staffLeaves?: StaffLeaveListRelationFilter
    appointments?: AppointmentListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    userSessions?: UserSessionListRelationFilter
    createdPackages?: PackageListRelationFilter
    createdPayments?: PaymentListRelationFilter
    notifications?: NotificationListRelationFilter
    patientsCreated?: PatientListRelationFilter
    appointmentsCreated?: AppointmentListRelationFilter
    servicesCreated?: ServiceListRelationFilter
    roomsCreated?: RoomListRelationFilter
    patientHistoryCreated?: PatientHistoryListRelationFilter
    patientsModified?: PatientListRelationFilter
    appointmentsModified?: AppointmentListRelationFilter
    servicesModified?: ServiceListRelationFilter
    roomsModified?: RoomListRelationFilter
    patientHistoryModified?: PatientHistoryListRelationFilter
    consentRecords?: ConsentRecordListRelationFilter
    dataExportRequests?: DataExportRequestListRelationFilter
    gdprAuditLogs?: GDPRAuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatar?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrderInput | SortOrder
    mfaBackupCodes?: SortOrder
    mfaLastUsed?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    staffSchedules?: StaffScheduleOrderByRelationAggregateInput
    staffLeaves?: StaffLeaveOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    userSessions?: UserSessionOrderByRelationAggregateInput
    createdPackages?: PackageOrderByRelationAggregateInput
    createdPayments?: PaymentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    patientsCreated?: PatientOrderByRelationAggregateInput
    appointmentsCreated?: AppointmentOrderByRelationAggregateInput
    servicesCreated?: ServiceOrderByRelationAggregateInput
    roomsCreated?: RoomOrderByRelationAggregateInput
    patientHistoryCreated?: PatientHistoryOrderByRelationAggregateInput
    patientsModified?: PatientOrderByRelationAggregateInput
    appointmentsModified?: AppointmentOrderByRelationAggregateInput
    servicesModified?: ServiceOrderByRelationAggregateInput
    roomsModified?: RoomOrderByRelationAggregateInput
    patientHistoryModified?: PatientHistoryOrderByRelationAggregateInput
    consentRecords?: ConsentRecordOrderByRelationAggregateInput
    dataExportRequests?: DataExportRequestOrderByRelationAggregateInput
    gdprAuditLogs?: GDPRAuditLogOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    avatar?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    timezone?: StringNullableFilter<"User"> | string | null
    resetPasswordToken?: StringNullableFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableFilter<"User"> | Date | string | null
    emailVerified?: BoolFilter<"User"> | boolean
    emailVerificationToken?: StringNullableFilter<"User"> | string | null
    mfaEnabled?: BoolFilter<"User"> | boolean
    mfaSecret?: StringNullableFilter<"User"> | string | null
    mfaBackupCodes?: StringNullableListFilter<"User">
    mfaLastUsed?: DateTimeNullableFilter<"User"> | Date | string | null
    refreshToken?: StringNullableFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    specialization?: EnumStaffSpecializationNullableFilter<"User"> | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleListRelationFilter
    staffLeaves?: StaffLeaveListRelationFilter
    appointments?: AppointmentListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    userSessions?: UserSessionListRelationFilter
    createdPackages?: PackageListRelationFilter
    createdPayments?: PaymentListRelationFilter
    notifications?: NotificationListRelationFilter
    patientsCreated?: PatientListRelationFilter
    appointmentsCreated?: AppointmentListRelationFilter
    servicesCreated?: ServiceListRelationFilter
    roomsCreated?: RoomListRelationFilter
    patientHistoryCreated?: PatientHistoryListRelationFilter
    patientsModified?: PatientListRelationFilter
    appointmentsModified?: AppointmentListRelationFilter
    servicesModified?: ServiceListRelationFilter
    roomsModified?: RoomListRelationFilter
    patientHistoryModified?: PatientHistoryListRelationFilter
    consentRecords?: ConsentRecordListRelationFilter
    dataExportRequests?: DataExportRequestListRelationFilter
    gdprAuditLogs?: GDPRAuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatar?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    timezone?: SortOrderInput | SortOrder
    resetPasswordToken?: SortOrderInput | SortOrder
    resetPasswordExpires?: SortOrderInput | SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrderInput | SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrderInput | SortOrder
    mfaBackupCodes?: SortOrder
    mfaLastUsed?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    specialization?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    timezone?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetPasswordExpires?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerificationToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    mfaEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    mfaSecret?: StringNullableWithAggregatesFilter<"User"> | string | null
    mfaBackupCodes?: StringNullableListFilter<"User">
    mfaLastUsed?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    specialization?: EnumStaffSpecializationNullableWithAggregatesFilter<"User"> | $Enums.StaffSpecialization | null
  }

  export type StaffScheduleWhereInput = {
    AND?: StaffScheduleWhereInput | StaffScheduleWhereInput[]
    OR?: StaffScheduleWhereInput[]
    NOT?: StaffScheduleWhereInput | StaffScheduleWhereInput[]
    id?: StringFilter<"StaffSchedule"> | string
    staffId?: StringFilter<"StaffSchedule"> | string
    dayOfWeek?: IntFilter<"StaffSchedule"> | number
    startTime?: StringFilter<"StaffSchedule"> | string
    endTime?: StringFilter<"StaffSchedule"> | string
    breakStartTime?: StringNullableFilter<"StaffSchedule"> | string | null
    breakEndTime?: StringNullableFilter<"StaffSchedule"> | string | null
    isActive?: BoolFilter<"StaffSchedule"> | boolean
    createdAt?: DateTimeFilter<"StaffSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"StaffSchedule"> | Date | string
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StaffScheduleOrderByWithRelationInput = {
    id?: SortOrder
    staffId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    breakStartTime?: SortOrderInput | SortOrder
    breakEndTime?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staff?: UserOrderByWithRelationInput
  }

  export type StaffScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    staffId_dayOfWeek?: StaffScheduleStaffIdDayOfWeekCompoundUniqueInput
    AND?: StaffScheduleWhereInput | StaffScheduleWhereInput[]
    OR?: StaffScheduleWhereInput[]
    NOT?: StaffScheduleWhereInput | StaffScheduleWhereInput[]
    staffId?: StringFilter<"StaffSchedule"> | string
    dayOfWeek?: IntFilter<"StaffSchedule"> | number
    startTime?: StringFilter<"StaffSchedule"> | string
    endTime?: StringFilter<"StaffSchedule"> | string
    breakStartTime?: StringNullableFilter<"StaffSchedule"> | string | null
    breakEndTime?: StringNullableFilter<"StaffSchedule"> | string | null
    isActive?: BoolFilter<"StaffSchedule"> | boolean
    createdAt?: DateTimeFilter<"StaffSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"StaffSchedule"> | Date | string
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "staffId_dayOfWeek">

  export type StaffScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    staffId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    breakStartTime?: SortOrderInput | SortOrder
    breakEndTime?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffScheduleCountOrderByAggregateInput
    _avg?: StaffScheduleAvgOrderByAggregateInput
    _max?: StaffScheduleMaxOrderByAggregateInput
    _min?: StaffScheduleMinOrderByAggregateInput
    _sum?: StaffScheduleSumOrderByAggregateInput
  }

  export type StaffScheduleScalarWhereWithAggregatesInput = {
    AND?: StaffScheduleScalarWhereWithAggregatesInput | StaffScheduleScalarWhereWithAggregatesInput[]
    OR?: StaffScheduleScalarWhereWithAggregatesInput[]
    NOT?: StaffScheduleScalarWhereWithAggregatesInput | StaffScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StaffSchedule"> | string
    staffId?: StringWithAggregatesFilter<"StaffSchedule"> | string
    dayOfWeek?: IntWithAggregatesFilter<"StaffSchedule"> | number
    startTime?: StringWithAggregatesFilter<"StaffSchedule"> | string
    endTime?: StringWithAggregatesFilter<"StaffSchedule"> | string
    breakStartTime?: StringNullableWithAggregatesFilter<"StaffSchedule"> | string | null
    breakEndTime?: StringNullableWithAggregatesFilter<"StaffSchedule"> | string | null
    isActive?: BoolWithAggregatesFilter<"StaffSchedule"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"StaffSchedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StaffSchedule"> | Date | string
  }

  export type StaffLeaveWhereInput = {
    AND?: StaffLeaveWhereInput | StaffLeaveWhereInput[]
    OR?: StaffLeaveWhereInput[]
    NOT?: StaffLeaveWhereInput | StaffLeaveWhereInput[]
    id?: StringFilter<"StaffLeave"> | string
    staffId?: StringFilter<"StaffLeave"> | string
    startDate?: DateTimeFilter<"StaffLeave"> | Date | string
    endDate?: DateTimeFilter<"StaffLeave"> | Date | string
    reason?: StringNullableFilter<"StaffLeave"> | string | null
    isApproved?: BoolFilter<"StaffLeave"> | boolean
    createdAt?: DateTimeFilter<"StaffLeave"> | Date | string
    updatedAt?: DateTimeFilter<"StaffLeave"> | Date | string
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type StaffLeaveOrderByWithRelationInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    staff?: UserOrderByWithRelationInput
  }

  export type StaffLeaveWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StaffLeaveWhereInput | StaffLeaveWhereInput[]
    OR?: StaffLeaveWhereInput[]
    NOT?: StaffLeaveWhereInput | StaffLeaveWhereInput[]
    staffId?: StringFilter<"StaffLeave"> | string
    startDate?: DateTimeFilter<"StaffLeave"> | Date | string
    endDate?: DateTimeFilter<"StaffLeave"> | Date | string
    reason?: StringNullableFilter<"StaffLeave"> | string | null
    isApproved?: BoolFilter<"StaffLeave"> | boolean
    createdAt?: DateTimeFilter<"StaffLeave"> | Date | string
    updatedAt?: DateTimeFilter<"StaffLeave"> | Date | string
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type StaffLeaveOrderByWithAggregationInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrderInput | SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StaffLeaveCountOrderByAggregateInput
    _max?: StaffLeaveMaxOrderByAggregateInput
    _min?: StaffLeaveMinOrderByAggregateInput
  }

  export type StaffLeaveScalarWhereWithAggregatesInput = {
    AND?: StaffLeaveScalarWhereWithAggregatesInput | StaffLeaveScalarWhereWithAggregatesInput[]
    OR?: StaffLeaveScalarWhereWithAggregatesInput[]
    NOT?: StaffLeaveScalarWhereWithAggregatesInput | StaffLeaveScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StaffLeave"> | string
    staffId?: StringWithAggregatesFilter<"StaffLeave"> | string
    startDate?: DateTimeWithAggregatesFilter<"StaffLeave"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"StaffLeave"> | Date | string
    reason?: StringNullableWithAggregatesFilter<"StaffLeave"> | string | null
    isApproved?: BoolWithAggregatesFilter<"StaffLeave"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"StaffLeave"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"StaffLeave"> | Date | string
  }

  export type RoomWhereInput = {
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    id?: StringFilter<"Room"> | string
    name?: StringFilter<"Room"> | string
    description?: StringNullableFilter<"Room"> | string | null
    features?: StringNullableListFilter<"Room">
    createdById?: StringFilter<"Room"> | string
    modifiedById?: StringNullableFilter<"Room"> | string | null
    isActive?: BoolFilter<"Room"> | boolean
    capacity?: IntFilter<"Room"> | number
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    appointments?: AppointmentListRelationFilter
  }

  export type RoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    features?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    isActive?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    modifiedBy?: UserOrderByWithRelationInput
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type RoomWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoomWhereInput | RoomWhereInput[]
    OR?: RoomWhereInput[]
    NOT?: RoomWhereInput | RoomWhereInput[]
    description?: StringNullableFilter<"Room"> | string | null
    features?: StringNullableListFilter<"Room">
    createdById?: StringFilter<"Room"> | string
    modifiedById?: StringNullableFilter<"Room"> | string | null
    isActive?: BoolFilter<"Room"> | boolean
    capacity?: IntFilter<"Room"> | number
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    appointments?: AppointmentListRelationFilter
  }, "id" | "name">

  export type RoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    features?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    isActive?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoomCountOrderByAggregateInput
    _avg?: RoomAvgOrderByAggregateInput
    _max?: RoomMaxOrderByAggregateInput
    _min?: RoomMinOrderByAggregateInput
    _sum?: RoomSumOrderByAggregateInput
  }

  export type RoomScalarWhereWithAggregatesInput = {
    AND?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    OR?: RoomScalarWhereWithAggregatesInput[]
    NOT?: RoomScalarWhereWithAggregatesInput | RoomScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Room"> | string
    name?: StringWithAggregatesFilter<"Room"> | string
    description?: StringNullableWithAggregatesFilter<"Room"> | string | null
    features?: StringNullableListFilter<"Room">
    createdById?: StringWithAggregatesFilter<"Room"> | string
    modifiedById?: StringNullableWithAggregatesFilter<"Room"> | string | null
    isActive?: BoolWithAggregatesFilter<"Room"> | boolean
    capacity?: IntWithAggregatesFilter<"Room"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Room"> | Date | string
  }

  export type ServiceWhereInput = {
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    id?: StringFilter<"Service"> | string
    name?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    duration?: IntFilter<"Service"> | number
    price?: DecimalFilter<"Service"> | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFilter<"Service"> | $Enums.ServiceCategory
    categoryColor?: StringFilter<"Service"> | string
    sessionCount?: IntFilter<"Service"> | number
    isForChildren?: BoolFilter<"Service"> | boolean
    isVoucher?: BoolFilter<"Service"> | boolean
    createdById?: StringFilter<"Service"> | string
    modifiedById?: StringNullableFilter<"Service"> | string | null
    isActive?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    packageItems?: PackageItemListRelationFilter
    appointments?: AppointmentListRelationFilter
  }

  export type ServiceOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    duration?: SortOrder
    price?: SortOrder
    category?: SortOrder
    categoryColor?: SortOrder
    sessionCount?: SortOrder
    isForChildren?: SortOrder
    isVoucher?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    modifiedBy?: UserOrderByWithRelationInput
    packageItems?: PackageItemOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type ServiceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ServiceWhereInput | ServiceWhereInput[]
    OR?: ServiceWhereInput[]
    NOT?: ServiceWhereInput | ServiceWhereInput[]
    description?: StringNullableFilter<"Service"> | string | null
    duration?: IntFilter<"Service"> | number
    price?: DecimalFilter<"Service"> | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFilter<"Service"> | $Enums.ServiceCategory
    categoryColor?: StringFilter<"Service"> | string
    sessionCount?: IntFilter<"Service"> | number
    isForChildren?: BoolFilter<"Service"> | boolean
    isVoucher?: BoolFilter<"Service"> | boolean
    createdById?: StringFilter<"Service"> | string
    modifiedById?: StringNullableFilter<"Service"> | string | null
    isActive?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    packageItems?: PackageItemListRelationFilter
    appointments?: AppointmentListRelationFilter
  }, "id" | "name">

  export type ServiceOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    duration?: SortOrder
    price?: SortOrder
    category?: SortOrder
    categoryColor?: SortOrder
    sessionCount?: SortOrder
    isForChildren?: SortOrder
    isVoucher?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ServiceCountOrderByAggregateInput
    _avg?: ServiceAvgOrderByAggregateInput
    _max?: ServiceMaxOrderByAggregateInput
    _min?: ServiceMinOrderByAggregateInput
    _sum?: ServiceSumOrderByAggregateInput
  }

  export type ServiceScalarWhereWithAggregatesInput = {
    AND?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    OR?: ServiceScalarWhereWithAggregatesInput[]
    NOT?: ServiceScalarWhereWithAggregatesInput | ServiceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Service"> | string
    name?: StringWithAggregatesFilter<"Service"> | string
    description?: StringNullableWithAggregatesFilter<"Service"> | string | null
    duration?: IntWithAggregatesFilter<"Service"> | number
    price?: DecimalWithAggregatesFilter<"Service"> | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryWithAggregatesFilter<"Service"> | $Enums.ServiceCategory
    categoryColor?: StringWithAggregatesFilter<"Service"> | string
    sessionCount?: IntWithAggregatesFilter<"Service"> | number
    isForChildren?: BoolWithAggregatesFilter<"Service"> | boolean
    isVoucher?: BoolWithAggregatesFilter<"Service"> | boolean
    createdById?: StringWithAggregatesFilter<"Service"> | string
    modifiedById?: StringNullableWithAggregatesFilter<"Service"> | string | null
    isActive?: BoolWithAggregatesFilter<"Service"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Service"> | Date | string
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: StringFilter<"Patient"> | string
    firstName?: StringFilter<"Patient"> | string
    lastName?: StringFilter<"Patient"> | string
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    phone?: StringFilter<"Patient"> | string
    address?: StringNullableFilter<"Patient"> | string | null
    socialInsuranceNumber?: StringNullableFilter<"Patient"> | string | null
    notes?: StringNullableFilter<"Patient"> | string | null
    doctorReferral?: StringNullableFilter<"Patient"> | string | null
    insuranceType?: EnumInsuranceTypeNullableFilter<"Patient"> | $Enums.InsuranceType | null
    createdById?: StringFilter<"Patient"> | string
    modifiedById?: StringNullableFilter<"Patient"> | string | null
    isActive?: BoolFilter<"Patient"> | boolean
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    packages?: PackageListRelationFilter
    appointments?: AppointmentListRelationFilter
    patientHistory?: PatientHistoryListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    address?: SortOrderInput | SortOrder
    socialInsuranceNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    doctorReferral?: SortOrderInput | SortOrder
    insuranceType?: SortOrderInput | SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    modifiedBy?: UserOrderByWithRelationInput
    packages?: PackageOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    patientHistory?: PatientHistoryOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    socialInsuranceNumber?: string
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    firstName?: StringFilter<"Patient"> | string
    lastName?: StringFilter<"Patient"> | string
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    address?: StringNullableFilter<"Patient"> | string | null
    notes?: StringNullableFilter<"Patient"> | string | null
    doctorReferral?: StringNullableFilter<"Patient"> | string | null
    insuranceType?: EnumInsuranceTypeNullableFilter<"Patient"> | $Enums.InsuranceType | null
    createdById?: StringFilter<"Patient"> | string
    modifiedById?: StringNullableFilter<"Patient"> | string | null
    isActive?: BoolFilter<"Patient"> | boolean
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    packages?: PackageListRelationFilter
    appointments?: AppointmentListRelationFilter
    patientHistory?: PatientHistoryListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id" | "email" | "phone" | "socialInsuranceNumber">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrder
    address?: SortOrderInput | SortOrder
    socialInsuranceNumber?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    doctorReferral?: SortOrderInput | SortOrder
    insuranceType?: SortOrderInput | SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Patient"> | string
    firstName?: StringWithAggregatesFilter<"Patient"> | string
    lastName?: StringWithAggregatesFilter<"Patient"> | string
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Patient"> | Date | string | null
    email?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    phone?: StringWithAggregatesFilter<"Patient"> | string
    address?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    socialInsuranceNumber?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    doctorReferral?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    insuranceType?: EnumInsuranceTypeNullableWithAggregatesFilter<"Patient"> | $Enums.InsuranceType | null
    createdById?: StringWithAggregatesFilter<"Patient"> | string
    modifiedById?: StringNullableWithAggregatesFilter<"Patient"> | string | null
    isActive?: BoolWithAggregatesFilter<"Patient"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
  }

  export type PatientHistoryWhereInput = {
    AND?: PatientHistoryWhereInput | PatientHistoryWhereInput[]
    OR?: PatientHistoryWhereInput[]
    NOT?: PatientHistoryWhereInput | PatientHistoryWhereInput[]
    id?: StringFilter<"PatientHistory"> | string
    patientId?: StringFilter<"PatientHistory"> | string
    packageId?: StringNullableFilter<"PatientHistory"> | string | null
    appointmentId?: StringNullableFilter<"PatientHistory"> | string | null
    mainSubjectiveProblem?: StringNullableFilter<"PatientHistory"> | string | null
    symptomHistory?: StringNullableFilter<"PatientHistory"> | string | null
    previousCourseAndTherapy?: StringNullableFilter<"PatientHistory"> | string | null
    patientGoals?: StringNullableFilter<"PatientHistory"> | string | null
    activityStatus?: StringNullableFilter<"PatientHistory"> | string | null
    trunkAndHeadParticularities?: StringNullableFilter<"PatientHistory"> | string | null
    edemaTrophicsAtrophies?: StringNullableFilter<"PatientHistory"> | string | null
    notes?: StringNullableFilter<"PatientHistory"> | string | null
    createdById?: StringFilter<"PatientHistory"> | string
    modifiedById?: StringNullableFilter<"PatientHistory"> | string | null
    recordedAt?: DateTimeFilter<"PatientHistory"> | Date | string
    createdAt?: DateTimeFilter<"PatientHistory"> | Date | string
    updatedAt?: DateTimeFilter<"PatientHistory"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    package?: XOR<PackageNullableScalarRelationFilter, PackageWhereInput> | null
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
  }

  export type PatientHistoryOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    mainSubjectiveProblem?: SortOrderInput | SortOrder
    symptomHistory?: SortOrderInput | SortOrder
    previousCourseAndTherapy?: SortOrderInput | SortOrder
    patientGoals?: SortOrderInput | SortOrder
    activityStatus?: SortOrderInput | SortOrder
    trunkAndHeadParticularities?: SortOrderInput | SortOrder
    edemaTrophicsAtrophies?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    recordedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    modifiedBy?: UserOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    package?: PackageOrderByWithRelationInput
    appointment?: AppointmentOrderByWithRelationInput
  }

  export type PatientHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PatientHistoryWhereInput | PatientHistoryWhereInput[]
    OR?: PatientHistoryWhereInput[]
    NOT?: PatientHistoryWhereInput | PatientHistoryWhereInput[]
    patientId?: StringFilter<"PatientHistory"> | string
    packageId?: StringNullableFilter<"PatientHistory"> | string | null
    appointmentId?: StringNullableFilter<"PatientHistory"> | string | null
    mainSubjectiveProblem?: StringNullableFilter<"PatientHistory"> | string | null
    symptomHistory?: StringNullableFilter<"PatientHistory"> | string | null
    previousCourseAndTherapy?: StringNullableFilter<"PatientHistory"> | string | null
    patientGoals?: StringNullableFilter<"PatientHistory"> | string | null
    activityStatus?: StringNullableFilter<"PatientHistory"> | string | null
    trunkAndHeadParticularities?: StringNullableFilter<"PatientHistory"> | string | null
    edemaTrophicsAtrophies?: StringNullableFilter<"PatientHistory"> | string | null
    notes?: StringNullableFilter<"PatientHistory"> | string | null
    createdById?: StringFilter<"PatientHistory"> | string
    modifiedById?: StringNullableFilter<"PatientHistory"> | string | null
    recordedAt?: DateTimeFilter<"PatientHistory"> | Date | string
    createdAt?: DateTimeFilter<"PatientHistory"> | Date | string
    updatedAt?: DateTimeFilter<"PatientHistory"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    package?: XOR<PackageNullableScalarRelationFilter, PackageWhereInput> | null
    appointment?: XOR<AppointmentNullableScalarRelationFilter, AppointmentWhereInput> | null
  }, "id">

  export type PatientHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrderInput | SortOrder
    appointmentId?: SortOrderInput | SortOrder
    mainSubjectiveProblem?: SortOrderInput | SortOrder
    symptomHistory?: SortOrderInput | SortOrder
    previousCourseAndTherapy?: SortOrderInput | SortOrder
    patientGoals?: SortOrderInput | SortOrder
    activityStatus?: SortOrderInput | SortOrder
    trunkAndHeadParticularities?: SortOrderInput | SortOrder
    edemaTrophicsAtrophies?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    recordedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PatientHistoryCountOrderByAggregateInput
    _max?: PatientHistoryMaxOrderByAggregateInput
    _min?: PatientHistoryMinOrderByAggregateInput
  }

  export type PatientHistoryScalarWhereWithAggregatesInput = {
    AND?: PatientHistoryScalarWhereWithAggregatesInput | PatientHistoryScalarWhereWithAggregatesInput[]
    OR?: PatientHistoryScalarWhereWithAggregatesInput[]
    NOT?: PatientHistoryScalarWhereWithAggregatesInput | PatientHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientHistory"> | string
    patientId?: StringWithAggregatesFilter<"PatientHistory"> | string
    packageId?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    appointmentId?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    mainSubjectiveProblem?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    symptomHistory?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    previousCourseAndTherapy?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    patientGoals?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    activityStatus?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    trunkAndHeadParticularities?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    edemaTrophicsAtrophies?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    notes?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    createdById?: StringWithAggregatesFilter<"PatientHistory"> | string
    modifiedById?: StringNullableWithAggregatesFilter<"PatientHistory"> | string | null
    recordedAt?: DateTimeWithAggregatesFilter<"PatientHistory"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"PatientHistory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PatientHistory"> | Date | string
  }

  export type PackageWhereInput = {
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    id?: StringFilter<"Package"> | string
    patientId?: StringFilter<"Package"> | string
    name?: StringFilter<"Package"> | string
    totalPrice?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    discountAmount?: DecimalNullableFilter<"Package"> | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFilter<"Package"> | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFilter<"Package"> | $Enums.PaymentStatus
    createdById?: StringFilter<"Package"> | string
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    packageItems?: PackageItemListRelationFilter
    appointments?: AppointmentListRelationFilter
    patientHistory?: PatientHistoryListRelationFilter
    payments?: PaymentListRelationFilter
  }

  export type PackageOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    totalPrice?: SortOrder
    discountAmount?: SortOrderInput | SortOrder
    finalPrice?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    packageItems?: PackageItemOrderByRelationAggregateInput
    appointments?: AppointmentOrderByRelationAggregateInput
    patientHistory?: PatientHistoryOrderByRelationAggregateInput
    payments?: PaymentOrderByRelationAggregateInput
  }

  export type PackageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    patientId?: StringFilter<"Package"> | string
    name?: StringFilter<"Package"> | string
    totalPrice?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    discountAmount?: DecimalNullableFilter<"Package"> | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFilter<"Package"> | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFilter<"Package"> | $Enums.PaymentStatus
    createdById?: StringFilter<"Package"> | string
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    packageItems?: PackageItemListRelationFilter
    appointments?: AppointmentListRelationFilter
    patientHistory?: PatientHistoryListRelationFilter
    payments?: PaymentListRelationFilter
  }, "id">

  export type PackageOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    totalPrice?: SortOrder
    discountAmount?: SortOrderInput | SortOrder
    finalPrice?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PackageCountOrderByAggregateInput
    _avg?: PackageAvgOrderByAggregateInput
    _max?: PackageMaxOrderByAggregateInput
    _min?: PackageMinOrderByAggregateInput
    _sum?: PackageSumOrderByAggregateInput
  }

  export type PackageScalarWhereWithAggregatesInput = {
    AND?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    OR?: PackageScalarWhereWithAggregatesInput[]
    NOT?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Package"> | string
    patientId?: StringWithAggregatesFilter<"Package"> | string
    name?: StringWithAggregatesFilter<"Package"> | string
    totalPrice?: DecimalWithAggregatesFilter<"Package"> | Decimal | DecimalJsLike | number | string
    discountAmount?: DecimalNullableWithAggregatesFilter<"Package"> | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalWithAggregatesFilter<"Package"> | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusWithAggregatesFilter<"Package"> | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"Package"> | $Enums.PaymentStatus
    createdById?: StringWithAggregatesFilter<"Package"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Package"> | Date | string
  }

  export type PackageItemWhereInput = {
    AND?: PackageItemWhereInput | PackageItemWhereInput[]
    OR?: PackageItemWhereInput[]
    NOT?: PackageItemWhereInput | PackageItemWhereInput[]
    id?: StringFilter<"PackageItem"> | string
    packageId?: StringFilter<"PackageItem"> | string
    serviceId?: StringFilter<"PackageItem"> | string
    sessionCount?: IntFilter<"PackageItem"> | number
    completedCount?: IntFilter<"PackageItem"> | number
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }

  export type PackageItemOrderByWithRelationInput = {
    id?: SortOrder
    packageId?: SortOrder
    serviceId?: SortOrder
    sessionCount?: SortOrder
    completedCount?: SortOrder
    package?: PackageOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
  }

  export type PackageItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    packageId_serviceId?: PackageItemPackageIdServiceIdCompoundUniqueInput
    AND?: PackageItemWhereInput | PackageItemWhereInput[]
    OR?: PackageItemWhereInput[]
    NOT?: PackageItemWhereInput | PackageItemWhereInput[]
    packageId?: StringFilter<"PackageItem"> | string
    serviceId?: StringFilter<"PackageItem"> | string
    sessionCount?: IntFilter<"PackageItem"> | number
    completedCount?: IntFilter<"PackageItem"> | number
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
  }, "id" | "packageId_serviceId">

  export type PackageItemOrderByWithAggregationInput = {
    id?: SortOrder
    packageId?: SortOrder
    serviceId?: SortOrder
    sessionCount?: SortOrder
    completedCount?: SortOrder
    _count?: PackageItemCountOrderByAggregateInput
    _avg?: PackageItemAvgOrderByAggregateInput
    _max?: PackageItemMaxOrderByAggregateInput
    _min?: PackageItemMinOrderByAggregateInput
    _sum?: PackageItemSumOrderByAggregateInput
  }

  export type PackageItemScalarWhereWithAggregatesInput = {
    AND?: PackageItemScalarWhereWithAggregatesInput | PackageItemScalarWhereWithAggregatesInput[]
    OR?: PackageItemScalarWhereWithAggregatesInput[]
    NOT?: PackageItemScalarWhereWithAggregatesInput | PackageItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PackageItem"> | string
    packageId?: StringWithAggregatesFilter<"PackageItem"> | string
    serviceId?: StringWithAggregatesFilter<"PackageItem"> | string
    sessionCount?: IntWithAggregatesFilter<"PackageItem"> | number
    completedCount?: IntWithAggregatesFilter<"PackageItem"> | number
  }

  export type AppointmentWhereInput = {
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    id?: StringFilter<"Appointment"> | string
    patientId?: StringFilter<"Appointment"> | string
    packageId?: StringNullableFilter<"Appointment"> | string | null
    serviceId?: StringFilter<"Appointment"> | string
    staffId?: StringFilter<"Appointment"> | string
    roomId?: StringFilter<"Appointment"> | string
    scheduledDate?: DateTimeFilter<"Appointment"> | Date | string
    startTime?: StringFilter<"Appointment"> | string
    endTime?: StringFilter<"Appointment"> | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    hasConflict?: BoolFilter<"Appointment"> | boolean
    conflictReason?: StringNullableFilter<"Appointment"> | string | null
    isVisible?: BoolFilter<"Appointment"> | boolean
    createdById?: StringFilter<"Appointment"> | string
    modifiedById?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    package?: XOR<PackageNullableScalarRelationFilter, PackageWhereInput> | null
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    patientHistory?: PatientHistoryListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrderInput | SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    roomId?: SortOrder
    scheduledDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    hasConflict?: SortOrder
    conflictReason?: SortOrderInput | SortOrder
    isVisible?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    modifiedBy?: UserOrderByWithRelationInput
    patient?: PatientOrderByWithRelationInput
    package?: PackageOrderByWithRelationInput
    service?: ServiceOrderByWithRelationInput
    staff?: UserOrderByWithRelationInput
    room?: RoomOrderByWithRelationInput
    patientHistory?: PatientHistoryOrderByRelationAggregateInput
  }

  export type AppointmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AppointmentWhereInput | AppointmentWhereInput[]
    OR?: AppointmentWhereInput[]
    NOT?: AppointmentWhereInput | AppointmentWhereInput[]
    patientId?: StringFilter<"Appointment"> | string
    packageId?: StringNullableFilter<"Appointment"> | string | null
    serviceId?: StringFilter<"Appointment"> | string
    staffId?: StringFilter<"Appointment"> | string
    roomId?: StringFilter<"Appointment"> | string
    scheduledDate?: DateTimeFilter<"Appointment"> | Date | string
    startTime?: StringFilter<"Appointment"> | string
    endTime?: StringFilter<"Appointment"> | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    hasConflict?: BoolFilter<"Appointment"> | boolean
    conflictReason?: StringNullableFilter<"Appointment"> | string | null
    isVisible?: BoolFilter<"Appointment"> | boolean
    createdById?: StringFilter<"Appointment"> | string
    modifiedById?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    modifiedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    package?: XOR<PackageNullableScalarRelationFilter, PackageWhereInput> | null
    service?: XOR<ServiceScalarRelationFilter, ServiceWhereInput>
    staff?: XOR<UserScalarRelationFilter, UserWhereInput>
    room?: XOR<RoomScalarRelationFilter, RoomWhereInput>
    patientHistory?: PatientHistoryListRelationFilter
  }, "id">

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrderInput | SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    roomId?: SortOrder
    scheduledDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    hasConflict?: SortOrder
    conflictReason?: SortOrderInput | SortOrder
    isVisible?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    OR?: AppointmentScalarWhereWithAggregatesInput[]
    NOT?: AppointmentScalarWhereWithAggregatesInput | AppointmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Appointment"> | string
    patientId?: StringWithAggregatesFilter<"Appointment"> | string
    packageId?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    serviceId?: StringWithAggregatesFilter<"Appointment"> | string
    staffId?: StringWithAggregatesFilter<"Appointment"> | string
    roomId?: StringWithAggregatesFilter<"Appointment"> | string
    scheduledDate?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    startTime?: StringWithAggregatesFilter<"Appointment"> | string
    endTime?: StringWithAggregatesFilter<"Appointment"> | string
    status?: EnumAppointmentStatusWithAggregatesFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    hasConflict?: BoolWithAggregatesFilter<"Appointment"> | boolean
    conflictReason?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    isVisible?: BoolWithAggregatesFilter<"Appointment"> | boolean
    createdById?: StringWithAggregatesFilter<"Appointment"> | string
    modifiedById?: StringNullableWithAggregatesFilter<"Appointment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Appointment"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    patientId?: StringFilter<"Payment"> | string
    packageId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paidSessionsCount?: IntNullableFilter<"Payment"> | number | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    paidAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    createdById?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    package?: XOR<PackageNullableScalarRelationFilter, PackageWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrderInput | SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paidSessionsCount?: SortOrderInput | SortOrder
    status?: SortOrder
    paidAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    patient?: PatientOrderByWithRelationInput
    package?: PackageOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    patientId?: StringFilter<"Payment"> | string
    packageId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paidSessionsCount?: IntNullableFilter<"Payment"> | number | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    paidAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    createdById?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    package?: XOR<PackageNullableScalarRelationFilter, PackageWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrderInput | SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paidSessionsCount?: SortOrderInput | SortOrder
    status?: SortOrder
    paidAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    patientId?: StringWithAggregatesFilter<"Payment"> | string
    packageId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    amount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodWithAggregatesFilter<"Payment"> | $Enums.PaymentMethod
    paidSessionsCount?: IntNullableWithAggregatesFilter<"Payment"> | number | null
    status?: EnumPaymentStatusWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus
    paidAt?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdById?: StringWithAggregatesFilter<"Payment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: EnumAuditActionFilter<"AuditLog"> | $Enums.AuditAction
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringFilter<"AuditLog"> | string
    action?: EnumAuditActionFilter<"AuditLog"> | $Enums.AuditAction
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringWithAggregatesFilter<"AuditLog"> | string
    action?: EnumAuditActionWithAggregatesFilter<"AuditLog"> | $Enums.AuditAction
    tableName?: StringWithAggregatesFilter<"AuditLog"> | string
    recordId?: StringWithAggregatesFilter<"AuditLog"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    description?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    sessionToken?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    sessionToken?: StringWithAggregatesFilter<"UserSession"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    isActive?: BoolWithAggregatesFilter<"UserSession"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type SystemSettingWhereInput = {
    AND?: SystemSettingWhereInput | SystemSettingWhereInput[]
    OR?: SystemSettingWhereInput[]
    NOT?: SystemSettingWhereInput | SystemSettingWhereInput[]
    id?: StringFilter<"SystemSetting"> | string
    key?: StringFilter<"SystemSetting"> | string
    value?: StringFilter<"SystemSetting"> | string
    description?: StringNullableFilter<"SystemSetting"> | string | null
    isPublic?: BoolFilter<"SystemSetting"> | boolean
    createdAt?: DateTimeFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSetting"> | Date | string
  }

  export type SystemSettingOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemSettingWhereInput | SystemSettingWhereInput[]
    OR?: SystemSettingWhereInput[]
    NOT?: SystemSettingWhereInput | SystemSettingWhereInput[]
    value?: StringFilter<"SystemSetting"> | string
    description?: StringNullableFilter<"SystemSetting"> | string | null
    isPublic?: BoolFilter<"SystemSetting"> | boolean
    createdAt?: DateTimeFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSetting"> | Date | string
  }, "id" | "key">

  export type SystemSettingOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrderInput | SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemSettingCountOrderByAggregateInput
    _max?: SystemSettingMaxOrderByAggregateInput
    _min?: SystemSettingMinOrderByAggregateInput
  }

  export type SystemSettingScalarWhereWithAggregatesInput = {
    AND?: SystemSettingScalarWhereWithAggregatesInput | SystemSettingScalarWhereWithAggregatesInput[]
    OR?: SystemSettingScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingScalarWhereWithAggregatesInput | SystemSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemSetting"> | string
    key?: StringWithAggregatesFilter<"SystemSetting"> | string
    value?: StringWithAggregatesFilter<"SystemSetting"> | string
    description?: StringNullableWithAggregatesFilter<"SystemSetting"> | string | null
    isPublic?: BoolWithAggregatesFilter<"SystemSetting"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSetting"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    scheduledFor?: DateTimeNullableFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    scheduledFor?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    scheduledFor?: DateTimeNullableFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    scheduledFor?: SortOrderInput | SortOrder
    sentAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    scheduledFor?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type CalendarSettingWhereInput = {
    AND?: CalendarSettingWhereInput | CalendarSettingWhereInput[]
    OR?: CalendarSettingWhereInput[]
    NOT?: CalendarSettingWhereInput | CalendarSettingWhereInput[]
    id?: StringFilter<"CalendarSetting"> | string
    userId?: StringNullableFilter<"CalendarSetting"> | string | null
    workingHoursStart?: StringFilter<"CalendarSetting"> | string
    workingHoursEnd?: StringFilter<"CalendarSetting"> | string
    timeSlotInterval?: IntFilter<"CalendarSetting"> | number
    showWeekends?: BoolFilter<"CalendarSetting"> | boolean
    defaultView?: StringFilter<"CalendarSetting"> | string
    showStaffAvailability?: BoolFilter<"CalendarSetting"> | boolean
    showRoomInfo?: BoolFilter<"CalendarSetting"> | boolean
    autoRefreshInterval?: IntFilter<"CalendarSetting"> | number
    createdAt?: DateTimeFilter<"CalendarSetting"> | Date | string
    updatedAt?: DateTimeFilter<"CalendarSetting"> | Date | string
  }

  export type CalendarSettingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timeSlotInterval?: SortOrder
    showWeekends?: SortOrder
    defaultView?: SortOrder
    showStaffAvailability?: SortOrder
    showRoomInfo?: SortOrder
    autoRefreshInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalendarSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: CalendarSettingWhereInput | CalendarSettingWhereInput[]
    OR?: CalendarSettingWhereInput[]
    NOT?: CalendarSettingWhereInput | CalendarSettingWhereInput[]
    workingHoursStart?: StringFilter<"CalendarSetting"> | string
    workingHoursEnd?: StringFilter<"CalendarSetting"> | string
    timeSlotInterval?: IntFilter<"CalendarSetting"> | number
    showWeekends?: BoolFilter<"CalendarSetting"> | boolean
    defaultView?: StringFilter<"CalendarSetting"> | string
    showStaffAvailability?: BoolFilter<"CalendarSetting"> | boolean
    showRoomInfo?: BoolFilter<"CalendarSetting"> | boolean
    autoRefreshInterval?: IntFilter<"CalendarSetting"> | number
    createdAt?: DateTimeFilter<"CalendarSetting"> | Date | string
    updatedAt?: DateTimeFilter<"CalendarSetting"> | Date | string
  }, "id" | "userId">

  export type CalendarSettingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timeSlotInterval?: SortOrder
    showWeekends?: SortOrder
    defaultView?: SortOrder
    showStaffAvailability?: SortOrder
    showRoomInfo?: SortOrder
    autoRefreshInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CalendarSettingCountOrderByAggregateInput
    _avg?: CalendarSettingAvgOrderByAggregateInput
    _max?: CalendarSettingMaxOrderByAggregateInput
    _min?: CalendarSettingMinOrderByAggregateInput
    _sum?: CalendarSettingSumOrderByAggregateInput
  }

  export type CalendarSettingScalarWhereWithAggregatesInput = {
    AND?: CalendarSettingScalarWhereWithAggregatesInput | CalendarSettingScalarWhereWithAggregatesInput[]
    OR?: CalendarSettingScalarWhereWithAggregatesInput[]
    NOT?: CalendarSettingScalarWhereWithAggregatesInput | CalendarSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CalendarSetting"> | string
    userId?: StringNullableWithAggregatesFilter<"CalendarSetting"> | string | null
    workingHoursStart?: StringWithAggregatesFilter<"CalendarSetting"> | string
    workingHoursEnd?: StringWithAggregatesFilter<"CalendarSetting"> | string
    timeSlotInterval?: IntWithAggregatesFilter<"CalendarSetting"> | number
    showWeekends?: BoolWithAggregatesFilter<"CalendarSetting"> | boolean
    defaultView?: StringWithAggregatesFilter<"CalendarSetting"> | string
    showStaffAvailability?: BoolWithAggregatesFilter<"CalendarSetting"> | boolean
    showRoomInfo?: BoolWithAggregatesFilter<"CalendarSetting"> | boolean
    autoRefreshInterval?: IntWithAggregatesFilter<"CalendarSetting"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CalendarSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CalendarSetting"> | Date | string
  }

  export type ConsentRecordWhereInput = {
    AND?: ConsentRecordWhereInput | ConsentRecordWhereInput[]
    OR?: ConsentRecordWhereInput[]
    NOT?: ConsentRecordWhereInput | ConsentRecordWhereInput[]
    id?: StringFilter<"ConsentRecord"> | string
    userId?: StringNullableFilter<"ConsentRecord"> | string | null
    consentType?: EnumConsentTypeFilter<"ConsentRecord"> | $Enums.ConsentType
    granted?: BoolFilter<"ConsentRecord"> | boolean
    ipAddress?: StringNullableFilter<"ConsentRecord"> | string | null
    userAgent?: StringNullableFilter<"ConsentRecord"> | string | null
    consentString?: StringNullableFilter<"ConsentRecord"> | string | null
    expiresAt?: DateTimeNullableFilter<"ConsentRecord"> | Date | string | null
    withdrawnAt?: DateTimeNullableFilter<"ConsentRecord"> | Date | string | null
    createdAt?: DateTimeFilter<"ConsentRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ConsentRecord"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ConsentRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    consentString?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    withdrawnAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ConsentRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ConsentRecordWhereInput | ConsentRecordWhereInput[]
    OR?: ConsentRecordWhereInput[]
    NOT?: ConsentRecordWhereInput | ConsentRecordWhereInput[]
    userId?: StringNullableFilter<"ConsentRecord"> | string | null
    consentType?: EnumConsentTypeFilter<"ConsentRecord"> | $Enums.ConsentType
    granted?: BoolFilter<"ConsentRecord"> | boolean
    ipAddress?: StringNullableFilter<"ConsentRecord"> | string | null
    userAgent?: StringNullableFilter<"ConsentRecord"> | string | null
    consentString?: StringNullableFilter<"ConsentRecord"> | string | null
    expiresAt?: DateTimeNullableFilter<"ConsentRecord"> | Date | string | null
    withdrawnAt?: DateTimeNullableFilter<"ConsentRecord"> | Date | string | null
    createdAt?: DateTimeFilter<"ConsentRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ConsentRecord"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ConsentRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    consentString?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    withdrawnAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ConsentRecordCountOrderByAggregateInput
    _max?: ConsentRecordMaxOrderByAggregateInput
    _min?: ConsentRecordMinOrderByAggregateInput
  }

  export type ConsentRecordScalarWhereWithAggregatesInput = {
    AND?: ConsentRecordScalarWhereWithAggregatesInput | ConsentRecordScalarWhereWithAggregatesInput[]
    OR?: ConsentRecordScalarWhereWithAggregatesInput[]
    NOT?: ConsentRecordScalarWhereWithAggregatesInput | ConsentRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ConsentRecord"> | string
    userId?: StringNullableWithAggregatesFilter<"ConsentRecord"> | string | null
    consentType?: EnumConsentTypeWithAggregatesFilter<"ConsentRecord"> | $Enums.ConsentType
    granted?: BoolWithAggregatesFilter<"ConsentRecord"> | boolean
    ipAddress?: StringNullableWithAggregatesFilter<"ConsentRecord"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"ConsentRecord"> | string | null
    consentString?: StringNullableWithAggregatesFilter<"ConsentRecord"> | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ConsentRecord"> | Date | string | null
    withdrawnAt?: DateTimeNullableWithAggregatesFilter<"ConsentRecord"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ConsentRecord"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ConsentRecord"> | Date | string
  }

  export type DataExportRequestWhereInput = {
    AND?: DataExportRequestWhereInput | DataExportRequestWhereInput[]
    OR?: DataExportRequestWhereInput[]
    NOT?: DataExportRequestWhereInput | DataExportRequestWhereInput[]
    id?: StringFilter<"DataExportRequest"> | string
    userId?: StringFilter<"DataExportRequest"> | string
    requestType?: EnumDataRequestTypeFilter<"DataExportRequest"> | $Enums.DataRequestType
    status?: EnumDataRequestStatusFilter<"DataExportRequest"> | $Enums.DataRequestStatus
    requestedData?: StringNullableListFilter<"DataExportRequest">
    filePath?: StringNullableFilter<"DataExportRequest"> | string | null
    downloadedAt?: DateTimeNullableFilter<"DataExportRequest"> | Date | string | null
    expiresAt?: DateTimeFilter<"DataExportRequest"> | Date | string
    notes?: StringNullableFilter<"DataExportRequest"> | string | null
    createdAt?: DateTimeFilter<"DataExportRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataExportRequest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DataExportRequestOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    requestedData?: SortOrder
    filePath?: SortOrderInput | SortOrder
    downloadedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type DataExportRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DataExportRequestWhereInput | DataExportRequestWhereInput[]
    OR?: DataExportRequestWhereInput[]
    NOT?: DataExportRequestWhereInput | DataExportRequestWhereInput[]
    userId?: StringFilter<"DataExportRequest"> | string
    requestType?: EnumDataRequestTypeFilter<"DataExportRequest"> | $Enums.DataRequestType
    status?: EnumDataRequestStatusFilter<"DataExportRequest"> | $Enums.DataRequestStatus
    requestedData?: StringNullableListFilter<"DataExportRequest">
    filePath?: StringNullableFilter<"DataExportRequest"> | string | null
    downloadedAt?: DateTimeNullableFilter<"DataExportRequest"> | Date | string | null
    expiresAt?: DateTimeFilter<"DataExportRequest"> | Date | string
    notes?: StringNullableFilter<"DataExportRequest"> | string | null
    createdAt?: DateTimeFilter<"DataExportRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataExportRequest"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type DataExportRequestOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    requestedData?: SortOrder
    filePath?: SortOrderInput | SortOrder
    downloadedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DataExportRequestCountOrderByAggregateInput
    _max?: DataExportRequestMaxOrderByAggregateInput
    _min?: DataExportRequestMinOrderByAggregateInput
  }

  export type DataExportRequestScalarWhereWithAggregatesInput = {
    AND?: DataExportRequestScalarWhereWithAggregatesInput | DataExportRequestScalarWhereWithAggregatesInput[]
    OR?: DataExportRequestScalarWhereWithAggregatesInput[]
    NOT?: DataExportRequestScalarWhereWithAggregatesInput | DataExportRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DataExportRequest"> | string
    userId?: StringWithAggregatesFilter<"DataExportRequest"> | string
    requestType?: EnumDataRequestTypeWithAggregatesFilter<"DataExportRequest"> | $Enums.DataRequestType
    status?: EnumDataRequestStatusWithAggregatesFilter<"DataExportRequest"> | $Enums.DataRequestStatus
    requestedData?: StringNullableListFilter<"DataExportRequest">
    filePath?: StringNullableWithAggregatesFilter<"DataExportRequest"> | string | null
    downloadedAt?: DateTimeNullableWithAggregatesFilter<"DataExportRequest"> | Date | string | null
    expiresAt?: DateTimeWithAggregatesFilter<"DataExportRequest"> | Date | string
    notes?: StringNullableWithAggregatesFilter<"DataExportRequest"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"DataExportRequest"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DataExportRequest"> | Date | string
  }

  export type GDPRAuditLogWhereInput = {
    AND?: GDPRAuditLogWhereInput | GDPRAuditLogWhereInput[]
    OR?: GDPRAuditLogWhereInput[]
    NOT?: GDPRAuditLogWhereInput | GDPRAuditLogWhereInput[]
    id?: StringFilter<"GDPRAuditLog"> | string
    userId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    action?: EnumGDPRActionFilter<"GDPRAuditLog"> | $Enums.GDPRAction
    dataType?: StringFilter<"GDPRAuditLog"> | string
    recordId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    legalBasis?: StringNullableFilter<"GDPRAuditLog"> | string | null
    purpose?: StringFilter<"GDPRAuditLog"> | string
    ipAddress?: StringNullableFilter<"GDPRAuditLog"> | string | null
    userAgent?: StringNullableFilter<"GDPRAuditLog"> | string | null
    consentId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    automated?: BoolFilter<"GDPRAuditLog"> | boolean
    createdAt?: DateTimeFilter<"GDPRAuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type GDPRAuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    dataType?: SortOrder
    recordId?: SortOrderInput | SortOrder
    legalBasis?: SortOrderInput | SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    consentId?: SortOrderInput | SortOrder
    automated?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type GDPRAuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GDPRAuditLogWhereInput | GDPRAuditLogWhereInput[]
    OR?: GDPRAuditLogWhereInput[]
    NOT?: GDPRAuditLogWhereInput | GDPRAuditLogWhereInput[]
    userId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    action?: EnumGDPRActionFilter<"GDPRAuditLog"> | $Enums.GDPRAction
    dataType?: StringFilter<"GDPRAuditLog"> | string
    recordId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    legalBasis?: StringNullableFilter<"GDPRAuditLog"> | string | null
    purpose?: StringFilter<"GDPRAuditLog"> | string
    ipAddress?: StringNullableFilter<"GDPRAuditLog"> | string | null
    userAgent?: StringNullableFilter<"GDPRAuditLog"> | string | null
    consentId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    automated?: BoolFilter<"GDPRAuditLog"> | boolean
    createdAt?: DateTimeFilter<"GDPRAuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type GDPRAuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    dataType?: SortOrder
    recordId?: SortOrderInput | SortOrder
    legalBasis?: SortOrderInput | SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    consentId?: SortOrderInput | SortOrder
    automated?: SortOrder
    createdAt?: SortOrder
    _count?: GDPRAuditLogCountOrderByAggregateInput
    _max?: GDPRAuditLogMaxOrderByAggregateInput
    _min?: GDPRAuditLogMinOrderByAggregateInput
  }

  export type GDPRAuditLogScalarWhereWithAggregatesInput = {
    AND?: GDPRAuditLogScalarWhereWithAggregatesInput | GDPRAuditLogScalarWhereWithAggregatesInput[]
    OR?: GDPRAuditLogScalarWhereWithAggregatesInput[]
    NOT?: GDPRAuditLogScalarWhereWithAggregatesInput | GDPRAuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GDPRAuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"GDPRAuditLog"> | string | null
    action?: EnumGDPRActionWithAggregatesFilter<"GDPRAuditLog"> | $Enums.GDPRAction
    dataType?: StringWithAggregatesFilter<"GDPRAuditLog"> | string
    recordId?: StringNullableWithAggregatesFilter<"GDPRAuditLog"> | string | null
    legalBasis?: StringNullableWithAggregatesFilter<"GDPRAuditLog"> | string | null
    purpose?: StringWithAggregatesFilter<"GDPRAuditLog"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"GDPRAuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"GDPRAuditLog"> | string | null
    consentId?: StringNullableWithAggregatesFilter<"GDPRAuditLog"> | string | null
    automated?: BoolWithAggregatesFilter<"GDPRAuditLog"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"GDPRAuditLog"> | Date | string
  }

  export type DataRetentionPolicyWhereInput = {
    AND?: DataRetentionPolicyWhereInput | DataRetentionPolicyWhereInput[]
    OR?: DataRetentionPolicyWhereInput[]
    NOT?: DataRetentionPolicyWhereInput | DataRetentionPolicyWhereInput[]
    id?: StringFilter<"DataRetentionPolicy"> | string
    dataType?: StringFilter<"DataRetentionPolicy"> | string
    retentionPeriod?: IntFilter<"DataRetentionPolicy"> | number
    description?: StringNullableFilter<"DataRetentionPolicy"> | string | null
    legalBasis?: StringFilter<"DataRetentionPolicy"> | string
    autoDelete?: BoolFilter<"DataRetentionPolicy"> | boolean
    createdAt?: DateTimeFilter<"DataRetentionPolicy"> | Date | string
    updatedAt?: DateTimeFilter<"DataRetentionPolicy"> | Date | string
  }

  export type DataRetentionPolicyOrderByWithRelationInput = {
    id?: SortOrder
    dataType?: SortOrder
    retentionPeriod?: SortOrder
    description?: SortOrderInput | SortOrder
    legalBasis?: SortOrder
    autoDelete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataRetentionPolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    dataType?: string
    AND?: DataRetentionPolicyWhereInput | DataRetentionPolicyWhereInput[]
    OR?: DataRetentionPolicyWhereInput[]
    NOT?: DataRetentionPolicyWhereInput | DataRetentionPolicyWhereInput[]
    retentionPeriod?: IntFilter<"DataRetentionPolicy"> | number
    description?: StringNullableFilter<"DataRetentionPolicy"> | string | null
    legalBasis?: StringFilter<"DataRetentionPolicy"> | string
    autoDelete?: BoolFilter<"DataRetentionPolicy"> | boolean
    createdAt?: DateTimeFilter<"DataRetentionPolicy"> | Date | string
    updatedAt?: DateTimeFilter<"DataRetentionPolicy"> | Date | string
  }, "id" | "dataType">

  export type DataRetentionPolicyOrderByWithAggregationInput = {
    id?: SortOrder
    dataType?: SortOrder
    retentionPeriod?: SortOrder
    description?: SortOrderInput | SortOrder
    legalBasis?: SortOrder
    autoDelete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DataRetentionPolicyCountOrderByAggregateInput
    _avg?: DataRetentionPolicyAvgOrderByAggregateInput
    _max?: DataRetentionPolicyMaxOrderByAggregateInput
    _min?: DataRetentionPolicyMinOrderByAggregateInput
    _sum?: DataRetentionPolicySumOrderByAggregateInput
  }

  export type DataRetentionPolicyScalarWhereWithAggregatesInput = {
    AND?: DataRetentionPolicyScalarWhereWithAggregatesInput | DataRetentionPolicyScalarWhereWithAggregatesInput[]
    OR?: DataRetentionPolicyScalarWhereWithAggregatesInput[]
    NOT?: DataRetentionPolicyScalarWhereWithAggregatesInput | DataRetentionPolicyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DataRetentionPolicy"> | string
    dataType?: StringWithAggregatesFilter<"DataRetentionPolicy"> | string
    retentionPeriod?: IntWithAggregatesFilter<"DataRetentionPolicy"> | number
    description?: StringNullableWithAggregatesFilter<"DataRetentionPolicy"> | string | null
    legalBasis?: StringWithAggregatesFilter<"DataRetentionPolicy"> | string
    autoDelete?: BoolWithAggregatesFilter<"DataRetentionPolicy"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DataRetentionPolicy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DataRetentionPolicy"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
  }

  export type StaffScheduleCreateInput = {
    id?: string
    dayOfWeek: number
    startTime: string
    endTime: string
    breakStartTime?: string | null
    breakEndTime?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: UserCreateNestedOneWithoutStaffSchedulesInput
  }

  export type StaffScheduleUncheckedCreateInput = {
    id?: string
    staffId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    breakStartTime?: string | null
    breakEndTime?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    breakStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: UserUpdateOneRequiredWithoutStaffSchedulesNestedInput
  }

  export type StaffScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    breakStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffScheduleCreateManyInput = {
    id?: string
    staffId: string
    dayOfWeek: number
    startTime: string
    endTime: string
    breakStartTime?: string | null
    breakEndTime?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    breakStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    breakStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffLeaveCreateInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    staff: UserCreateNestedOneWithoutStaffLeavesInput
  }

  export type StaffLeaveUncheckedCreateInput = {
    id?: string
    staffId: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffLeaveUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: UserUpdateOneRequiredWithoutStaffLeavesNestedInput
  }

  export type StaffLeaveUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffLeaveCreateManyInput = {
    id?: string
    staffId: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffLeaveUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffLeaveUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomCreateInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutRoomsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutRoomsModifiedInput
    appointments?: AppointmentCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutRoomsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutRoomsModifiedNestedInput
    appointments?: AppointmentUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceCreateInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutServicesCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutServicesModifiedInput
    packageItems?: PackageItemCreateNestedManyWithoutServiceInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutServiceInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutServicesCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutServicesModifiedNestedInput
    packageItems?: PackageItemUpdateManyWithoutServiceNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutServiceNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientsModifiedInput
    packages?: PackageCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientsModifiedNestedInput
    packages?: PackageUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryCreateInput = {
    id?: string
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientHistoryCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientHistoryModifiedInput
    patient: PatientCreateNestedOneWithoutPatientHistoryInput
    package?: PackageCreateNestedOneWithoutPatientHistoryInput
    appointment?: AppointmentCreateNestedOneWithoutPatientHistoryInput
  }

  export type PatientHistoryUncheckedCreateInput = {
    id?: string
    patientId: string
    packageId?: string | null
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientHistoryCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientHistoryModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutPatientHistoryNestedInput
    package?: PackageUpdateOneWithoutPatientHistoryNestedInput
    appointment?: AppointmentUpdateOneWithoutPatientHistoryNestedInput
  }

  export type PatientHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryCreateManyInput = {
    id?: string
    patientId: string
    packageId?: string | null
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageCreateInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPackagesInput
    createdBy: UserCreateNestedOneWithoutCreatedPackagesInput
    packageItems?: PackageItemCreateNestedManyWithoutPackageInput
    appointments?: AppointmentCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPackageInput
    payments?: PaymentCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateInput = {
    id?: string
    patientId: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutPackageInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPackageInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPackagesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPackagesNestedInput
    packageItems?: PackageItemUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPackageNestedInput
    payments?: PaymentUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPackageNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyInput = {
    id?: string
    patientId: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageItemCreateInput = {
    id?: string
    sessionCount: number
    completedCount?: number
    package: PackageCreateNestedOneWithoutPackageItemsInput
    service: ServiceCreateNestedOneWithoutPackageItemsInput
  }

  export type PackageItemUncheckedCreateInput = {
    id?: string
    packageId: string
    serviceId: string
    sessionCount: number
    completedCount?: number
  }

  export type PackageItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
    package?: PackageUpdateOneRequiredWithoutPackageItemsNestedInput
    service?: ServiceUpdateOneRequiredWithoutPackageItemsNestedInput
  }

  export type PackageItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
  }

  export type PackageItemCreateManyInput = {
    id?: string
    packageId: string
    serviceId: string
    sessionCount: number
    completedCount?: number
  }

  export type PackageItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
  }

  export type PackageItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentCreateInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutAppointmentsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutAppointmentsModifiedInput
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    package?: PackageCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutAppointmentsModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    package?: PackageUpdateOneWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPaymentsInput
    package?: PackageCreateNestedOneWithoutPaymentsInput
    createdBy: UserCreateNestedOneWithoutCreatedPaymentsInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    patientId: string
    packageId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
    package?: PackageUpdateOneWithoutPaymentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyInput = {
    id?: string
    patientId: string
    packageId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: $Enums.AuditAction
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId: string
    action: $Enums.AuditAction
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId: string
    action: $Enums.AuditAction
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateInput = {
    id?: string
    sessionToken: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    sessionToken: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    sessionToken: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingCreateInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingCreateManyInput = {
    id?: string
    key: string
    value: string
    description?: string | null
    isPublic?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isPublic?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId?: string | null
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId?: string | null
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarSettingCreateInput = {
    id?: string
    userId?: string | null
    workingHoursStart?: string
    workingHoursEnd?: string
    timeSlotInterval?: number
    showWeekends?: boolean
    defaultView?: string
    showStaffAvailability?: boolean
    showRoomInfo?: boolean
    autoRefreshInterval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarSettingUncheckedCreateInput = {
    id?: string
    userId?: string | null
    workingHoursStart?: string
    workingHoursEnd?: string
    timeSlotInterval?: number
    showWeekends?: boolean
    defaultView?: string
    showStaffAvailability?: boolean
    showRoomInfo?: boolean
    autoRefreshInterval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timeSlotInterval?: IntFieldUpdateOperationsInput | number
    showWeekends?: BoolFieldUpdateOperationsInput | boolean
    defaultView?: StringFieldUpdateOperationsInput | string
    showStaffAvailability?: BoolFieldUpdateOperationsInput | boolean
    showRoomInfo?: BoolFieldUpdateOperationsInput | boolean
    autoRefreshInterval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timeSlotInterval?: IntFieldUpdateOperationsInput | number
    showWeekends?: BoolFieldUpdateOperationsInput | boolean
    defaultView?: StringFieldUpdateOperationsInput | string
    showStaffAvailability?: BoolFieldUpdateOperationsInput | boolean
    showRoomInfo?: BoolFieldUpdateOperationsInput | boolean
    autoRefreshInterval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarSettingCreateManyInput = {
    id?: string
    userId?: string | null
    workingHoursStart?: string
    workingHoursEnd?: string
    timeSlotInterval?: number
    showWeekends?: boolean
    defaultView?: string
    showStaffAvailability?: boolean
    showRoomInfo?: boolean
    autoRefreshInterval?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CalendarSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timeSlotInterval?: IntFieldUpdateOperationsInput | number
    showWeekends?: BoolFieldUpdateOperationsInput | boolean
    defaultView?: StringFieldUpdateOperationsInput | string
    showStaffAvailability?: BoolFieldUpdateOperationsInput | boolean
    showRoomInfo?: BoolFieldUpdateOperationsInput | boolean
    autoRefreshInterval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CalendarSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    workingHoursStart?: StringFieldUpdateOperationsInput | string
    workingHoursEnd?: StringFieldUpdateOperationsInput | string
    timeSlotInterval?: IntFieldUpdateOperationsInput | number
    showWeekends?: BoolFieldUpdateOperationsInput | boolean
    defaultView?: StringFieldUpdateOperationsInput | string
    showStaffAvailability?: BoolFieldUpdateOperationsInput | boolean
    showRoomInfo?: BoolFieldUpdateOperationsInput | boolean
    autoRefreshInterval?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentRecordCreateInput = {
    id?: string
    consentType: $Enums.ConsentType
    granted?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    consentString?: string | null
    expiresAt?: Date | string | null
    withdrawnAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutConsentRecordsInput
  }

  export type ConsentRecordUncheckedCreateInput = {
    id?: string
    userId?: string | null
    consentType: $Enums.ConsentType
    granted?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    consentString?: string | null
    expiresAt?: Date | string | null
    withdrawnAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentRecordUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    consentType?: EnumConsentTypeFieldUpdateOperationsInput | $Enums.ConsentType
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentString?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    withdrawnAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutConsentRecordsNestedInput
  }

  export type ConsentRecordUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    consentType?: EnumConsentTypeFieldUpdateOperationsInput | $Enums.ConsentType
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentString?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    withdrawnAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentRecordCreateManyInput = {
    id?: string
    userId?: string | null
    consentType: $Enums.ConsentType
    granted?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    consentString?: string | null
    expiresAt?: Date | string | null
    withdrawnAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentRecordUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    consentType?: EnumConsentTypeFieldUpdateOperationsInput | $Enums.ConsentType
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentString?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    withdrawnAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentRecordUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    consentType?: EnumConsentTypeFieldUpdateOperationsInput | $Enums.ConsentType
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentString?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    withdrawnAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataExportRequestCreateInput = {
    id?: string
    requestType?: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestedData?: DataExportRequestCreaterequestedDataInput | string[]
    filePath?: string | null
    downloadedAt?: Date | string | null
    expiresAt: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutDataExportRequestsInput
  }

  export type DataExportRequestUncheckedCreateInput = {
    id?: string
    userId: string
    requestType?: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestedData?: DataExportRequestCreaterequestedDataInput | string[]
    filePath?: string | null
    downloadedAt?: Date | string | null
    expiresAt: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataExportRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestType?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestedData?: DataExportRequestUpdaterequestedDataInput | string[]
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    downloadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutDataExportRequestsNestedInput
  }

  export type DataExportRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    requestType?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestedData?: DataExportRequestUpdaterequestedDataInput | string[]
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    downloadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataExportRequestCreateManyInput = {
    id?: string
    userId: string
    requestType?: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestedData?: DataExportRequestCreaterequestedDataInput | string[]
    filePath?: string | null
    downloadedAt?: Date | string | null
    expiresAt: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataExportRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestType?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestedData?: DataExportRequestUpdaterequestedDataInput | string[]
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    downloadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataExportRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    requestType?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestedData?: DataExportRequestUpdaterequestedDataInput | string[]
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    downloadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GDPRAuditLogCreateInput = {
    id?: string
    action: $Enums.GDPRAction
    dataType: string
    recordId?: string | null
    legalBasis?: string | null
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    consentId?: string | null
    automated?: boolean
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutGdprAuditLogsInput
  }

  export type GDPRAuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    action: $Enums.GDPRAction
    dataType: string
    recordId?: string | null
    legalBasis?: string | null
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    consentId?: string | null
    automated?: boolean
    createdAt?: Date | string
  }

  export type GDPRAuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumGDPRActionFieldUpdateOperationsInput | $Enums.GDPRAction
    dataType?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentId?: NullableStringFieldUpdateOperationsInput | string | null
    automated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutGdprAuditLogsNestedInput
  }

  export type GDPRAuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumGDPRActionFieldUpdateOperationsInput | $Enums.GDPRAction
    dataType?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentId?: NullableStringFieldUpdateOperationsInput | string | null
    automated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GDPRAuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    action: $Enums.GDPRAction
    dataType: string
    recordId?: string | null
    legalBasis?: string | null
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    consentId?: string | null
    automated?: boolean
    createdAt?: Date | string
  }

  export type GDPRAuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumGDPRActionFieldUpdateOperationsInput | $Enums.GDPRAction
    dataType?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentId?: NullableStringFieldUpdateOperationsInput | string | null
    automated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GDPRAuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: EnumGDPRActionFieldUpdateOperationsInput | $Enums.GDPRAction
    dataType?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentId?: NullableStringFieldUpdateOperationsInput | string | null
    automated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRetentionPolicyCreateInput = {
    id?: string
    dataType: string
    retentionPeriod: number
    description?: string | null
    legalBasis: string
    autoDelete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataRetentionPolicyUncheckedCreateInput = {
    id?: string
    dataType: string
    retentionPeriod: number
    description?: string | null
    legalBasis: string
    autoDelete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataRetentionPolicyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    retentionPeriod?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: StringFieldUpdateOperationsInput | string
    autoDelete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRetentionPolicyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    retentionPeriod?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: StringFieldUpdateOperationsInput | string
    autoDelete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRetentionPolicyCreateManyInput = {
    id?: string
    dataType: string
    retentionPeriod: number
    description?: string | null
    legalBasis: string
    autoDelete?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataRetentionPolicyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    retentionPeriod?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: StringFieldUpdateOperationsInput | string
    autoDelete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataRetentionPolicyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    dataType?: StringFieldUpdateOperationsInput | string
    retentionPeriod?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: StringFieldUpdateOperationsInput | string
    autoDelete?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumStaffSpecializationNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StaffSpecialization | EnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    in?: $Enums.StaffSpecialization[] | ListEnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StaffSpecialization[] | ListEnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStaffSpecializationNullableFilter<$PrismaModel> | $Enums.StaffSpecialization | null
  }

  export type StaffScheduleListRelationFilter = {
    every?: StaffScheduleWhereInput
    some?: StaffScheduleWhereInput
    none?: StaffScheduleWhereInput
  }

  export type StaffLeaveListRelationFilter = {
    every?: StaffLeaveWhereInput
    some?: StaffLeaveWhereInput
    none?: StaffLeaveWhereInput
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type PackageListRelationFilter = {
    every?: PackageWhereInput
    some?: PackageWhereInput
    none?: PackageWhereInput
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type ServiceListRelationFilter = {
    every?: ServiceWhereInput
    some?: ServiceWhereInput
    none?: ServiceWhereInput
  }

  export type RoomListRelationFilter = {
    every?: RoomWhereInput
    some?: RoomWhereInput
    none?: RoomWhereInput
  }

  export type PatientHistoryListRelationFilter = {
    every?: PatientHistoryWhereInput
    some?: PatientHistoryWhereInput
    none?: PatientHistoryWhereInput
  }

  export type ConsentRecordListRelationFilter = {
    every?: ConsentRecordWhereInput
    some?: ConsentRecordWhereInput
    none?: ConsentRecordWhereInput
  }

  export type DataExportRequestListRelationFilter = {
    every?: DataExportRequestWhereInput
    some?: DataExportRequestWhereInput
    none?: DataExportRequestWhereInput
  }

  export type GDPRAuditLogListRelationFilter = {
    every?: GDPRAuditLogWhereInput
    some?: GDPRAuditLogWhereInput
    none?: GDPRAuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StaffScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StaffLeaveOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PackageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ConsentRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DataExportRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GDPRAuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    timezone?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
    mfaBackupCodes?: SortOrder
    mfaLastUsed?: SortOrder
    refreshToken?: SortOrder
    lastLoginAt?: SortOrder
    specialization?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    timezone?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
    mfaLastUsed?: SortOrder
    refreshToken?: SortOrder
    lastLoginAt?: SortOrder
    specialization?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    avatar?: SortOrder
    phone?: SortOrder
    timezone?: SortOrder
    resetPasswordToken?: SortOrder
    resetPasswordExpires?: SortOrder
    emailVerified?: SortOrder
    emailVerificationToken?: SortOrder
    mfaEnabled?: SortOrder
    mfaSecret?: SortOrder
    mfaLastUsed?: SortOrder
    refreshToken?: SortOrder
    lastLoginAt?: SortOrder
    specialization?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumStaffSpecializationNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StaffSpecialization | EnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    in?: $Enums.StaffSpecialization[] | ListEnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StaffSpecialization[] | ListEnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStaffSpecializationNullableWithAggregatesFilter<$PrismaModel> | $Enums.StaffSpecialization | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStaffSpecializationNullableFilter<$PrismaModel>
    _max?: NestedEnumStaffSpecializationNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StaffScheduleStaffIdDayOfWeekCompoundUniqueInput = {
    staffId: string
    dayOfWeek: number
  }

  export type StaffScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    breakStartTime?: SortOrder
    breakEndTime?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffScheduleAvgOrderByAggregateInput = {
    dayOfWeek?: SortOrder
  }

  export type StaffScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    breakStartTime?: SortOrder
    breakEndTime?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    dayOfWeek?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    breakStartTime?: SortOrder
    breakEndTime?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffScheduleSumOrderByAggregateInput = {
    dayOfWeek?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StaffLeaveCountOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffLeaveMaxOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StaffLeaveMinOrderByAggregateInput = {
    id?: SortOrder
    staffId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    reason?: SortOrder
    isApproved?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type RoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    features?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomAvgOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type RoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoomSumOrderByAggregateInput = {
    capacity?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type EnumServiceCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceCategory | EnumServiceCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceCategory[] | ListEnumServiceCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceCategory[] | ListEnumServiceCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceCategoryFilter<$PrismaModel> | $Enums.ServiceCategory
  }

  export type PackageItemListRelationFilter = {
    every?: PackageItemWhereInput
    some?: PackageItemWhereInput
    none?: PackageItemWhereInput
  }

  export type PackageItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ServiceCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    price?: SortOrder
    category?: SortOrder
    categoryColor?: SortOrder
    sessionCount?: SortOrder
    isForChildren?: SortOrder
    isVoucher?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceAvgOrderByAggregateInput = {
    duration?: SortOrder
    price?: SortOrder
    sessionCount?: SortOrder
  }

  export type ServiceMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    price?: SortOrder
    category?: SortOrder
    categoryColor?: SortOrder
    sessionCount?: SortOrder
    isForChildren?: SortOrder
    isVoucher?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    price?: SortOrder
    category?: SortOrder
    categoryColor?: SortOrder
    sessionCount?: SortOrder
    isForChildren?: SortOrder
    isVoucher?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ServiceSumOrderByAggregateInput = {
    duration?: SortOrder
    price?: SortOrder
    sessionCount?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumServiceCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceCategory | EnumServiceCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceCategory[] | ListEnumServiceCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceCategory[] | ListEnumServiceCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ServiceCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceCategoryFilter<$PrismaModel>
    _max?: NestedEnumServiceCategoryFilter<$PrismaModel>
  }

  export type EnumInsuranceTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.InsuranceType | EnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumInsuranceTypeNullableFilter<$PrismaModel> | $Enums.InsuranceType | null
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    socialInsuranceNumber?: SortOrder
    notes?: SortOrder
    doctorReferral?: SortOrder
    insuranceType?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    socialInsuranceNumber?: SortOrder
    notes?: SortOrder
    doctorReferral?: SortOrder
    insuranceType?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    socialInsuranceNumber?: SortOrder
    notes?: SortOrder
    doctorReferral?: SortOrder
    insuranceType?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumInsuranceTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InsuranceType | EnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumInsuranceTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.InsuranceType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumInsuranceTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumInsuranceTypeNullableFilter<$PrismaModel>
  }

  export type PatientScalarRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type PackageNullableScalarRelationFilter = {
    is?: PackageWhereInput | null
    isNot?: PackageWhereInput | null
  }

  export type AppointmentNullableScalarRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type PatientHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    appointmentId?: SortOrder
    mainSubjectiveProblem?: SortOrder
    symptomHistory?: SortOrder
    previousCourseAndTherapy?: SortOrder
    patientGoals?: SortOrder
    activityStatus?: SortOrder
    trunkAndHeadParticularities?: SortOrder
    edemaTrophicsAtrophies?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    recordedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    appointmentId?: SortOrder
    mainSubjectiveProblem?: SortOrder
    symptomHistory?: SortOrder
    previousCourseAndTherapy?: SortOrder
    patientGoals?: SortOrder
    activityStatus?: SortOrder
    trunkAndHeadParticularities?: SortOrder
    edemaTrophicsAtrophies?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    recordedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PatientHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    appointmentId?: SortOrder
    mainSubjectiveProblem?: SortOrder
    symptomHistory?: SortOrder
    previousCourseAndTherapy?: SortOrder
    patientGoals?: SortOrder
    activityStatus?: SortOrder
    trunkAndHeadParticularities?: SortOrder
    edemaTrophicsAtrophies?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    recordedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumPackageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PackageStatus | EnumPackageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PackageStatus[] | ListEnumPackageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackageStatus[] | ListEnumPackageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPackageStatusFilter<$PrismaModel> | $Enums.PackageStatus
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PackageCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    totalPrice?: SortOrder
    discountAmount?: SortOrder
    finalPrice?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageAvgOrderByAggregateInput = {
    totalPrice?: SortOrder
    discountAmount?: SortOrder
    finalPrice?: SortOrder
  }

  export type PackageMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    totalPrice?: SortOrder
    discountAmount?: SortOrder
    finalPrice?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    totalPrice?: SortOrder
    discountAmount?: SortOrder
    finalPrice?: SortOrder
    status?: SortOrder
    paymentStatus?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PackageSumOrderByAggregateInput = {
    totalPrice?: SortOrder
    discountAmount?: SortOrder
    finalPrice?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumPackageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackageStatus | EnumPackageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PackageStatus[] | ListEnumPackageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackageStatus[] | ListEnumPackageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPackageStatusWithAggregatesFilter<$PrismaModel> | $Enums.PackageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackageStatusFilter<$PrismaModel>
    _max?: NestedEnumPackageStatusFilter<$PrismaModel>
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type PackageScalarRelationFilter = {
    is?: PackageWhereInput
    isNot?: PackageWhereInput
  }

  export type ServiceScalarRelationFilter = {
    is?: ServiceWhereInput
    isNot?: ServiceWhereInput
  }

  export type PackageItemPackageIdServiceIdCompoundUniqueInput = {
    packageId: string
    serviceId: string
  }

  export type PackageItemCountOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    serviceId?: SortOrder
    sessionCount?: SortOrder
    completedCount?: SortOrder
  }

  export type PackageItemAvgOrderByAggregateInput = {
    sessionCount?: SortOrder
    completedCount?: SortOrder
  }

  export type PackageItemMaxOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    serviceId?: SortOrder
    sessionCount?: SortOrder
    completedCount?: SortOrder
  }

  export type PackageItemMinOrderByAggregateInput = {
    id?: SortOrder
    packageId?: SortOrder
    serviceId?: SortOrder
    sessionCount?: SortOrder
    completedCount?: SortOrder
  }

  export type PackageItemSumOrderByAggregateInput = {
    sessionCount?: SortOrder
    completedCount?: SortOrder
  }

  export type EnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type RoomScalarRelationFilter = {
    is?: RoomWhereInput
    isNot?: RoomWhereInput
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    roomId?: SortOrder
    scheduledDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    hasConflict?: SortOrder
    conflictReason?: SortOrder
    isVisible?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    roomId?: SortOrder
    scheduledDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    hasConflict?: SortOrder
    conflictReason?: SortOrder
    isVisible?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    serviceId?: SortOrder
    staffId?: SortOrder
    roomId?: SortOrder
    scheduledDate?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    hasConflict?: SortOrder
    conflictReason?: SortOrder
    isVisible?: SortOrder
    createdById?: SortOrder
    modifiedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paidSessionsCount?: SortOrder
    status?: SortOrder
    paidAt?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
    paidSessionsCount?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paidSessionsCount?: SortOrder
    status?: SortOrder
    paidAt?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    packageId?: SortOrder
    amount?: SortOrder
    paymentMethod?: SortOrder
    paidSessionsCount?: SortOrder
    status?: SortOrder
    paidAt?: SortOrder
    notes?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
    paidSessionsCount?: SortOrder
  }

  export type EnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumAuditActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionFilter<$PrismaModel> | $Enums.AuditAction
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    description?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumAuditActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditActionFilter<$PrismaModel>
    _max?: NestedEnumAuditActionFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    description?: SortOrder
    isPublic?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    scheduledFor?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    scheduledFor?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    scheduledFor?: SortOrder
    sentAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type CalendarSettingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timeSlotInterval?: SortOrder
    showWeekends?: SortOrder
    defaultView?: SortOrder
    showStaffAvailability?: SortOrder
    showRoomInfo?: SortOrder
    autoRefreshInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalendarSettingAvgOrderByAggregateInput = {
    timeSlotInterval?: SortOrder
    autoRefreshInterval?: SortOrder
  }

  export type CalendarSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timeSlotInterval?: SortOrder
    showWeekends?: SortOrder
    defaultView?: SortOrder
    showStaffAvailability?: SortOrder
    showRoomInfo?: SortOrder
    autoRefreshInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalendarSettingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    workingHoursStart?: SortOrder
    workingHoursEnd?: SortOrder
    timeSlotInterval?: SortOrder
    showWeekends?: SortOrder
    defaultView?: SortOrder
    showStaffAvailability?: SortOrder
    showRoomInfo?: SortOrder
    autoRefreshInterval?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CalendarSettingSumOrderByAggregateInput = {
    timeSlotInterval?: SortOrder
    autoRefreshInterval?: SortOrder
  }

  export type EnumConsentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ConsentType | EnumConsentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConsentType[] | ListEnumConsentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConsentType[] | ListEnumConsentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConsentTypeFilter<$PrismaModel> | $Enums.ConsentType
  }

  export type ConsentRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    consentString?: SortOrder
    expiresAt?: SortOrder
    withdrawnAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsentRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    consentString?: SortOrder
    expiresAt?: SortOrder
    withdrawnAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ConsentRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    consentString?: SortOrder
    expiresAt?: SortOrder
    withdrawnAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumConsentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConsentType | EnumConsentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConsentType[] | ListEnumConsentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConsentType[] | ListEnumConsentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConsentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ConsentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConsentTypeFilter<$PrismaModel>
    _max?: NestedEnumConsentTypeFilter<$PrismaModel>
  }

  export type EnumDataRequestTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestType | EnumDataRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestTypeFilter<$PrismaModel> | $Enums.DataRequestType
  }

  export type EnumDataRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestStatus | EnumDataRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestStatusFilter<$PrismaModel> | $Enums.DataRequestStatus
  }

  export type DataExportRequestCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    requestedData?: SortOrder
    filePath?: SortOrder
    downloadedAt?: SortOrder
    expiresAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataExportRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    filePath?: SortOrder
    downloadedAt?: SortOrder
    expiresAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataExportRequestMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    requestType?: SortOrder
    status?: SortOrder
    filePath?: SortOrder
    downloadedAt?: SortOrder
    expiresAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumDataRequestTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestType | EnumDataRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestTypeWithAggregatesFilter<$PrismaModel> | $Enums.DataRequestType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDataRequestTypeFilter<$PrismaModel>
    _max?: NestedEnumDataRequestTypeFilter<$PrismaModel>
  }

  export type EnumDataRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestStatus | EnumDataRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.DataRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDataRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumDataRequestStatusFilter<$PrismaModel>
  }

  export type EnumGDPRActionFilter<$PrismaModel = never> = {
    equals?: $Enums.GDPRAction | EnumGDPRActionFieldRefInput<$PrismaModel>
    in?: $Enums.GDPRAction[] | ListEnumGDPRActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.GDPRAction[] | ListEnumGDPRActionFieldRefInput<$PrismaModel>
    not?: NestedEnumGDPRActionFilter<$PrismaModel> | $Enums.GDPRAction
  }

  export type GDPRAuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    dataType?: SortOrder
    recordId?: SortOrder
    legalBasis?: SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    consentId?: SortOrder
    automated?: SortOrder
    createdAt?: SortOrder
  }

  export type GDPRAuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    dataType?: SortOrder
    recordId?: SortOrder
    legalBasis?: SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    consentId?: SortOrder
    automated?: SortOrder
    createdAt?: SortOrder
  }

  export type GDPRAuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    dataType?: SortOrder
    recordId?: SortOrder
    legalBasis?: SortOrder
    purpose?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    consentId?: SortOrder
    automated?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumGDPRActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GDPRAction | EnumGDPRActionFieldRefInput<$PrismaModel>
    in?: $Enums.GDPRAction[] | ListEnumGDPRActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.GDPRAction[] | ListEnumGDPRActionFieldRefInput<$PrismaModel>
    not?: NestedEnumGDPRActionWithAggregatesFilter<$PrismaModel> | $Enums.GDPRAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGDPRActionFilter<$PrismaModel>
    _max?: NestedEnumGDPRActionFilter<$PrismaModel>
  }

  export type DataRetentionPolicyCountOrderByAggregateInput = {
    id?: SortOrder
    dataType?: SortOrder
    retentionPeriod?: SortOrder
    description?: SortOrder
    legalBasis?: SortOrder
    autoDelete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataRetentionPolicyAvgOrderByAggregateInput = {
    retentionPeriod?: SortOrder
  }

  export type DataRetentionPolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    dataType?: SortOrder
    retentionPeriod?: SortOrder
    description?: SortOrder
    legalBasis?: SortOrder
    autoDelete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataRetentionPolicyMinOrderByAggregateInput = {
    id?: SortOrder
    dataType?: SortOrder
    retentionPeriod?: SortOrder
    description?: SortOrder
    legalBasis?: SortOrder
    autoDelete?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DataRetentionPolicySumOrderByAggregateInput = {
    retentionPeriod?: SortOrder
  }

  export type UserCreatemfaBackupCodesInput = {
    set: string[]
  }

  export type StaffScheduleCreateNestedManyWithoutStaffInput = {
    create?: XOR<StaffScheduleCreateWithoutStaffInput, StaffScheduleUncheckedCreateWithoutStaffInput> | StaffScheduleCreateWithoutStaffInput[] | StaffScheduleUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffScheduleCreateOrConnectWithoutStaffInput | StaffScheduleCreateOrConnectWithoutStaffInput[]
    createMany?: StaffScheduleCreateManyStaffInputEnvelope
    connect?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
  }

  export type StaffLeaveCreateNestedManyWithoutStaffInput = {
    create?: XOR<StaffLeaveCreateWithoutStaffInput, StaffLeaveUncheckedCreateWithoutStaffInput> | StaffLeaveCreateWithoutStaffInput[] | StaffLeaveUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffLeaveCreateOrConnectWithoutStaffInput | StaffLeaveCreateOrConnectWithoutStaffInput[]
    createMany?: StaffLeaveCreateManyStaffInputEnvelope
    connect?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutStaffInput = {
    create?: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput> | AppointmentCreateWithoutStaffInput[] | AppointmentUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffInput | AppointmentCreateOrConnectWithoutStaffInput[]
    createMany?: AppointmentCreateManyStaffInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type PackageCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput> | PackageCreateWithoutCreatedByInput[] | PackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCreatedByInput | PackageCreateOrConnectWithoutCreatedByInput[]
    createMany?: PackageCreateManyCreatedByInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput> | PaymentCreateWithoutCreatedByInput[] | PaymentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatedByInput | PaymentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PaymentCreateManyCreatedByInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput> | AppointmentCreateWithoutCreatedByInput[] | AppointmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByInput | AppointmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: AppointmentCreateManyCreatedByInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type ServiceCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ServiceCreateWithoutCreatedByInput, ServiceUncheckedCreateWithoutCreatedByInput> | ServiceCreateWithoutCreatedByInput[] | ServiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCreatedByInput | ServiceCreateOrConnectWithoutCreatedByInput[]
    createMany?: ServiceCreateManyCreatedByInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type RoomCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RoomCreateWithoutCreatedByInput, RoomUncheckedCreateWithoutCreatedByInput> | RoomCreateWithoutCreatedByInput[] | RoomUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutCreatedByInput | RoomCreateOrConnectWithoutCreatedByInput[]
    createMany?: RoomCreateManyCreatedByInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type PatientHistoryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientHistoryCreateWithoutCreatedByInput, PatientHistoryUncheckedCreateWithoutCreatedByInput> | PatientHistoryCreateWithoutCreatedByInput[] | PatientHistoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutCreatedByInput | PatientHistoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientHistoryCreateManyCreatedByInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type PatientCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<PatientCreateWithoutModifiedByInput, PatientUncheckedCreateWithoutModifiedByInput> | PatientCreateWithoutModifiedByInput[] | PatientUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutModifiedByInput | PatientCreateOrConnectWithoutModifiedByInput[]
    createMany?: PatientCreateManyModifiedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<AppointmentCreateWithoutModifiedByInput, AppointmentUncheckedCreateWithoutModifiedByInput> | AppointmentCreateWithoutModifiedByInput[] | AppointmentUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutModifiedByInput | AppointmentCreateOrConnectWithoutModifiedByInput[]
    createMany?: AppointmentCreateManyModifiedByInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type ServiceCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<ServiceCreateWithoutModifiedByInput, ServiceUncheckedCreateWithoutModifiedByInput> | ServiceCreateWithoutModifiedByInput[] | ServiceUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutModifiedByInput | ServiceCreateOrConnectWithoutModifiedByInput[]
    createMany?: ServiceCreateManyModifiedByInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type RoomCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<RoomCreateWithoutModifiedByInput, RoomUncheckedCreateWithoutModifiedByInput> | RoomCreateWithoutModifiedByInput[] | RoomUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutModifiedByInput | RoomCreateOrConnectWithoutModifiedByInput[]
    createMany?: RoomCreateManyModifiedByInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type PatientHistoryCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<PatientHistoryCreateWithoutModifiedByInput, PatientHistoryUncheckedCreateWithoutModifiedByInput> | PatientHistoryCreateWithoutModifiedByInput[] | PatientHistoryUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutModifiedByInput | PatientHistoryCreateOrConnectWithoutModifiedByInput[]
    createMany?: PatientHistoryCreateManyModifiedByInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type ConsentRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<ConsentRecordCreateWithoutUserInput, ConsentRecordUncheckedCreateWithoutUserInput> | ConsentRecordCreateWithoutUserInput[] | ConsentRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsentRecordCreateOrConnectWithoutUserInput | ConsentRecordCreateOrConnectWithoutUserInput[]
    createMany?: ConsentRecordCreateManyUserInputEnvelope
    connect?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
  }

  export type DataExportRequestCreateNestedManyWithoutUserInput = {
    create?: XOR<DataExportRequestCreateWithoutUserInput, DataExportRequestUncheckedCreateWithoutUserInput> | DataExportRequestCreateWithoutUserInput[] | DataExportRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DataExportRequestCreateOrConnectWithoutUserInput | DataExportRequestCreateOrConnectWithoutUserInput[]
    createMany?: DataExportRequestCreateManyUserInputEnvelope
    connect?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
  }

  export type GDPRAuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<GDPRAuditLogCreateWithoutUserInput, GDPRAuditLogUncheckedCreateWithoutUserInput> | GDPRAuditLogCreateWithoutUserInput[] | GDPRAuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GDPRAuditLogCreateOrConnectWithoutUserInput | GDPRAuditLogCreateOrConnectWithoutUserInput[]
    createMany?: GDPRAuditLogCreateManyUserInputEnvelope
    connect?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
  }

  export type StaffScheduleUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<StaffScheduleCreateWithoutStaffInput, StaffScheduleUncheckedCreateWithoutStaffInput> | StaffScheduleCreateWithoutStaffInput[] | StaffScheduleUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffScheduleCreateOrConnectWithoutStaffInput | StaffScheduleCreateOrConnectWithoutStaffInput[]
    createMany?: StaffScheduleCreateManyStaffInputEnvelope
    connect?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
  }

  export type StaffLeaveUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<StaffLeaveCreateWithoutStaffInput, StaffLeaveUncheckedCreateWithoutStaffInput> | StaffLeaveCreateWithoutStaffInput[] | StaffLeaveUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffLeaveCreateOrConnectWithoutStaffInput | StaffLeaveCreateOrConnectWithoutStaffInput[]
    createMany?: StaffLeaveCreateManyStaffInputEnvelope
    connect?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput> | AppointmentCreateWithoutStaffInput[] | AppointmentUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffInput | AppointmentCreateOrConnectWithoutStaffInput[]
    createMany?: AppointmentCreateManyStaffInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type PackageUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput> | PackageCreateWithoutCreatedByInput[] | PackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCreatedByInput | PackageCreateOrConnectWithoutCreatedByInput[]
    createMany?: PackageCreateManyCreatedByInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput> | PaymentCreateWithoutCreatedByInput[] | PaymentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatedByInput | PaymentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PaymentCreateManyCreatedByInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput> | AppointmentCreateWithoutCreatedByInput[] | AppointmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByInput | AppointmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: AppointmentCreateManyCreatedByInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ServiceCreateWithoutCreatedByInput, ServiceUncheckedCreateWithoutCreatedByInput> | ServiceCreateWithoutCreatedByInput[] | ServiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCreatedByInput | ServiceCreateOrConnectWithoutCreatedByInput[]
    createMany?: ServiceCreateManyCreatedByInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type RoomUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RoomCreateWithoutCreatedByInput, RoomUncheckedCreateWithoutCreatedByInput> | RoomCreateWithoutCreatedByInput[] | RoomUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutCreatedByInput | RoomCreateOrConnectWithoutCreatedByInput[]
    createMany?: RoomCreateManyCreatedByInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PatientHistoryCreateWithoutCreatedByInput, PatientHistoryUncheckedCreateWithoutCreatedByInput> | PatientHistoryCreateWithoutCreatedByInput[] | PatientHistoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutCreatedByInput | PatientHistoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: PatientHistoryCreateManyCreatedByInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<PatientCreateWithoutModifiedByInput, PatientUncheckedCreateWithoutModifiedByInput> | PatientCreateWithoutModifiedByInput[] | PatientUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutModifiedByInput | PatientCreateOrConnectWithoutModifiedByInput[]
    createMany?: PatientCreateManyModifiedByInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<AppointmentCreateWithoutModifiedByInput, AppointmentUncheckedCreateWithoutModifiedByInput> | AppointmentCreateWithoutModifiedByInput[] | AppointmentUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutModifiedByInput | AppointmentCreateOrConnectWithoutModifiedByInput[]
    createMany?: AppointmentCreateManyModifiedByInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type ServiceUncheckedCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<ServiceCreateWithoutModifiedByInput, ServiceUncheckedCreateWithoutModifiedByInput> | ServiceCreateWithoutModifiedByInput[] | ServiceUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutModifiedByInput | ServiceCreateOrConnectWithoutModifiedByInput[]
    createMany?: ServiceCreateManyModifiedByInputEnvelope
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
  }

  export type RoomUncheckedCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<RoomCreateWithoutModifiedByInput, RoomUncheckedCreateWithoutModifiedByInput> | RoomCreateWithoutModifiedByInput[] | RoomUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutModifiedByInput | RoomCreateOrConnectWithoutModifiedByInput[]
    createMany?: RoomCreateManyModifiedByInputEnvelope
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
  }

  export type PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput = {
    create?: XOR<PatientHistoryCreateWithoutModifiedByInput, PatientHistoryUncheckedCreateWithoutModifiedByInput> | PatientHistoryCreateWithoutModifiedByInput[] | PatientHistoryUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutModifiedByInput | PatientHistoryCreateOrConnectWithoutModifiedByInput[]
    createMany?: PatientHistoryCreateManyModifiedByInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type ConsentRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ConsentRecordCreateWithoutUserInput, ConsentRecordUncheckedCreateWithoutUserInput> | ConsentRecordCreateWithoutUserInput[] | ConsentRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsentRecordCreateOrConnectWithoutUserInput | ConsentRecordCreateOrConnectWithoutUserInput[]
    createMany?: ConsentRecordCreateManyUserInputEnvelope
    connect?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
  }

  export type DataExportRequestUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DataExportRequestCreateWithoutUserInput, DataExportRequestUncheckedCreateWithoutUserInput> | DataExportRequestCreateWithoutUserInput[] | DataExportRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DataExportRequestCreateOrConnectWithoutUserInput | DataExportRequestCreateOrConnectWithoutUserInput[]
    createMany?: DataExportRequestCreateManyUserInputEnvelope
    connect?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
  }

  export type GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<GDPRAuditLogCreateWithoutUserInput, GDPRAuditLogUncheckedCreateWithoutUserInput> | GDPRAuditLogCreateWithoutUserInput[] | GDPRAuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GDPRAuditLogCreateOrConnectWithoutUserInput | GDPRAuditLogCreateOrConnectWithoutUserInput[]
    createMany?: GDPRAuditLogCreateManyUserInputEnvelope
    connect?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdatemfaBackupCodesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableEnumStaffSpecializationFieldUpdateOperationsInput = {
    set?: $Enums.StaffSpecialization | null
  }

  export type StaffScheduleUpdateManyWithoutStaffNestedInput = {
    create?: XOR<StaffScheduleCreateWithoutStaffInput, StaffScheduleUncheckedCreateWithoutStaffInput> | StaffScheduleCreateWithoutStaffInput[] | StaffScheduleUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffScheduleCreateOrConnectWithoutStaffInput | StaffScheduleCreateOrConnectWithoutStaffInput[]
    upsert?: StaffScheduleUpsertWithWhereUniqueWithoutStaffInput | StaffScheduleUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: StaffScheduleCreateManyStaffInputEnvelope
    set?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
    disconnect?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
    delete?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
    connect?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
    update?: StaffScheduleUpdateWithWhereUniqueWithoutStaffInput | StaffScheduleUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: StaffScheduleUpdateManyWithWhereWithoutStaffInput | StaffScheduleUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: StaffScheduleScalarWhereInput | StaffScheduleScalarWhereInput[]
  }

  export type StaffLeaveUpdateManyWithoutStaffNestedInput = {
    create?: XOR<StaffLeaveCreateWithoutStaffInput, StaffLeaveUncheckedCreateWithoutStaffInput> | StaffLeaveCreateWithoutStaffInput[] | StaffLeaveUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffLeaveCreateOrConnectWithoutStaffInput | StaffLeaveCreateOrConnectWithoutStaffInput[]
    upsert?: StaffLeaveUpsertWithWhereUniqueWithoutStaffInput | StaffLeaveUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: StaffLeaveCreateManyStaffInputEnvelope
    set?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
    disconnect?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
    delete?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
    connect?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
    update?: StaffLeaveUpdateWithWhereUniqueWithoutStaffInput | StaffLeaveUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: StaffLeaveUpdateManyWithWhereWithoutStaffInput | StaffLeaveUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: StaffLeaveScalarWhereInput | StaffLeaveScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutStaffNestedInput = {
    create?: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput> | AppointmentCreateWithoutStaffInput[] | AppointmentUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffInput | AppointmentCreateOrConnectWithoutStaffInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutStaffInput | AppointmentUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: AppointmentCreateManyStaffInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutStaffInput | AppointmentUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutStaffInput | AppointmentUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type PackageUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput> | PackageCreateWithoutCreatedByInput[] | PackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCreatedByInput | PackageCreateOrConnectWithoutCreatedByInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutCreatedByInput | PackageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PackageCreateManyCreatedByInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutCreatedByInput | PackageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutCreatedByInput | PackageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput> | PaymentCreateWithoutCreatedByInput[] | PaymentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatedByInput | PaymentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCreatedByInput | PaymentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PaymentCreateManyCreatedByInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCreatedByInput | PaymentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCreatedByInput | PaymentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutCreatedByInput | PatientUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutCreatedByInput | PatientUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutCreatedByInput | PatientUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput> | AppointmentCreateWithoutCreatedByInput[] | AppointmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByInput | AppointmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatedByInput | AppointmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AppointmentCreateManyCreatedByInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCreatedByInput | AppointmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCreatedByInput | AppointmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ServiceUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ServiceCreateWithoutCreatedByInput, ServiceUncheckedCreateWithoutCreatedByInput> | ServiceCreateWithoutCreatedByInput[] | ServiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCreatedByInput | ServiceCreateOrConnectWithoutCreatedByInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutCreatedByInput | ServiceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ServiceCreateManyCreatedByInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutCreatedByInput | ServiceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutCreatedByInput | ServiceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type RoomUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RoomCreateWithoutCreatedByInput, RoomUncheckedCreateWithoutCreatedByInput> | RoomCreateWithoutCreatedByInput[] | RoomUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutCreatedByInput | RoomCreateOrConnectWithoutCreatedByInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutCreatedByInput | RoomUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RoomCreateManyCreatedByInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutCreatedByInput | RoomUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutCreatedByInput | RoomUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type PatientHistoryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutCreatedByInput, PatientHistoryUncheckedCreateWithoutCreatedByInput> | PatientHistoryCreateWithoutCreatedByInput[] | PatientHistoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutCreatedByInput | PatientHistoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutCreatedByInput | PatientHistoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientHistoryCreateManyCreatedByInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutCreatedByInput | PatientHistoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutCreatedByInput | PatientHistoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type PatientUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<PatientCreateWithoutModifiedByInput, PatientUncheckedCreateWithoutModifiedByInput> | PatientCreateWithoutModifiedByInput[] | PatientUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutModifiedByInput | PatientCreateOrConnectWithoutModifiedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutModifiedByInput | PatientUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: PatientCreateManyModifiedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutModifiedByInput | PatientUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutModifiedByInput | PatientUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<AppointmentCreateWithoutModifiedByInput, AppointmentUncheckedCreateWithoutModifiedByInput> | AppointmentCreateWithoutModifiedByInput[] | AppointmentUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutModifiedByInput | AppointmentCreateOrConnectWithoutModifiedByInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutModifiedByInput | AppointmentUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: AppointmentCreateManyModifiedByInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutModifiedByInput | AppointmentUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutModifiedByInput | AppointmentUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ServiceUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<ServiceCreateWithoutModifiedByInput, ServiceUncheckedCreateWithoutModifiedByInput> | ServiceCreateWithoutModifiedByInput[] | ServiceUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutModifiedByInput | ServiceCreateOrConnectWithoutModifiedByInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutModifiedByInput | ServiceUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: ServiceCreateManyModifiedByInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutModifiedByInput | ServiceUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutModifiedByInput | ServiceUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type RoomUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<RoomCreateWithoutModifiedByInput, RoomUncheckedCreateWithoutModifiedByInput> | RoomCreateWithoutModifiedByInput[] | RoomUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutModifiedByInput | RoomCreateOrConnectWithoutModifiedByInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutModifiedByInput | RoomUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: RoomCreateManyModifiedByInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutModifiedByInput | RoomUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutModifiedByInput | RoomUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type PatientHistoryUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutModifiedByInput, PatientHistoryUncheckedCreateWithoutModifiedByInput> | PatientHistoryCreateWithoutModifiedByInput[] | PatientHistoryUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutModifiedByInput | PatientHistoryCreateOrConnectWithoutModifiedByInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutModifiedByInput | PatientHistoryUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: PatientHistoryCreateManyModifiedByInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutModifiedByInput | PatientHistoryUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutModifiedByInput | PatientHistoryUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type ConsentRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConsentRecordCreateWithoutUserInput, ConsentRecordUncheckedCreateWithoutUserInput> | ConsentRecordCreateWithoutUserInput[] | ConsentRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsentRecordCreateOrConnectWithoutUserInput | ConsentRecordCreateOrConnectWithoutUserInput[]
    upsert?: ConsentRecordUpsertWithWhereUniqueWithoutUserInput | ConsentRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConsentRecordCreateManyUserInputEnvelope
    set?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
    disconnect?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
    delete?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
    connect?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
    update?: ConsentRecordUpdateWithWhereUniqueWithoutUserInput | ConsentRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConsentRecordUpdateManyWithWhereWithoutUserInput | ConsentRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConsentRecordScalarWhereInput | ConsentRecordScalarWhereInput[]
  }

  export type DataExportRequestUpdateManyWithoutUserNestedInput = {
    create?: XOR<DataExportRequestCreateWithoutUserInput, DataExportRequestUncheckedCreateWithoutUserInput> | DataExportRequestCreateWithoutUserInput[] | DataExportRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DataExportRequestCreateOrConnectWithoutUserInput | DataExportRequestCreateOrConnectWithoutUserInput[]
    upsert?: DataExportRequestUpsertWithWhereUniqueWithoutUserInput | DataExportRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DataExportRequestCreateManyUserInputEnvelope
    set?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
    disconnect?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
    delete?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
    connect?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
    update?: DataExportRequestUpdateWithWhereUniqueWithoutUserInput | DataExportRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DataExportRequestUpdateManyWithWhereWithoutUserInput | DataExportRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DataExportRequestScalarWhereInput | DataExportRequestScalarWhereInput[]
  }

  export type GDPRAuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<GDPRAuditLogCreateWithoutUserInput, GDPRAuditLogUncheckedCreateWithoutUserInput> | GDPRAuditLogCreateWithoutUserInput[] | GDPRAuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GDPRAuditLogCreateOrConnectWithoutUserInput | GDPRAuditLogCreateOrConnectWithoutUserInput[]
    upsert?: GDPRAuditLogUpsertWithWhereUniqueWithoutUserInput | GDPRAuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GDPRAuditLogCreateManyUserInputEnvelope
    set?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
    disconnect?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
    delete?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
    connect?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
    update?: GDPRAuditLogUpdateWithWhereUniqueWithoutUserInput | GDPRAuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GDPRAuditLogUpdateManyWithWhereWithoutUserInput | GDPRAuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GDPRAuditLogScalarWhereInput | GDPRAuditLogScalarWhereInput[]
  }

  export type StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<StaffScheduleCreateWithoutStaffInput, StaffScheduleUncheckedCreateWithoutStaffInput> | StaffScheduleCreateWithoutStaffInput[] | StaffScheduleUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffScheduleCreateOrConnectWithoutStaffInput | StaffScheduleCreateOrConnectWithoutStaffInput[]
    upsert?: StaffScheduleUpsertWithWhereUniqueWithoutStaffInput | StaffScheduleUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: StaffScheduleCreateManyStaffInputEnvelope
    set?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
    disconnect?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
    delete?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
    connect?: StaffScheduleWhereUniqueInput | StaffScheduleWhereUniqueInput[]
    update?: StaffScheduleUpdateWithWhereUniqueWithoutStaffInput | StaffScheduleUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: StaffScheduleUpdateManyWithWhereWithoutStaffInput | StaffScheduleUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: StaffScheduleScalarWhereInput | StaffScheduleScalarWhereInput[]
  }

  export type StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<StaffLeaveCreateWithoutStaffInput, StaffLeaveUncheckedCreateWithoutStaffInput> | StaffLeaveCreateWithoutStaffInput[] | StaffLeaveUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: StaffLeaveCreateOrConnectWithoutStaffInput | StaffLeaveCreateOrConnectWithoutStaffInput[]
    upsert?: StaffLeaveUpsertWithWhereUniqueWithoutStaffInput | StaffLeaveUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: StaffLeaveCreateManyStaffInputEnvelope
    set?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
    disconnect?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
    delete?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
    connect?: StaffLeaveWhereUniqueInput | StaffLeaveWhereUniqueInput[]
    update?: StaffLeaveUpdateWithWhereUniqueWithoutStaffInput | StaffLeaveUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: StaffLeaveUpdateManyWithWhereWithoutStaffInput | StaffLeaveUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: StaffLeaveScalarWhereInput | StaffLeaveScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput> | AppointmentCreateWithoutStaffInput[] | AppointmentUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutStaffInput | AppointmentCreateOrConnectWithoutStaffInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutStaffInput | AppointmentUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: AppointmentCreateManyStaffInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutStaffInput | AppointmentUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutStaffInput | AppointmentUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type PackageUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput> | PackageCreateWithoutCreatedByInput[] | PackageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutCreatedByInput | PackageCreateOrConnectWithoutCreatedByInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutCreatedByInput | PackageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PackageCreateManyCreatedByInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutCreatedByInput | PackageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutCreatedByInput | PackageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput> | PaymentCreateWithoutCreatedByInput[] | PaymentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutCreatedByInput | PaymentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutCreatedByInput | PaymentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PaymentCreateManyCreatedByInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutCreatedByInput | PaymentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutCreatedByInput | PaymentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput> | PatientCreateWithoutCreatedByInput[] | PatientUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutCreatedByInput | PatientCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutCreatedByInput | PatientUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientCreateManyCreatedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutCreatedByInput | PatientUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutCreatedByInput | PatientUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput> | AppointmentCreateWithoutCreatedByInput[] | AppointmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutCreatedByInput | AppointmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutCreatedByInput | AppointmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AppointmentCreateManyCreatedByInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutCreatedByInput | AppointmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutCreatedByInput | AppointmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ServiceCreateWithoutCreatedByInput, ServiceUncheckedCreateWithoutCreatedByInput> | ServiceCreateWithoutCreatedByInput[] | ServiceUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutCreatedByInput | ServiceCreateOrConnectWithoutCreatedByInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutCreatedByInput | ServiceUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ServiceCreateManyCreatedByInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutCreatedByInput | ServiceUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutCreatedByInput | ServiceUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type RoomUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RoomCreateWithoutCreatedByInput, RoomUncheckedCreateWithoutCreatedByInput> | RoomCreateWithoutCreatedByInput[] | RoomUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutCreatedByInput | RoomCreateOrConnectWithoutCreatedByInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutCreatedByInput | RoomUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RoomCreateManyCreatedByInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutCreatedByInput | RoomUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutCreatedByInput | RoomUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutCreatedByInput, PatientHistoryUncheckedCreateWithoutCreatedByInput> | PatientHistoryCreateWithoutCreatedByInput[] | PatientHistoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutCreatedByInput | PatientHistoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutCreatedByInput | PatientHistoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PatientHistoryCreateManyCreatedByInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutCreatedByInput | PatientHistoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutCreatedByInput | PatientHistoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<PatientCreateWithoutModifiedByInput, PatientUncheckedCreateWithoutModifiedByInput> | PatientCreateWithoutModifiedByInput[] | PatientUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutModifiedByInput | PatientCreateOrConnectWithoutModifiedByInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutModifiedByInput | PatientUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: PatientCreateManyModifiedByInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutModifiedByInput | PatientUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutModifiedByInput | PatientUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<AppointmentCreateWithoutModifiedByInput, AppointmentUncheckedCreateWithoutModifiedByInput> | AppointmentCreateWithoutModifiedByInput[] | AppointmentUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutModifiedByInput | AppointmentCreateOrConnectWithoutModifiedByInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutModifiedByInput | AppointmentUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: AppointmentCreateManyModifiedByInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutModifiedByInput | AppointmentUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutModifiedByInput | AppointmentUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type ServiceUncheckedUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<ServiceCreateWithoutModifiedByInput, ServiceUncheckedCreateWithoutModifiedByInput> | ServiceCreateWithoutModifiedByInput[] | ServiceUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: ServiceCreateOrConnectWithoutModifiedByInput | ServiceCreateOrConnectWithoutModifiedByInput[]
    upsert?: ServiceUpsertWithWhereUniqueWithoutModifiedByInput | ServiceUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: ServiceCreateManyModifiedByInputEnvelope
    set?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    disconnect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    delete?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    connect?: ServiceWhereUniqueInput | ServiceWhereUniqueInput[]
    update?: ServiceUpdateWithWhereUniqueWithoutModifiedByInput | ServiceUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: ServiceUpdateManyWithWhereWithoutModifiedByInput | ServiceUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
  }

  export type RoomUncheckedUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<RoomCreateWithoutModifiedByInput, RoomUncheckedCreateWithoutModifiedByInput> | RoomCreateWithoutModifiedByInput[] | RoomUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: RoomCreateOrConnectWithoutModifiedByInput | RoomCreateOrConnectWithoutModifiedByInput[]
    upsert?: RoomUpsertWithWhereUniqueWithoutModifiedByInput | RoomUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: RoomCreateManyModifiedByInputEnvelope
    set?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    disconnect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    delete?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    connect?: RoomWhereUniqueInput | RoomWhereUniqueInput[]
    update?: RoomUpdateWithWhereUniqueWithoutModifiedByInput | RoomUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: RoomUpdateManyWithWhereWithoutModifiedByInput | RoomUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: RoomScalarWhereInput | RoomScalarWhereInput[]
  }

  export type PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutModifiedByInput, PatientHistoryUncheckedCreateWithoutModifiedByInput> | PatientHistoryCreateWithoutModifiedByInput[] | PatientHistoryUncheckedCreateWithoutModifiedByInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutModifiedByInput | PatientHistoryCreateOrConnectWithoutModifiedByInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutModifiedByInput | PatientHistoryUpsertWithWhereUniqueWithoutModifiedByInput[]
    createMany?: PatientHistoryCreateManyModifiedByInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutModifiedByInput | PatientHistoryUpdateWithWhereUniqueWithoutModifiedByInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutModifiedByInput | PatientHistoryUpdateManyWithWhereWithoutModifiedByInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type ConsentRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ConsentRecordCreateWithoutUserInput, ConsentRecordUncheckedCreateWithoutUserInput> | ConsentRecordCreateWithoutUserInput[] | ConsentRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ConsentRecordCreateOrConnectWithoutUserInput | ConsentRecordCreateOrConnectWithoutUserInput[]
    upsert?: ConsentRecordUpsertWithWhereUniqueWithoutUserInput | ConsentRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ConsentRecordCreateManyUserInputEnvelope
    set?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
    disconnect?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
    delete?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
    connect?: ConsentRecordWhereUniqueInput | ConsentRecordWhereUniqueInput[]
    update?: ConsentRecordUpdateWithWhereUniqueWithoutUserInput | ConsentRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ConsentRecordUpdateManyWithWhereWithoutUserInput | ConsentRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ConsentRecordScalarWhereInput | ConsentRecordScalarWhereInput[]
  }

  export type DataExportRequestUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DataExportRequestCreateWithoutUserInput, DataExportRequestUncheckedCreateWithoutUserInput> | DataExportRequestCreateWithoutUserInput[] | DataExportRequestUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DataExportRequestCreateOrConnectWithoutUserInput | DataExportRequestCreateOrConnectWithoutUserInput[]
    upsert?: DataExportRequestUpsertWithWhereUniqueWithoutUserInput | DataExportRequestUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DataExportRequestCreateManyUserInputEnvelope
    set?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
    disconnect?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
    delete?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
    connect?: DataExportRequestWhereUniqueInput | DataExportRequestWhereUniqueInput[]
    update?: DataExportRequestUpdateWithWhereUniqueWithoutUserInput | DataExportRequestUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DataExportRequestUpdateManyWithWhereWithoutUserInput | DataExportRequestUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DataExportRequestScalarWhereInput | DataExportRequestScalarWhereInput[]
  }

  export type GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<GDPRAuditLogCreateWithoutUserInput, GDPRAuditLogUncheckedCreateWithoutUserInput> | GDPRAuditLogCreateWithoutUserInput[] | GDPRAuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: GDPRAuditLogCreateOrConnectWithoutUserInput | GDPRAuditLogCreateOrConnectWithoutUserInput[]
    upsert?: GDPRAuditLogUpsertWithWhereUniqueWithoutUserInput | GDPRAuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: GDPRAuditLogCreateManyUserInputEnvelope
    set?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
    disconnect?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
    delete?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
    connect?: GDPRAuditLogWhereUniqueInput | GDPRAuditLogWhereUniqueInput[]
    update?: GDPRAuditLogUpdateWithWhereUniqueWithoutUserInput | GDPRAuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: GDPRAuditLogUpdateManyWithWhereWithoutUserInput | GDPRAuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: GDPRAuditLogScalarWhereInput | GDPRAuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStaffSchedulesInput = {
    create?: XOR<UserCreateWithoutStaffSchedulesInput, UserUncheckedCreateWithoutStaffSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffSchedulesInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutStaffSchedulesNestedInput = {
    create?: XOR<UserCreateWithoutStaffSchedulesInput, UserUncheckedCreateWithoutStaffSchedulesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffSchedulesInput
    upsert?: UserUpsertWithoutStaffSchedulesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffSchedulesInput, UserUpdateWithoutStaffSchedulesInput>, UserUncheckedUpdateWithoutStaffSchedulesInput>
  }

  export type UserCreateNestedOneWithoutStaffLeavesInput = {
    create?: XOR<UserCreateWithoutStaffLeavesInput, UserUncheckedCreateWithoutStaffLeavesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffLeavesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStaffLeavesNestedInput = {
    create?: XOR<UserCreateWithoutStaffLeavesInput, UserUncheckedCreateWithoutStaffLeavesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStaffLeavesInput
    upsert?: UserUpsertWithoutStaffLeavesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStaffLeavesInput, UserUpdateWithoutStaffLeavesInput>, UserUncheckedUpdateWithoutStaffLeavesInput>
  }

  export type RoomCreatefeaturesInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutRoomsCreatedInput = {
    create?: XOR<UserCreateWithoutRoomsCreatedInput, UserUncheckedCreateWithoutRoomsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRoomsModifiedInput = {
    create?: XOR<UserCreateWithoutRoomsModifiedInput, UserUncheckedCreateWithoutRoomsModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomsModifiedInput
    connect?: UserWhereUniqueInput
  }

  export type AppointmentCreateNestedManyWithoutRoomInput = {
    create?: XOR<AppointmentCreateWithoutRoomInput, AppointmentUncheckedCreateWithoutRoomInput> | AppointmentCreateWithoutRoomInput[] | AppointmentUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRoomInput | AppointmentCreateOrConnectWithoutRoomInput[]
    createMany?: AppointmentCreateManyRoomInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<AppointmentCreateWithoutRoomInput, AppointmentUncheckedCreateWithoutRoomInput> | AppointmentCreateWithoutRoomInput[] | AppointmentUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRoomInput | AppointmentCreateOrConnectWithoutRoomInput[]
    createMany?: AppointmentCreateManyRoomInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type RoomUpdatefeaturesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutRoomsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutRoomsCreatedInput, UserUncheckedCreateWithoutRoomsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomsCreatedInput
    upsert?: UserUpsertWithoutRoomsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoomsCreatedInput, UserUpdateWithoutRoomsCreatedInput>, UserUncheckedUpdateWithoutRoomsCreatedInput>
  }

  export type UserUpdateOneWithoutRoomsModifiedNestedInput = {
    create?: XOR<UserCreateWithoutRoomsModifiedInput, UserUncheckedCreateWithoutRoomsModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutRoomsModifiedInput
    upsert?: UserUpsertWithoutRoomsModifiedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRoomsModifiedInput, UserUpdateWithoutRoomsModifiedInput>, UserUncheckedUpdateWithoutRoomsModifiedInput>
  }

  export type AppointmentUpdateManyWithoutRoomNestedInput = {
    create?: XOR<AppointmentCreateWithoutRoomInput, AppointmentUncheckedCreateWithoutRoomInput> | AppointmentCreateWithoutRoomInput[] | AppointmentUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRoomInput | AppointmentCreateOrConnectWithoutRoomInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutRoomInput | AppointmentUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: AppointmentCreateManyRoomInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutRoomInput | AppointmentUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutRoomInput | AppointmentUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<AppointmentCreateWithoutRoomInput, AppointmentUncheckedCreateWithoutRoomInput> | AppointmentCreateWithoutRoomInput[] | AppointmentUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutRoomInput | AppointmentCreateOrConnectWithoutRoomInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutRoomInput | AppointmentUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: AppointmentCreateManyRoomInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutRoomInput | AppointmentUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutRoomInput | AppointmentUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutServicesCreatedInput = {
    create?: XOR<UserCreateWithoutServicesCreatedInput, UserUncheckedCreateWithoutServicesCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutServicesModifiedInput = {
    create?: XOR<UserCreateWithoutServicesModifiedInput, UserUncheckedCreateWithoutServicesModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesModifiedInput
    connect?: UserWhereUniqueInput
  }

  export type PackageItemCreateNestedManyWithoutServiceInput = {
    create?: XOR<PackageItemCreateWithoutServiceInput, PackageItemUncheckedCreateWithoutServiceInput> | PackageItemCreateWithoutServiceInput[] | PackageItemUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PackageItemCreateOrConnectWithoutServiceInput | PackageItemCreateOrConnectWithoutServiceInput[]
    createMany?: PackageItemCreateManyServiceInputEnvelope
    connect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutServiceInput = {
    create?: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput> | AppointmentCreateWithoutServiceInput[] | AppointmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutServiceInput | AppointmentCreateOrConnectWithoutServiceInput[]
    createMany?: AppointmentCreateManyServiceInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PackageItemUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<PackageItemCreateWithoutServiceInput, PackageItemUncheckedCreateWithoutServiceInput> | PackageItemCreateWithoutServiceInput[] | PackageItemUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PackageItemCreateOrConnectWithoutServiceInput | PackageItemCreateOrConnectWithoutServiceInput[]
    createMany?: PackageItemCreateManyServiceInputEnvelope
    connect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutServiceInput = {
    create?: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput> | AppointmentCreateWithoutServiceInput[] | AppointmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutServiceInput | AppointmentCreateOrConnectWithoutServiceInput[]
    createMany?: AppointmentCreateManyServiceInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumServiceCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ServiceCategory
  }

  export type UserUpdateOneRequiredWithoutServicesCreatedNestedInput = {
    create?: XOR<UserCreateWithoutServicesCreatedInput, UserUncheckedCreateWithoutServicesCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesCreatedInput
    upsert?: UserUpsertWithoutServicesCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutServicesCreatedInput, UserUpdateWithoutServicesCreatedInput>, UserUncheckedUpdateWithoutServicesCreatedInput>
  }

  export type UserUpdateOneWithoutServicesModifiedNestedInput = {
    create?: XOR<UserCreateWithoutServicesModifiedInput, UserUncheckedCreateWithoutServicesModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutServicesModifiedInput
    upsert?: UserUpsertWithoutServicesModifiedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutServicesModifiedInput, UserUpdateWithoutServicesModifiedInput>, UserUncheckedUpdateWithoutServicesModifiedInput>
  }

  export type PackageItemUpdateManyWithoutServiceNestedInput = {
    create?: XOR<PackageItemCreateWithoutServiceInput, PackageItemUncheckedCreateWithoutServiceInput> | PackageItemCreateWithoutServiceInput[] | PackageItemUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PackageItemCreateOrConnectWithoutServiceInput | PackageItemCreateOrConnectWithoutServiceInput[]
    upsert?: PackageItemUpsertWithWhereUniqueWithoutServiceInput | PackageItemUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: PackageItemCreateManyServiceInputEnvelope
    set?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    disconnect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    delete?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    connect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    update?: PackageItemUpdateWithWhereUniqueWithoutServiceInput | PackageItemUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: PackageItemUpdateManyWithWhereWithoutServiceInput | PackageItemUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: PackageItemScalarWhereInput | PackageItemScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutServiceNestedInput = {
    create?: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput> | AppointmentCreateWithoutServiceInput[] | AppointmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutServiceInput | AppointmentCreateOrConnectWithoutServiceInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutServiceInput | AppointmentUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: AppointmentCreateManyServiceInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutServiceInput | AppointmentUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutServiceInput | AppointmentUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PackageItemUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<PackageItemCreateWithoutServiceInput, PackageItemUncheckedCreateWithoutServiceInput> | PackageItemCreateWithoutServiceInput[] | PackageItemUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: PackageItemCreateOrConnectWithoutServiceInput | PackageItemCreateOrConnectWithoutServiceInput[]
    upsert?: PackageItemUpsertWithWhereUniqueWithoutServiceInput | PackageItemUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: PackageItemCreateManyServiceInputEnvelope
    set?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    disconnect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    delete?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    connect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    update?: PackageItemUpdateWithWhereUniqueWithoutServiceInput | PackageItemUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: PackageItemUpdateManyWithWhereWithoutServiceInput | PackageItemUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: PackageItemScalarWhereInput | PackageItemScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutServiceNestedInput = {
    create?: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput> | AppointmentCreateWithoutServiceInput[] | AppointmentUncheckedCreateWithoutServiceInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutServiceInput | AppointmentCreateOrConnectWithoutServiceInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutServiceInput | AppointmentUpsertWithWhereUniqueWithoutServiceInput[]
    createMany?: AppointmentCreateManyServiceInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutServiceInput | AppointmentUpdateWithWhereUniqueWithoutServiceInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutServiceInput | AppointmentUpdateManyWithWhereWithoutServiceInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPatientsCreatedInput = {
    create?: XOR<UserCreateWithoutPatientsCreatedInput, UserUncheckedCreateWithoutPatientsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPatientsModifiedInput = {
    create?: XOR<UserCreateWithoutPatientsModifiedInput, UserUncheckedCreateWithoutPatientsModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientsModifiedInput
    connect?: UserWhereUniqueInput
  }

  export type PackageCreateNestedManyWithoutPatientInput = {
    create?: XOR<PackageCreateWithoutPatientInput, PackageUncheckedCreateWithoutPatientInput> | PackageCreateWithoutPatientInput[] | PackageUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutPatientInput | PackageCreateOrConnectWithoutPatientInput[]
    createMany?: PackageCreateManyPatientInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientHistoryCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientHistoryCreateWithoutPatientInput, PatientHistoryUncheckedCreateWithoutPatientInput> | PatientHistoryCreateWithoutPatientInput[] | PatientHistoryUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutPatientInput | PatientHistoryCreateOrConnectWithoutPatientInput[]
    createMany?: PatientHistoryCreateManyPatientInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutPatientInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PackageUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PackageCreateWithoutPatientInput, PackageUncheckedCreateWithoutPatientInput> | PackageCreateWithoutPatientInput[] | PackageUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutPatientInput | PackageCreateOrConnectWithoutPatientInput[]
    createMany?: PackageCreateManyPatientInputEnvelope
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientHistoryUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientHistoryCreateWithoutPatientInput, PatientHistoryUncheckedCreateWithoutPatientInput> | PatientHistoryCreateWithoutPatientInput[] | PatientHistoryUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutPatientInput | PatientHistoryCreateOrConnectWithoutPatientInput[]
    createMany?: PatientHistoryCreateManyPatientInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type NullableEnumInsuranceTypeFieldUpdateOperationsInput = {
    set?: $Enums.InsuranceType | null
  }

  export type UserUpdateOneRequiredWithoutPatientsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutPatientsCreatedInput, UserUncheckedCreateWithoutPatientsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientsCreatedInput
    upsert?: UserUpsertWithoutPatientsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientsCreatedInput, UserUpdateWithoutPatientsCreatedInput>, UserUncheckedUpdateWithoutPatientsCreatedInput>
  }

  export type UserUpdateOneWithoutPatientsModifiedNestedInput = {
    create?: XOR<UserCreateWithoutPatientsModifiedInput, UserUncheckedCreateWithoutPatientsModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientsModifiedInput
    upsert?: UserUpsertWithoutPatientsModifiedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientsModifiedInput, UserUpdateWithoutPatientsModifiedInput>, UserUncheckedUpdateWithoutPatientsModifiedInput>
  }

  export type PackageUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PackageCreateWithoutPatientInput, PackageUncheckedCreateWithoutPatientInput> | PackageCreateWithoutPatientInput[] | PackageUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutPatientInput | PackageCreateOrConnectWithoutPatientInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutPatientInput | PackageUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PackageCreateManyPatientInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutPatientInput | PackageUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutPatientInput | PackageUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientHistoryUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutPatientInput, PatientHistoryUncheckedCreateWithoutPatientInput> | PatientHistoryCreateWithoutPatientInput[] | PatientHistoryUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutPatientInput | PatientHistoryCreateOrConnectWithoutPatientInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutPatientInput | PatientHistoryUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientHistoryCreateManyPatientInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutPatientInput | PatientHistoryUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutPatientInput | PatientHistoryUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPatientInput | PaymentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPatientInput | PaymentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPatientInput | PaymentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PackageUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PackageCreateWithoutPatientInput, PackageUncheckedCreateWithoutPatientInput> | PackageCreateWithoutPatientInput[] | PackageUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PackageCreateOrConnectWithoutPatientInput | PackageCreateOrConnectWithoutPatientInput[]
    upsert?: PackageUpsertWithWhereUniqueWithoutPatientInput | PackageUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PackageCreateManyPatientInputEnvelope
    set?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    disconnect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    delete?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    connect?: PackageWhereUniqueInput | PackageWhereUniqueInput[]
    update?: PackageUpdateWithWhereUniqueWithoutPatientInput | PackageUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PackageUpdateManyWithWhereWithoutPatientInput | PackageUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PackageScalarWhereInput | PackageScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput> | AppointmentCreateWithoutPatientInput[] | AppointmentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientInput | AppointmentCreateOrConnectWithoutPatientInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPatientInput | AppointmentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPatientInput | AppointmentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPatientInput | AppointmentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientHistoryUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutPatientInput, PatientHistoryUncheckedCreateWithoutPatientInput> | PatientHistoryCreateWithoutPatientInput[] | PatientHistoryUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutPatientInput | PatientHistoryCreateOrConnectWithoutPatientInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutPatientInput | PatientHistoryUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientHistoryCreateManyPatientInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutPatientInput | PatientHistoryUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutPatientInput | PatientHistoryUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput> | PaymentCreateWithoutPatientInput[] | PaymentUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPatientInput | PaymentCreateOrConnectWithoutPatientInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPatientInput | PaymentUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PaymentCreateManyPatientInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPatientInput | PaymentUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPatientInput | PaymentUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPatientHistoryCreatedInput = {
    create?: XOR<UserCreateWithoutPatientHistoryCreatedInput, UserUncheckedCreateWithoutPatientHistoryCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientHistoryCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPatientHistoryModifiedInput = {
    create?: XOR<UserCreateWithoutPatientHistoryModifiedInput, UserUncheckedCreateWithoutPatientHistoryModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientHistoryModifiedInput
    connect?: UserWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutPatientHistoryInput = {
    create?: XOR<PatientCreateWithoutPatientHistoryInput, PatientUncheckedCreateWithoutPatientHistoryInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPatientHistoryInput
    connect?: PatientWhereUniqueInput
  }

  export type PackageCreateNestedOneWithoutPatientHistoryInput = {
    create?: XOR<PackageCreateWithoutPatientHistoryInput, PackageUncheckedCreateWithoutPatientHistoryInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPatientHistoryInput
    connect?: PackageWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutPatientHistoryInput = {
    create?: XOR<AppointmentCreateWithoutPatientHistoryInput, AppointmentUncheckedCreateWithoutPatientHistoryInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientHistoryInput
    connect?: AppointmentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPatientHistoryCreatedNestedInput = {
    create?: XOR<UserCreateWithoutPatientHistoryCreatedInput, UserUncheckedCreateWithoutPatientHistoryCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientHistoryCreatedInput
    upsert?: UserUpsertWithoutPatientHistoryCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientHistoryCreatedInput, UserUpdateWithoutPatientHistoryCreatedInput>, UserUncheckedUpdateWithoutPatientHistoryCreatedInput>
  }

  export type UserUpdateOneWithoutPatientHistoryModifiedNestedInput = {
    create?: XOR<UserCreateWithoutPatientHistoryModifiedInput, UserUncheckedCreateWithoutPatientHistoryModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientHistoryModifiedInput
    upsert?: UserUpsertWithoutPatientHistoryModifiedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientHistoryModifiedInput, UserUpdateWithoutPatientHistoryModifiedInput>, UserUncheckedUpdateWithoutPatientHistoryModifiedInput>
  }

  export type PatientUpdateOneRequiredWithoutPatientHistoryNestedInput = {
    create?: XOR<PatientCreateWithoutPatientHistoryInput, PatientUncheckedCreateWithoutPatientHistoryInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPatientHistoryInput
    upsert?: PatientUpsertWithoutPatientHistoryInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPatientHistoryInput, PatientUpdateWithoutPatientHistoryInput>, PatientUncheckedUpdateWithoutPatientHistoryInput>
  }

  export type PackageUpdateOneWithoutPatientHistoryNestedInput = {
    create?: XOR<PackageCreateWithoutPatientHistoryInput, PackageUncheckedCreateWithoutPatientHistoryInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPatientHistoryInput
    upsert?: PackageUpsertWithoutPatientHistoryInput
    disconnect?: PackageWhereInput | boolean
    delete?: PackageWhereInput | boolean
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutPatientHistoryInput, PackageUpdateWithoutPatientHistoryInput>, PackageUncheckedUpdateWithoutPatientHistoryInput>
  }

  export type AppointmentUpdateOneWithoutPatientHistoryNestedInput = {
    create?: XOR<AppointmentCreateWithoutPatientHistoryInput, AppointmentUncheckedCreateWithoutPatientHistoryInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutPatientHistoryInput
    upsert?: AppointmentUpsertWithoutPatientHistoryInput
    disconnect?: AppointmentWhereInput | boolean
    delete?: AppointmentWhereInput | boolean
    connect?: AppointmentWhereUniqueInput
    update?: XOR<XOR<AppointmentUpdateToOneWithWhereWithoutPatientHistoryInput, AppointmentUpdateWithoutPatientHistoryInput>, AppointmentUncheckedUpdateWithoutPatientHistoryInput>
  }

  export type PatientCreateNestedOneWithoutPackagesInput = {
    create?: XOR<PatientCreateWithoutPackagesInput, PatientUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPackagesInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedPackagesInput = {
    create?: XOR<UserCreateWithoutCreatedPackagesInput, UserUncheckedCreateWithoutCreatedPackagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPackagesInput
    connect?: UserWhereUniqueInput
  }

  export type PackageItemCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageItemCreateWithoutPackageInput, PackageItemUncheckedCreateWithoutPackageInput> | PackageItemCreateWithoutPackageInput[] | PackageItemUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageItemCreateOrConnectWithoutPackageInput | PackageItemCreateOrConnectWithoutPackageInput[]
    createMany?: PackageItemCreateManyPackageInputEnvelope
    connect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
  }

  export type AppointmentCreateNestedManyWithoutPackageInput = {
    create?: XOR<AppointmentCreateWithoutPackageInput, AppointmentUncheckedCreateWithoutPackageInput> | AppointmentCreateWithoutPackageInput[] | AppointmentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPackageInput | AppointmentCreateOrConnectWithoutPackageInput[]
    createMany?: AppointmentCreateManyPackageInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientHistoryCreateNestedManyWithoutPackageInput = {
    create?: XOR<PatientHistoryCreateWithoutPackageInput, PatientHistoryUncheckedCreateWithoutPackageInput> | PatientHistoryCreateWithoutPackageInput[] | PatientHistoryUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutPackageInput | PatientHistoryCreateOrConnectWithoutPackageInput[]
    createMany?: PatientHistoryCreateManyPackageInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type PaymentCreateNestedManyWithoutPackageInput = {
    create?: XOR<PaymentCreateWithoutPackageInput, PaymentUncheckedCreateWithoutPackageInput> | PaymentCreateWithoutPackageInput[] | PaymentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPackageInput | PaymentCreateOrConnectWithoutPackageInput[]
    createMany?: PaymentCreateManyPackageInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type PackageItemUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageItemCreateWithoutPackageInput, PackageItemUncheckedCreateWithoutPackageInput> | PackageItemCreateWithoutPackageInput[] | PackageItemUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageItemCreateOrConnectWithoutPackageInput | PackageItemCreateOrConnectWithoutPackageInput[]
    createMany?: PackageItemCreateManyPackageInputEnvelope
    connect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<AppointmentCreateWithoutPackageInput, AppointmentUncheckedCreateWithoutPackageInput> | AppointmentCreateWithoutPackageInput[] | AppointmentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPackageInput | AppointmentCreateOrConnectWithoutPackageInput[]
    createMany?: AppointmentCreateManyPackageInputEnvelope
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
  }

  export type PatientHistoryUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PatientHistoryCreateWithoutPackageInput, PatientHistoryUncheckedCreateWithoutPackageInput> | PatientHistoryCreateWithoutPackageInput[] | PatientHistoryUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutPackageInput | PatientHistoryCreateOrConnectWithoutPackageInput[]
    createMany?: PatientHistoryCreateManyPackageInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PaymentCreateWithoutPackageInput, PaymentUncheckedCreateWithoutPackageInput> | PaymentCreateWithoutPackageInput[] | PaymentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPackageInput | PaymentCreateOrConnectWithoutPackageInput[]
    createMany?: PaymentCreateManyPackageInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumPackageStatusFieldUpdateOperationsInput = {
    set?: $Enums.PackageStatus
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type PatientUpdateOneRequiredWithoutPackagesNestedInput = {
    create?: XOR<PatientCreateWithoutPackagesInput, PatientUncheckedCreateWithoutPackagesInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPackagesInput
    upsert?: PatientUpsertWithoutPackagesInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPackagesInput, PatientUpdateWithoutPackagesInput>, PatientUncheckedUpdateWithoutPackagesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedPackagesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPackagesInput, UserUncheckedCreateWithoutCreatedPackagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPackagesInput
    upsert?: UserUpsertWithoutCreatedPackagesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPackagesInput, UserUpdateWithoutCreatedPackagesInput>, UserUncheckedUpdateWithoutCreatedPackagesInput>
  }

  export type PackageItemUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageItemCreateWithoutPackageInput, PackageItemUncheckedCreateWithoutPackageInput> | PackageItemCreateWithoutPackageInput[] | PackageItemUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageItemCreateOrConnectWithoutPackageInput | PackageItemCreateOrConnectWithoutPackageInput[]
    upsert?: PackageItemUpsertWithWhereUniqueWithoutPackageInput | PackageItemUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageItemCreateManyPackageInputEnvelope
    set?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    disconnect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    delete?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    connect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    update?: PackageItemUpdateWithWhereUniqueWithoutPackageInput | PackageItemUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageItemUpdateManyWithWhereWithoutPackageInput | PackageItemUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageItemScalarWhereInput | PackageItemScalarWhereInput[]
  }

  export type AppointmentUpdateManyWithoutPackageNestedInput = {
    create?: XOR<AppointmentCreateWithoutPackageInput, AppointmentUncheckedCreateWithoutPackageInput> | AppointmentCreateWithoutPackageInput[] | AppointmentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPackageInput | AppointmentCreateOrConnectWithoutPackageInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPackageInput | AppointmentUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: AppointmentCreateManyPackageInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPackageInput | AppointmentUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPackageInput | AppointmentUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientHistoryUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutPackageInput, PatientHistoryUncheckedCreateWithoutPackageInput> | PatientHistoryCreateWithoutPackageInput[] | PatientHistoryUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutPackageInput | PatientHistoryCreateOrConnectWithoutPackageInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutPackageInput | PatientHistoryUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PatientHistoryCreateManyPackageInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutPackageInput | PatientHistoryUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutPackageInput | PatientHistoryUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type PaymentUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PaymentCreateWithoutPackageInput, PaymentUncheckedCreateWithoutPackageInput> | PaymentCreateWithoutPackageInput[] | PaymentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPackageInput | PaymentCreateOrConnectWithoutPackageInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPackageInput | PaymentUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PaymentCreateManyPackageInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPackageInput | PaymentUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPackageInput | PaymentUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PackageItemUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageItemCreateWithoutPackageInput, PackageItemUncheckedCreateWithoutPackageInput> | PackageItemCreateWithoutPackageInput[] | PackageItemUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageItemCreateOrConnectWithoutPackageInput | PackageItemCreateOrConnectWithoutPackageInput[]
    upsert?: PackageItemUpsertWithWhereUniqueWithoutPackageInput | PackageItemUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageItemCreateManyPackageInputEnvelope
    set?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    disconnect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    delete?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    connect?: PackageItemWhereUniqueInput | PackageItemWhereUniqueInput[]
    update?: PackageItemUpdateWithWhereUniqueWithoutPackageInput | PackageItemUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageItemUpdateManyWithWhereWithoutPackageInput | PackageItemUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageItemScalarWhereInput | PackageItemScalarWhereInput[]
  }

  export type AppointmentUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<AppointmentCreateWithoutPackageInput, AppointmentUncheckedCreateWithoutPackageInput> | AppointmentCreateWithoutPackageInput[] | AppointmentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: AppointmentCreateOrConnectWithoutPackageInput | AppointmentCreateOrConnectWithoutPackageInput[]
    upsert?: AppointmentUpsertWithWhereUniqueWithoutPackageInput | AppointmentUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: AppointmentCreateManyPackageInputEnvelope
    set?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    disconnect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    delete?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    connect?: AppointmentWhereUniqueInput | AppointmentWhereUniqueInput[]
    update?: AppointmentUpdateWithWhereUniqueWithoutPackageInput | AppointmentUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: AppointmentUpdateManyWithWhereWithoutPackageInput | AppointmentUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
  }

  export type PatientHistoryUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutPackageInput, PatientHistoryUncheckedCreateWithoutPackageInput> | PatientHistoryCreateWithoutPackageInput[] | PatientHistoryUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutPackageInput | PatientHistoryCreateOrConnectWithoutPackageInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutPackageInput | PatientHistoryUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PatientHistoryCreateManyPackageInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutPackageInput | PatientHistoryUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutPackageInput | PatientHistoryUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PaymentCreateWithoutPackageInput, PaymentUncheckedCreateWithoutPackageInput> | PaymentCreateWithoutPackageInput[] | PaymentUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutPackageInput | PaymentCreateOrConnectWithoutPackageInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutPackageInput | PaymentUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PaymentCreateManyPackageInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutPackageInput | PaymentUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutPackageInput | PaymentUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type PackageCreateNestedOneWithoutPackageItemsInput = {
    create?: XOR<PackageCreateWithoutPackageItemsInput, PackageUncheckedCreateWithoutPackageItemsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPackageItemsInput
    connect?: PackageWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutPackageItemsInput = {
    create?: XOR<ServiceCreateWithoutPackageItemsInput, ServiceUncheckedCreateWithoutPackageItemsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutPackageItemsInput
    connect?: ServiceWhereUniqueInput
  }

  export type PackageUpdateOneRequiredWithoutPackageItemsNestedInput = {
    create?: XOR<PackageCreateWithoutPackageItemsInput, PackageUncheckedCreateWithoutPackageItemsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPackageItemsInput
    upsert?: PackageUpsertWithoutPackageItemsInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutPackageItemsInput, PackageUpdateWithoutPackageItemsInput>, PackageUncheckedUpdateWithoutPackageItemsInput>
  }

  export type ServiceUpdateOneRequiredWithoutPackageItemsNestedInput = {
    create?: XOR<ServiceCreateWithoutPackageItemsInput, ServiceUncheckedCreateWithoutPackageItemsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutPackageItemsInput
    upsert?: ServiceUpsertWithoutPackageItemsInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutPackageItemsInput, ServiceUpdateWithoutPackageItemsInput>, ServiceUncheckedUpdateWithoutPackageItemsInput>
  }

  export type UserCreateNestedOneWithoutAppointmentsCreatedInput = {
    create?: XOR<UserCreateWithoutAppointmentsCreatedInput, UserUncheckedCreateWithoutAppointmentsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppointmentsModifiedInput = {
    create?: XOR<UserCreateWithoutAppointmentsModifiedInput, UserUncheckedCreateWithoutAppointmentsModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsModifiedInput
    connect?: UserWhereUniqueInput
  }

  export type PatientCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
  }

  export type PackageCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PackageCreateWithoutAppointmentsInput, PackageUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutAppointmentsInput
    connect?: PackageWhereUniqueInput
  }

  export type ServiceCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<ServiceCreateWithoutAppointmentsInput, ServiceUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutAppointmentsInput
    connect?: ServiceWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
  }

  export type RoomCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutAppointmentsInput
    connect?: RoomWhereUniqueInput
  }

  export type PatientHistoryCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<PatientHistoryCreateWithoutAppointmentInput, PatientHistoryUncheckedCreateWithoutAppointmentInput> | PatientHistoryCreateWithoutAppointmentInput[] | PatientHistoryUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutAppointmentInput | PatientHistoryCreateOrConnectWithoutAppointmentInput[]
    createMany?: PatientHistoryCreateManyAppointmentInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<PatientHistoryCreateWithoutAppointmentInput, PatientHistoryUncheckedCreateWithoutAppointmentInput> | PatientHistoryCreateWithoutAppointmentInput[] | PatientHistoryUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutAppointmentInput | PatientHistoryCreateOrConnectWithoutAppointmentInput[]
    createMany?: PatientHistoryCreateManyAppointmentInputEnvelope
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
  }

  export type EnumAppointmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AppointmentStatus
  }

  export type UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsCreatedInput, UserUncheckedCreateWithoutAppointmentsCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsCreatedInput
    upsert?: UserUpsertWithoutAppointmentsCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsCreatedInput, UserUpdateWithoutAppointmentsCreatedInput>, UserUncheckedUpdateWithoutAppointmentsCreatedInput>
  }

  export type UserUpdateOneWithoutAppointmentsModifiedNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsModifiedInput, UserUncheckedCreateWithoutAppointmentsModifiedInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsModifiedInput
    upsert?: UserUpsertWithoutAppointmentsModifiedInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsModifiedInput, UserUpdateWithoutAppointmentsModifiedInput>, UserUncheckedUpdateWithoutAppointmentsModifiedInput>
  }

  export type PatientUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    upsert?: PatientUpsertWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutAppointmentsInput, PatientUpdateWithoutAppointmentsInput>, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PackageUpdateOneWithoutAppointmentsNestedInput = {
    create?: XOR<PackageCreateWithoutAppointmentsInput, PackageUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutAppointmentsInput
    upsert?: PackageUpsertWithoutAppointmentsInput
    disconnect?: PackageWhereInput | boolean
    delete?: PackageWhereInput | boolean
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutAppointmentsInput, PackageUpdateWithoutAppointmentsInput>, PackageUncheckedUpdateWithoutAppointmentsInput>
  }

  export type ServiceUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<ServiceCreateWithoutAppointmentsInput, ServiceUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: ServiceCreateOrConnectWithoutAppointmentsInput
    upsert?: ServiceUpsertWithoutAppointmentsInput
    connect?: ServiceWhereUniqueInput
    update?: XOR<XOR<ServiceUpdateToOneWithWhereWithoutAppointmentsInput, ServiceUpdateWithoutAppointmentsInput>, ServiceUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAppointmentsInput
    upsert?: UserUpsertWithoutAppointmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAppointmentsInput, UserUpdateWithoutAppointmentsInput>, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type RoomUpdateOneRequiredWithoutAppointmentsNestedInput = {
    create?: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: RoomCreateOrConnectWithoutAppointmentsInput
    upsert?: RoomUpsertWithoutAppointmentsInput
    connect?: RoomWhereUniqueInput
    update?: XOR<XOR<RoomUpdateToOneWithWhereWithoutAppointmentsInput, RoomUpdateWithoutAppointmentsInput>, RoomUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PatientHistoryUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutAppointmentInput, PatientHistoryUncheckedCreateWithoutAppointmentInput> | PatientHistoryCreateWithoutAppointmentInput[] | PatientHistoryUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutAppointmentInput | PatientHistoryCreateOrConnectWithoutAppointmentInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutAppointmentInput | PatientHistoryUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: PatientHistoryCreateManyAppointmentInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutAppointmentInput | PatientHistoryUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutAppointmentInput | PatientHistoryUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<PatientHistoryCreateWithoutAppointmentInput, PatientHistoryUncheckedCreateWithoutAppointmentInput> | PatientHistoryCreateWithoutAppointmentInput[] | PatientHistoryUncheckedCreateWithoutAppointmentInput[]
    connectOrCreate?: PatientHistoryCreateOrConnectWithoutAppointmentInput | PatientHistoryCreateOrConnectWithoutAppointmentInput[]
    upsert?: PatientHistoryUpsertWithWhereUniqueWithoutAppointmentInput | PatientHistoryUpsertWithWhereUniqueWithoutAppointmentInput[]
    createMany?: PatientHistoryCreateManyAppointmentInputEnvelope
    set?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    disconnect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    delete?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    connect?: PatientHistoryWhereUniqueInput | PatientHistoryWhereUniqueInput[]
    update?: PatientHistoryUpdateWithWhereUniqueWithoutAppointmentInput | PatientHistoryUpdateWithWhereUniqueWithoutAppointmentInput[]
    updateMany?: PatientHistoryUpdateManyWithWhereWithoutAppointmentInput | PatientHistoryUpdateManyWithWhereWithoutAppointmentInput[]
    deleteMany?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPaymentsInput
    connect?: PatientWhereUniqueInput
  }

  export type PackageCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<PackageCreateWithoutPaymentsInput, PackageUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPaymentsInput
    connect?: PackageWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedPaymentsInput = {
    create?: XOR<UserCreateWithoutCreatedPaymentsInput, UserUncheckedCreateWithoutCreatedPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPaymentsInput
    upsert?: PatientUpsertWithoutPaymentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPaymentsInput, PatientUpdateWithoutPaymentsInput>, PatientUncheckedUpdateWithoutPaymentsInput>
  }

  export type PackageUpdateOneWithoutPaymentsNestedInput = {
    create?: XOR<PackageCreateWithoutPaymentsInput, PackageUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPaymentsInput
    upsert?: PackageUpsertWithoutPaymentsInput
    disconnect?: PackageWhereInput | boolean
    delete?: PackageWhereInput | boolean
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutPaymentsInput, PackageUpdateWithoutPaymentsInput>, PackageUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedPaymentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPaymentsInput, UserUncheckedCreateWithoutCreatedPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPaymentsInput
    upsert?: UserUpsertWithoutCreatedPaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPaymentsInput, UserUpdateWithoutCreatedPaymentsInput>, UserUncheckedUpdateWithoutCreatedPaymentsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAuditActionFieldUpdateOperationsInput = {
    set?: $Enums.AuditAction
  }

  export type UserUpdateOneRequiredWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserCreateNestedOneWithoutUserSessionsInput = {
    create?: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserSessionsNestedInput = {
    create?: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserSessionsInput
    upsert?: UserUpsertWithoutUserSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserSessionsInput, UserUpdateWithoutUserSessionsInput>, UserUncheckedUpdateWithoutUserSessionsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type UserUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutConsentRecordsInput = {
    create?: XOR<UserCreateWithoutConsentRecordsInput, UserUncheckedCreateWithoutConsentRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsentRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumConsentTypeFieldUpdateOperationsInput = {
    set?: $Enums.ConsentType
  }

  export type UserUpdateOneWithoutConsentRecordsNestedInput = {
    create?: XOR<UserCreateWithoutConsentRecordsInput, UserUncheckedCreateWithoutConsentRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsentRecordsInput
    upsert?: UserUpsertWithoutConsentRecordsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConsentRecordsInput, UserUpdateWithoutConsentRecordsInput>, UserUncheckedUpdateWithoutConsentRecordsInput>
  }

  export type DataExportRequestCreaterequestedDataInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutDataExportRequestsInput = {
    create?: XOR<UserCreateWithoutDataExportRequestsInput, UserUncheckedCreateWithoutDataExportRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDataExportRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDataRequestTypeFieldUpdateOperationsInput = {
    set?: $Enums.DataRequestType
  }

  export type EnumDataRequestStatusFieldUpdateOperationsInput = {
    set?: $Enums.DataRequestStatus
  }

  export type DataExportRequestUpdaterequestedDataInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutDataExportRequestsNestedInput = {
    create?: XOR<UserCreateWithoutDataExportRequestsInput, UserUncheckedCreateWithoutDataExportRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDataExportRequestsInput
    upsert?: UserUpsertWithoutDataExportRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDataExportRequestsInput, UserUpdateWithoutDataExportRequestsInput>, UserUncheckedUpdateWithoutDataExportRequestsInput>
  }

  export type UserCreateNestedOneWithoutGdprAuditLogsInput = {
    create?: XOR<UserCreateWithoutGdprAuditLogsInput, UserUncheckedCreateWithoutGdprAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGdprAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumGDPRActionFieldUpdateOperationsInput = {
    set?: $Enums.GDPRAction
  }

  export type UserUpdateOneWithoutGdprAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutGdprAuditLogsInput, UserUncheckedCreateWithoutGdprAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGdprAuditLogsInput
    upsert?: UserUpsertWithoutGdprAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGdprAuditLogsInput, UserUpdateWithoutGdprAuditLogsInput>, UserUncheckedUpdateWithoutGdprAuditLogsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumStaffSpecializationNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.StaffSpecialization | EnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    in?: $Enums.StaffSpecialization[] | ListEnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StaffSpecialization[] | ListEnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStaffSpecializationNullableFilter<$PrismaModel> | $Enums.StaffSpecialization | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumStaffSpecializationNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StaffSpecialization | EnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    in?: $Enums.StaffSpecialization[] | ListEnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.StaffSpecialization[] | ListEnumStaffSpecializationFieldRefInput<$PrismaModel> | null
    not?: NestedEnumStaffSpecializationNullableWithAggregatesFilter<$PrismaModel> | $Enums.StaffSpecialization | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumStaffSpecializationNullableFilter<$PrismaModel>
    _max?: NestedEnumStaffSpecializationNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnumServiceCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceCategory | EnumServiceCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceCategory[] | ListEnumServiceCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceCategory[] | ListEnumServiceCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceCategoryFilter<$PrismaModel> | $Enums.ServiceCategory
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumServiceCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ServiceCategory | EnumServiceCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ServiceCategory[] | ListEnumServiceCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ServiceCategory[] | ListEnumServiceCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumServiceCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ServiceCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumServiceCategoryFilter<$PrismaModel>
    _max?: NestedEnumServiceCategoryFilter<$PrismaModel>
  }

  export type NestedEnumInsuranceTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.InsuranceType | EnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumInsuranceTypeNullableFilter<$PrismaModel> | $Enums.InsuranceType | null
  }

  export type NestedEnumInsuranceTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.InsuranceType | EnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.InsuranceType[] | ListEnumInsuranceTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumInsuranceTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.InsuranceType | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumInsuranceTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumInsuranceTypeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumPackageStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PackageStatus | EnumPackageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PackageStatus[] | ListEnumPackageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackageStatus[] | ListEnumPackageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPackageStatusFilter<$PrismaModel> | $Enums.PackageStatus
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumPackageStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PackageStatus | EnumPackageStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PackageStatus[] | ListEnumPackageStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PackageStatus[] | ListEnumPackageStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPackageStatusWithAggregatesFilter<$PrismaModel> | $Enums.PackageStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPackageStatusFilter<$PrismaModel>
    _max?: NestedEnumPackageStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumAppointmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusFilter<$PrismaModel> | $Enums.AppointmentStatus
  }

  export type NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AppointmentStatus | EnumAppointmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AppointmentStatus[] | ListEnumAppointmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAppointmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AppointmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAppointmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAppointmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodFilter<$PrismaModel> | $Enums.PaymentMethod
  }

  export type NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentMethodWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAuditActionFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionFilter<$PrismaModel> | $Enums.AuditAction
  }

  export type NestedEnumAuditActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuditAction | EnumAuditActionFieldRefInput<$PrismaModel>
    in?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuditAction[] | ListEnumAuditActionFieldRefInput<$PrismaModel>
    not?: NestedEnumAuditActionWithAggregatesFilter<$PrismaModel> | $Enums.AuditAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuditActionFilter<$PrismaModel>
    _max?: NestedEnumAuditActionFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumConsentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ConsentType | EnumConsentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConsentType[] | ListEnumConsentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConsentType[] | ListEnumConsentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConsentTypeFilter<$PrismaModel> | $Enums.ConsentType
  }

  export type NestedEnumConsentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ConsentType | EnumConsentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ConsentType[] | ListEnumConsentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ConsentType[] | ListEnumConsentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumConsentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ConsentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumConsentTypeFilter<$PrismaModel>
    _max?: NestedEnumConsentTypeFilter<$PrismaModel>
  }

  export type NestedEnumDataRequestTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestType | EnumDataRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestTypeFilter<$PrismaModel> | $Enums.DataRequestType
  }

  export type NestedEnumDataRequestStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestStatus | EnumDataRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestStatusFilter<$PrismaModel> | $Enums.DataRequestStatus
  }

  export type NestedEnumDataRequestTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestType | EnumDataRequestTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestType[] | ListEnumDataRequestTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestTypeWithAggregatesFilter<$PrismaModel> | $Enums.DataRequestType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDataRequestTypeFilter<$PrismaModel>
    _max?: NestedEnumDataRequestTypeFilter<$PrismaModel>
  }

  export type NestedEnumDataRequestStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DataRequestStatus | EnumDataRequestStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DataRequestStatus[] | ListEnumDataRequestStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDataRequestStatusWithAggregatesFilter<$PrismaModel> | $Enums.DataRequestStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDataRequestStatusFilter<$PrismaModel>
    _max?: NestedEnumDataRequestStatusFilter<$PrismaModel>
  }

  export type NestedEnumGDPRActionFilter<$PrismaModel = never> = {
    equals?: $Enums.GDPRAction | EnumGDPRActionFieldRefInput<$PrismaModel>
    in?: $Enums.GDPRAction[] | ListEnumGDPRActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.GDPRAction[] | ListEnumGDPRActionFieldRefInput<$PrismaModel>
    not?: NestedEnumGDPRActionFilter<$PrismaModel> | $Enums.GDPRAction
  }

  export type NestedEnumGDPRActionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GDPRAction | EnumGDPRActionFieldRefInput<$PrismaModel>
    in?: $Enums.GDPRAction[] | ListEnumGDPRActionFieldRefInput<$PrismaModel>
    notIn?: $Enums.GDPRAction[] | ListEnumGDPRActionFieldRefInput<$PrismaModel>
    not?: NestedEnumGDPRActionWithAggregatesFilter<$PrismaModel> | $Enums.GDPRAction
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGDPRActionFilter<$PrismaModel>
    _max?: NestedEnumGDPRActionFilter<$PrismaModel>
  }

  export type StaffScheduleCreateWithoutStaffInput = {
    id?: string
    dayOfWeek: number
    startTime: string
    endTime: string
    breakStartTime?: string | null
    breakEndTime?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffScheduleUncheckedCreateWithoutStaffInput = {
    id?: string
    dayOfWeek: number
    startTime: string
    endTime: string
    breakStartTime?: string | null
    breakEndTime?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffScheduleCreateOrConnectWithoutStaffInput = {
    where: StaffScheduleWhereUniqueInput
    create: XOR<StaffScheduleCreateWithoutStaffInput, StaffScheduleUncheckedCreateWithoutStaffInput>
  }

  export type StaffScheduleCreateManyStaffInputEnvelope = {
    data: StaffScheduleCreateManyStaffInput | StaffScheduleCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type StaffLeaveCreateWithoutStaffInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffLeaveUncheckedCreateWithoutStaffInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffLeaveCreateOrConnectWithoutStaffInput = {
    where: StaffLeaveWhereUniqueInput
    create: XOR<StaffLeaveCreateWithoutStaffInput, StaffLeaveUncheckedCreateWithoutStaffInput>
  }

  export type StaffLeaveCreateManyStaffInputEnvelope = {
    data: StaffLeaveCreateManyStaffInput | StaffLeaveCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutStaffInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutAppointmentsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutAppointmentsModifiedInput
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    package?: PackageCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutStaffInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutStaffInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput>
  }

  export type AppointmentCreateManyStaffInputEnvelope = {
    data: AppointmentCreateManyStaffInput | AppointmentCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: $Enums.AuditAction
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: $Enums.AuditAction
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PackageCreateWithoutCreatedByInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPackagesInput
    packageItems?: PackageItemCreateNestedManyWithoutPackageInput
    appointments?: AppointmentCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPackageInput
    payments?: PaymentCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutCreatedByInput = {
    id?: string
    patientId: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutPackageInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPackageInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutCreatedByInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput>
  }

  export type PackageCreateManyCreatedByInputEnvelope = {
    data: PackageCreateManyCreatedByInput | PackageCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutCreatedByInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPaymentsInput
    package?: PackageCreateNestedOneWithoutPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutCreatedByInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput>
  }

  export type PaymentCreateManyCreatedByInputEnvelope = {
    data: PaymentCreateManyCreatedByInput | PaymentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutCreatedByInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    modifiedBy?: UserCreateNestedOneWithoutPatientsModifiedInput
    packages?: PackageCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutCreatedByInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientCreateManyCreatedByInputEnvelope = {
    data: PatientCreateManyCreatedByInput | PatientCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutCreatedByInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    modifiedBy?: UserCreateNestedOneWithoutAppointmentsModifiedInput
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    package?: PackageCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutCreatedByInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput>
  }

  export type AppointmentCreateManyCreatedByInputEnvelope = {
    data: AppointmentCreateManyCreatedByInput | AppointmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    modifiedBy?: UserCreateNestedOneWithoutServicesModifiedInput
    packageItems?: PackageItemCreateNestedManyWithoutServiceInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutServiceInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutCreatedByInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutCreatedByInput, ServiceUncheckedCreateWithoutCreatedByInput>
  }

  export type ServiceCreateManyCreatedByInputEnvelope = {
    data: ServiceCreateManyCreatedByInput | ServiceCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type RoomCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    modifiedBy?: UserCreateNestedOneWithoutRoomsModifiedInput
    appointments?: AppointmentCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    modifiedById?: string | null
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutCreatedByInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutCreatedByInput, RoomUncheckedCreateWithoutCreatedByInput>
  }

  export type RoomCreateManyCreatedByInputEnvelope = {
    data: RoomCreateManyCreatedByInput | RoomCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientHistoryCreateWithoutCreatedByInput = {
    id?: string
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    modifiedBy?: UserCreateNestedOneWithoutPatientHistoryModifiedInput
    patient: PatientCreateNestedOneWithoutPatientHistoryInput
    package?: PackageCreateNestedOneWithoutPatientHistoryInput
    appointment?: AppointmentCreateNestedOneWithoutPatientHistoryInput
  }

  export type PatientHistoryUncheckedCreateWithoutCreatedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateOrConnectWithoutCreatedByInput = {
    where: PatientHistoryWhereUniqueInput
    create: XOR<PatientHistoryCreateWithoutCreatedByInput, PatientHistoryUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientHistoryCreateManyCreatedByInputEnvelope = {
    data: PatientHistoryCreateManyCreatedByInput | PatientHistoryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutModifiedByInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientsCreatedInput
    packages?: PackageCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutModifiedByInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    createdById: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutModifiedByInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutModifiedByInput, PatientUncheckedCreateWithoutModifiedByInput>
  }

  export type PatientCreateManyModifiedByInputEnvelope = {
    data: PatientCreateManyModifiedByInput | PatientCreateManyModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutModifiedByInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutAppointmentsCreatedInput
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    package?: PackageCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutModifiedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutModifiedByInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutModifiedByInput, AppointmentUncheckedCreateWithoutModifiedByInput>
  }

  export type AppointmentCreateManyModifiedByInputEnvelope = {
    data: AppointmentCreateManyModifiedByInput | AppointmentCreateManyModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type ServiceCreateWithoutModifiedByInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutServicesCreatedInput
    packageItems?: PackageItemCreateNestedManyWithoutServiceInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutModifiedByInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    createdById: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutServiceInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutModifiedByInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutModifiedByInput, ServiceUncheckedCreateWithoutModifiedByInput>
  }

  export type ServiceCreateManyModifiedByInputEnvelope = {
    data: ServiceCreateManyModifiedByInput | ServiceCreateManyModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type RoomCreateWithoutModifiedByInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutRoomsCreatedInput
    appointments?: AppointmentCreateNestedManyWithoutRoomInput
  }

  export type RoomUncheckedCreateWithoutModifiedByInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    createdById: string
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutRoomInput
  }

  export type RoomCreateOrConnectWithoutModifiedByInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutModifiedByInput, RoomUncheckedCreateWithoutModifiedByInput>
  }

  export type RoomCreateManyModifiedByInputEnvelope = {
    data: RoomCreateManyModifiedByInput | RoomCreateManyModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type PatientHistoryCreateWithoutModifiedByInput = {
    id?: string
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientHistoryCreatedInput
    patient: PatientCreateNestedOneWithoutPatientHistoryInput
    package?: PackageCreateNestedOneWithoutPatientHistoryInput
    appointment?: AppointmentCreateNestedOneWithoutPatientHistoryInput
  }

  export type PatientHistoryUncheckedCreateWithoutModifiedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateOrConnectWithoutModifiedByInput = {
    where: PatientHistoryWhereUniqueInput
    create: XOR<PatientHistoryCreateWithoutModifiedByInput, PatientHistoryUncheckedCreateWithoutModifiedByInput>
  }

  export type PatientHistoryCreateManyModifiedByInputEnvelope = {
    data: PatientHistoryCreateManyModifiedByInput | PatientHistoryCreateManyModifiedByInput[]
    skipDuplicates?: boolean
  }

  export type ConsentRecordCreateWithoutUserInput = {
    id?: string
    consentType: $Enums.ConsentType
    granted?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    consentString?: string | null
    expiresAt?: Date | string | null
    withdrawnAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentRecordUncheckedCreateWithoutUserInput = {
    id?: string
    consentType: $Enums.ConsentType
    granted?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    consentString?: string | null
    expiresAt?: Date | string | null
    withdrawnAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentRecordCreateOrConnectWithoutUserInput = {
    where: ConsentRecordWhereUniqueInput
    create: XOR<ConsentRecordCreateWithoutUserInput, ConsentRecordUncheckedCreateWithoutUserInput>
  }

  export type ConsentRecordCreateManyUserInputEnvelope = {
    data: ConsentRecordCreateManyUserInput | ConsentRecordCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DataExportRequestCreateWithoutUserInput = {
    id?: string
    requestType?: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestedData?: DataExportRequestCreaterequestedDataInput | string[]
    filePath?: string | null
    downloadedAt?: Date | string | null
    expiresAt: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataExportRequestUncheckedCreateWithoutUserInput = {
    id?: string
    requestType?: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestedData?: DataExportRequestCreaterequestedDataInput | string[]
    filePath?: string | null
    downloadedAt?: Date | string | null
    expiresAt: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataExportRequestCreateOrConnectWithoutUserInput = {
    where: DataExportRequestWhereUniqueInput
    create: XOR<DataExportRequestCreateWithoutUserInput, DataExportRequestUncheckedCreateWithoutUserInput>
  }

  export type DataExportRequestCreateManyUserInputEnvelope = {
    data: DataExportRequestCreateManyUserInput | DataExportRequestCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type GDPRAuditLogCreateWithoutUserInput = {
    id?: string
    action: $Enums.GDPRAction
    dataType: string
    recordId?: string | null
    legalBasis?: string | null
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    consentId?: string | null
    automated?: boolean
    createdAt?: Date | string
  }

  export type GDPRAuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: $Enums.GDPRAction
    dataType: string
    recordId?: string | null
    legalBasis?: string | null
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    consentId?: string | null
    automated?: boolean
    createdAt?: Date | string
  }

  export type GDPRAuditLogCreateOrConnectWithoutUserInput = {
    where: GDPRAuditLogWhereUniqueInput
    create: XOR<GDPRAuditLogCreateWithoutUserInput, GDPRAuditLogUncheckedCreateWithoutUserInput>
  }

  export type GDPRAuditLogCreateManyUserInputEnvelope = {
    data: GDPRAuditLogCreateManyUserInput | GDPRAuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StaffScheduleUpsertWithWhereUniqueWithoutStaffInput = {
    where: StaffScheduleWhereUniqueInput
    update: XOR<StaffScheduleUpdateWithoutStaffInput, StaffScheduleUncheckedUpdateWithoutStaffInput>
    create: XOR<StaffScheduleCreateWithoutStaffInput, StaffScheduleUncheckedCreateWithoutStaffInput>
  }

  export type StaffScheduleUpdateWithWhereUniqueWithoutStaffInput = {
    where: StaffScheduleWhereUniqueInput
    data: XOR<StaffScheduleUpdateWithoutStaffInput, StaffScheduleUncheckedUpdateWithoutStaffInput>
  }

  export type StaffScheduleUpdateManyWithWhereWithoutStaffInput = {
    where: StaffScheduleScalarWhereInput
    data: XOR<StaffScheduleUpdateManyMutationInput, StaffScheduleUncheckedUpdateManyWithoutStaffInput>
  }

  export type StaffScheduleScalarWhereInput = {
    AND?: StaffScheduleScalarWhereInput | StaffScheduleScalarWhereInput[]
    OR?: StaffScheduleScalarWhereInput[]
    NOT?: StaffScheduleScalarWhereInput | StaffScheduleScalarWhereInput[]
    id?: StringFilter<"StaffSchedule"> | string
    staffId?: StringFilter<"StaffSchedule"> | string
    dayOfWeek?: IntFilter<"StaffSchedule"> | number
    startTime?: StringFilter<"StaffSchedule"> | string
    endTime?: StringFilter<"StaffSchedule"> | string
    breakStartTime?: StringNullableFilter<"StaffSchedule"> | string | null
    breakEndTime?: StringNullableFilter<"StaffSchedule"> | string | null
    isActive?: BoolFilter<"StaffSchedule"> | boolean
    createdAt?: DateTimeFilter<"StaffSchedule"> | Date | string
    updatedAt?: DateTimeFilter<"StaffSchedule"> | Date | string
  }

  export type StaffLeaveUpsertWithWhereUniqueWithoutStaffInput = {
    where: StaffLeaveWhereUniqueInput
    update: XOR<StaffLeaveUpdateWithoutStaffInput, StaffLeaveUncheckedUpdateWithoutStaffInput>
    create: XOR<StaffLeaveCreateWithoutStaffInput, StaffLeaveUncheckedCreateWithoutStaffInput>
  }

  export type StaffLeaveUpdateWithWhereUniqueWithoutStaffInput = {
    where: StaffLeaveWhereUniqueInput
    data: XOR<StaffLeaveUpdateWithoutStaffInput, StaffLeaveUncheckedUpdateWithoutStaffInput>
  }

  export type StaffLeaveUpdateManyWithWhereWithoutStaffInput = {
    where: StaffLeaveScalarWhereInput
    data: XOR<StaffLeaveUpdateManyMutationInput, StaffLeaveUncheckedUpdateManyWithoutStaffInput>
  }

  export type StaffLeaveScalarWhereInput = {
    AND?: StaffLeaveScalarWhereInput | StaffLeaveScalarWhereInput[]
    OR?: StaffLeaveScalarWhereInput[]
    NOT?: StaffLeaveScalarWhereInput | StaffLeaveScalarWhereInput[]
    id?: StringFilter<"StaffLeave"> | string
    staffId?: StringFilter<"StaffLeave"> | string
    startDate?: DateTimeFilter<"StaffLeave"> | Date | string
    endDate?: DateTimeFilter<"StaffLeave"> | Date | string
    reason?: StringNullableFilter<"StaffLeave"> | string | null
    isApproved?: BoolFilter<"StaffLeave"> | boolean
    createdAt?: DateTimeFilter<"StaffLeave"> | Date | string
    updatedAt?: DateTimeFilter<"StaffLeave"> | Date | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutStaffInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutStaffInput, AppointmentUncheckedUpdateWithoutStaffInput>
    create: XOR<AppointmentCreateWithoutStaffInput, AppointmentUncheckedCreateWithoutStaffInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutStaffInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutStaffInput, AppointmentUncheckedUpdateWithoutStaffInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutStaffInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutStaffInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    OR?: AppointmentScalarWhereInput[]
    NOT?: AppointmentScalarWhereInput | AppointmentScalarWhereInput[]
    id?: StringFilter<"Appointment"> | string
    patientId?: StringFilter<"Appointment"> | string
    packageId?: StringNullableFilter<"Appointment"> | string | null
    serviceId?: StringFilter<"Appointment"> | string
    staffId?: StringFilter<"Appointment"> | string
    roomId?: StringFilter<"Appointment"> | string
    scheduledDate?: DateTimeFilter<"Appointment"> | Date | string
    startTime?: StringFilter<"Appointment"> | string
    endTime?: StringFilter<"Appointment"> | string
    status?: EnumAppointmentStatusFilter<"Appointment"> | $Enums.AppointmentStatus
    notes?: StringNullableFilter<"Appointment"> | string | null
    hasConflict?: BoolFilter<"Appointment"> | boolean
    conflictReason?: StringNullableFilter<"Appointment"> | string | null
    isVisible?: BoolFilter<"Appointment"> | boolean
    createdById?: StringFilter<"Appointment"> | string
    modifiedById?: StringNullableFilter<"Appointment"> | string | null
    createdAt?: DateTimeFilter<"Appointment"> | Date | string
    updatedAt?: DateTimeFilter<"Appointment"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringFilter<"AuditLog"> | string
    action?: EnumAuditActionFilter<"AuditLog"> | $Enums.AuditAction
    tableName?: StringFilter<"AuditLog"> | string
    recordId?: StringFilter<"AuditLog"> | string
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    description?: StringNullableFilter<"AuditLog"> | string | null
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    sessionToken?: StringFilter<"UserSession"> | string
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    updatedAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type PackageUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PackageWhereUniqueInput
    update: XOR<PackageUpdateWithoutCreatedByInput, PackageUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PackageCreateWithoutCreatedByInput, PackageUncheckedCreateWithoutCreatedByInput>
  }

  export type PackageUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PackageWhereUniqueInput
    data: XOR<PackageUpdateWithoutCreatedByInput, PackageUncheckedUpdateWithoutCreatedByInput>
  }

  export type PackageUpdateManyWithWhereWithoutCreatedByInput = {
    where: PackageScalarWhereInput
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PackageScalarWhereInput = {
    AND?: PackageScalarWhereInput | PackageScalarWhereInput[]
    OR?: PackageScalarWhereInput[]
    NOT?: PackageScalarWhereInput | PackageScalarWhereInput[]
    id?: StringFilter<"Package"> | string
    patientId?: StringFilter<"Package"> | string
    name?: StringFilter<"Package"> | string
    totalPrice?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    discountAmount?: DecimalNullableFilter<"Package"> | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFilter<"Package"> | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFilter<"Package"> | $Enums.PaymentStatus
    createdById?: StringFilter<"Package"> | string
    createdAt?: DateTimeFilter<"Package"> | Date | string
    updatedAt?: DateTimeFilter<"Package"> | Date | string
  }

  export type PaymentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutCreatedByInput, PaymentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PaymentCreateWithoutCreatedByInput, PaymentUncheckedCreateWithoutCreatedByInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutCreatedByInput, PaymentUncheckedUpdateWithoutCreatedByInput>
  }

  export type PaymentUpdateManyWithWhereWithoutCreatedByInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    patientId?: StringFilter<"Payment"> | string
    packageId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFilter<"Payment"> | $Enums.PaymentMethod
    paidSessionsCount?: IntNullableFilter<"Payment"> | number | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    paidAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    notes?: StringNullableFilter<"Payment"> | string | null
    createdById?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringNullableFilter<"Notification"> | string | null
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    scheduledFor?: DateTimeNullableFilter<"Notification"> | Date | string | null
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type PatientUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutCreatedByInput, PatientUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientCreateWithoutCreatedByInput, PatientUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutCreatedByInput, PatientUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    id?: StringFilter<"Patient"> | string
    firstName?: StringFilter<"Patient"> | string
    lastName?: StringFilter<"Patient"> | string
    dateOfBirth?: DateTimeNullableFilter<"Patient"> | Date | string | null
    email?: StringNullableFilter<"Patient"> | string | null
    phone?: StringFilter<"Patient"> | string
    address?: StringNullableFilter<"Patient"> | string | null
    socialInsuranceNumber?: StringNullableFilter<"Patient"> | string | null
    notes?: StringNullableFilter<"Patient"> | string | null
    doctorReferral?: StringNullableFilter<"Patient"> | string | null
    insuranceType?: EnumInsuranceTypeNullableFilter<"Patient"> | $Enums.InsuranceType | null
    createdById?: StringFilter<"Patient"> | string
    modifiedById?: StringNullableFilter<"Patient"> | string | null
    isActive?: BoolFilter<"Patient"> | boolean
    createdAt?: DateTimeFilter<"Patient"> | Date | string
    updatedAt?: DateTimeFilter<"Patient"> | Date | string
  }

  export type AppointmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutCreatedByInput, AppointmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<AppointmentCreateWithoutCreatedByInput, AppointmentUncheckedCreateWithoutCreatedByInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutCreatedByInput, AppointmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ServiceUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutCreatedByInput, ServiceUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ServiceCreateWithoutCreatedByInput, ServiceUncheckedCreateWithoutCreatedByInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutCreatedByInput, ServiceUncheckedUpdateWithoutCreatedByInput>
  }

  export type ServiceUpdateManyWithWhereWithoutCreatedByInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ServiceScalarWhereInput = {
    AND?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    OR?: ServiceScalarWhereInput[]
    NOT?: ServiceScalarWhereInput | ServiceScalarWhereInput[]
    id?: StringFilter<"Service"> | string
    name?: StringFilter<"Service"> | string
    description?: StringNullableFilter<"Service"> | string | null
    duration?: IntFilter<"Service"> | number
    price?: DecimalFilter<"Service"> | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFilter<"Service"> | $Enums.ServiceCategory
    categoryColor?: StringFilter<"Service"> | string
    sessionCount?: IntFilter<"Service"> | number
    isForChildren?: BoolFilter<"Service"> | boolean
    isVoucher?: BoolFilter<"Service"> | boolean
    createdById?: StringFilter<"Service"> | string
    modifiedById?: StringNullableFilter<"Service"> | string | null
    isActive?: BoolFilter<"Service"> | boolean
    createdAt?: DateTimeFilter<"Service"> | Date | string
    updatedAt?: DateTimeFilter<"Service"> | Date | string
  }

  export type RoomUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutCreatedByInput, RoomUncheckedUpdateWithoutCreatedByInput>
    create: XOR<RoomCreateWithoutCreatedByInput, RoomUncheckedCreateWithoutCreatedByInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutCreatedByInput, RoomUncheckedUpdateWithoutCreatedByInput>
  }

  export type RoomUpdateManyWithWhereWithoutCreatedByInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type RoomScalarWhereInput = {
    AND?: RoomScalarWhereInput | RoomScalarWhereInput[]
    OR?: RoomScalarWhereInput[]
    NOT?: RoomScalarWhereInput | RoomScalarWhereInput[]
    id?: StringFilter<"Room"> | string
    name?: StringFilter<"Room"> | string
    description?: StringNullableFilter<"Room"> | string | null
    features?: StringNullableListFilter<"Room">
    createdById?: StringFilter<"Room"> | string
    modifiedById?: StringNullableFilter<"Room"> | string | null
    isActive?: BoolFilter<"Room"> | boolean
    capacity?: IntFilter<"Room"> | number
    createdAt?: DateTimeFilter<"Room"> | Date | string
    updatedAt?: DateTimeFilter<"Room"> | Date | string
  }

  export type PatientHistoryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PatientHistoryWhereUniqueInput
    update: XOR<PatientHistoryUpdateWithoutCreatedByInput, PatientHistoryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PatientHistoryCreateWithoutCreatedByInput, PatientHistoryUncheckedCreateWithoutCreatedByInput>
  }

  export type PatientHistoryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PatientHistoryWhereUniqueInput
    data: XOR<PatientHistoryUpdateWithoutCreatedByInput, PatientHistoryUncheckedUpdateWithoutCreatedByInput>
  }

  export type PatientHistoryUpdateManyWithWhereWithoutCreatedByInput = {
    where: PatientHistoryScalarWhereInput
    data: XOR<PatientHistoryUpdateManyMutationInput, PatientHistoryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PatientHistoryScalarWhereInput = {
    AND?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
    OR?: PatientHistoryScalarWhereInput[]
    NOT?: PatientHistoryScalarWhereInput | PatientHistoryScalarWhereInput[]
    id?: StringFilter<"PatientHistory"> | string
    patientId?: StringFilter<"PatientHistory"> | string
    packageId?: StringNullableFilter<"PatientHistory"> | string | null
    appointmentId?: StringNullableFilter<"PatientHistory"> | string | null
    mainSubjectiveProblem?: StringNullableFilter<"PatientHistory"> | string | null
    symptomHistory?: StringNullableFilter<"PatientHistory"> | string | null
    previousCourseAndTherapy?: StringNullableFilter<"PatientHistory"> | string | null
    patientGoals?: StringNullableFilter<"PatientHistory"> | string | null
    activityStatus?: StringNullableFilter<"PatientHistory"> | string | null
    trunkAndHeadParticularities?: StringNullableFilter<"PatientHistory"> | string | null
    edemaTrophicsAtrophies?: StringNullableFilter<"PatientHistory"> | string | null
    notes?: StringNullableFilter<"PatientHistory"> | string | null
    createdById?: StringFilter<"PatientHistory"> | string
    modifiedById?: StringNullableFilter<"PatientHistory"> | string | null
    recordedAt?: DateTimeFilter<"PatientHistory"> | Date | string
    createdAt?: DateTimeFilter<"PatientHistory"> | Date | string
    updatedAt?: DateTimeFilter<"PatientHistory"> | Date | string
  }

  export type PatientUpsertWithWhereUniqueWithoutModifiedByInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutModifiedByInput, PatientUncheckedUpdateWithoutModifiedByInput>
    create: XOR<PatientCreateWithoutModifiedByInput, PatientUncheckedCreateWithoutModifiedByInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutModifiedByInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutModifiedByInput, PatientUncheckedUpdateWithoutModifiedByInput>
  }

  export type PatientUpdateManyWithWhereWithoutModifiedByInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutModifiedByInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutModifiedByInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutModifiedByInput, AppointmentUncheckedUpdateWithoutModifiedByInput>
    create: XOR<AppointmentCreateWithoutModifiedByInput, AppointmentUncheckedCreateWithoutModifiedByInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutModifiedByInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutModifiedByInput, AppointmentUncheckedUpdateWithoutModifiedByInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutModifiedByInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutModifiedByInput>
  }

  export type ServiceUpsertWithWhereUniqueWithoutModifiedByInput = {
    where: ServiceWhereUniqueInput
    update: XOR<ServiceUpdateWithoutModifiedByInput, ServiceUncheckedUpdateWithoutModifiedByInput>
    create: XOR<ServiceCreateWithoutModifiedByInput, ServiceUncheckedCreateWithoutModifiedByInput>
  }

  export type ServiceUpdateWithWhereUniqueWithoutModifiedByInput = {
    where: ServiceWhereUniqueInput
    data: XOR<ServiceUpdateWithoutModifiedByInput, ServiceUncheckedUpdateWithoutModifiedByInput>
  }

  export type ServiceUpdateManyWithWhereWithoutModifiedByInput = {
    where: ServiceScalarWhereInput
    data: XOR<ServiceUpdateManyMutationInput, ServiceUncheckedUpdateManyWithoutModifiedByInput>
  }

  export type RoomUpsertWithWhereUniqueWithoutModifiedByInput = {
    where: RoomWhereUniqueInput
    update: XOR<RoomUpdateWithoutModifiedByInput, RoomUncheckedUpdateWithoutModifiedByInput>
    create: XOR<RoomCreateWithoutModifiedByInput, RoomUncheckedCreateWithoutModifiedByInput>
  }

  export type RoomUpdateWithWhereUniqueWithoutModifiedByInput = {
    where: RoomWhereUniqueInput
    data: XOR<RoomUpdateWithoutModifiedByInput, RoomUncheckedUpdateWithoutModifiedByInput>
  }

  export type RoomUpdateManyWithWhereWithoutModifiedByInput = {
    where: RoomScalarWhereInput
    data: XOR<RoomUpdateManyMutationInput, RoomUncheckedUpdateManyWithoutModifiedByInput>
  }

  export type PatientHistoryUpsertWithWhereUniqueWithoutModifiedByInput = {
    where: PatientHistoryWhereUniqueInput
    update: XOR<PatientHistoryUpdateWithoutModifiedByInput, PatientHistoryUncheckedUpdateWithoutModifiedByInput>
    create: XOR<PatientHistoryCreateWithoutModifiedByInput, PatientHistoryUncheckedCreateWithoutModifiedByInput>
  }

  export type PatientHistoryUpdateWithWhereUniqueWithoutModifiedByInput = {
    where: PatientHistoryWhereUniqueInput
    data: XOR<PatientHistoryUpdateWithoutModifiedByInput, PatientHistoryUncheckedUpdateWithoutModifiedByInput>
  }

  export type PatientHistoryUpdateManyWithWhereWithoutModifiedByInput = {
    where: PatientHistoryScalarWhereInput
    data: XOR<PatientHistoryUpdateManyMutationInput, PatientHistoryUncheckedUpdateManyWithoutModifiedByInput>
  }

  export type ConsentRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: ConsentRecordWhereUniqueInput
    update: XOR<ConsentRecordUpdateWithoutUserInput, ConsentRecordUncheckedUpdateWithoutUserInput>
    create: XOR<ConsentRecordCreateWithoutUserInput, ConsentRecordUncheckedCreateWithoutUserInput>
  }

  export type ConsentRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: ConsentRecordWhereUniqueInput
    data: XOR<ConsentRecordUpdateWithoutUserInput, ConsentRecordUncheckedUpdateWithoutUserInput>
  }

  export type ConsentRecordUpdateManyWithWhereWithoutUserInput = {
    where: ConsentRecordScalarWhereInput
    data: XOR<ConsentRecordUpdateManyMutationInput, ConsentRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type ConsentRecordScalarWhereInput = {
    AND?: ConsentRecordScalarWhereInput | ConsentRecordScalarWhereInput[]
    OR?: ConsentRecordScalarWhereInput[]
    NOT?: ConsentRecordScalarWhereInput | ConsentRecordScalarWhereInput[]
    id?: StringFilter<"ConsentRecord"> | string
    userId?: StringNullableFilter<"ConsentRecord"> | string | null
    consentType?: EnumConsentTypeFilter<"ConsentRecord"> | $Enums.ConsentType
    granted?: BoolFilter<"ConsentRecord"> | boolean
    ipAddress?: StringNullableFilter<"ConsentRecord"> | string | null
    userAgent?: StringNullableFilter<"ConsentRecord"> | string | null
    consentString?: StringNullableFilter<"ConsentRecord"> | string | null
    expiresAt?: DateTimeNullableFilter<"ConsentRecord"> | Date | string | null
    withdrawnAt?: DateTimeNullableFilter<"ConsentRecord"> | Date | string | null
    createdAt?: DateTimeFilter<"ConsentRecord"> | Date | string
    updatedAt?: DateTimeFilter<"ConsentRecord"> | Date | string
  }

  export type DataExportRequestUpsertWithWhereUniqueWithoutUserInput = {
    where: DataExportRequestWhereUniqueInput
    update: XOR<DataExportRequestUpdateWithoutUserInput, DataExportRequestUncheckedUpdateWithoutUserInput>
    create: XOR<DataExportRequestCreateWithoutUserInput, DataExportRequestUncheckedCreateWithoutUserInput>
  }

  export type DataExportRequestUpdateWithWhereUniqueWithoutUserInput = {
    where: DataExportRequestWhereUniqueInput
    data: XOR<DataExportRequestUpdateWithoutUserInput, DataExportRequestUncheckedUpdateWithoutUserInput>
  }

  export type DataExportRequestUpdateManyWithWhereWithoutUserInput = {
    where: DataExportRequestScalarWhereInput
    data: XOR<DataExportRequestUpdateManyMutationInput, DataExportRequestUncheckedUpdateManyWithoutUserInput>
  }

  export type DataExportRequestScalarWhereInput = {
    AND?: DataExportRequestScalarWhereInput | DataExportRequestScalarWhereInput[]
    OR?: DataExportRequestScalarWhereInput[]
    NOT?: DataExportRequestScalarWhereInput | DataExportRequestScalarWhereInput[]
    id?: StringFilter<"DataExportRequest"> | string
    userId?: StringFilter<"DataExportRequest"> | string
    requestType?: EnumDataRequestTypeFilter<"DataExportRequest"> | $Enums.DataRequestType
    status?: EnumDataRequestStatusFilter<"DataExportRequest"> | $Enums.DataRequestStatus
    requestedData?: StringNullableListFilter<"DataExportRequest">
    filePath?: StringNullableFilter<"DataExportRequest"> | string | null
    downloadedAt?: DateTimeNullableFilter<"DataExportRequest"> | Date | string | null
    expiresAt?: DateTimeFilter<"DataExportRequest"> | Date | string
    notes?: StringNullableFilter<"DataExportRequest"> | string | null
    createdAt?: DateTimeFilter<"DataExportRequest"> | Date | string
    updatedAt?: DateTimeFilter<"DataExportRequest"> | Date | string
  }

  export type GDPRAuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: GDPRAuditLogWhereUniqueInput
    update: XOR<GDPRAuditLogUpdateWithoutUserInput, GDPRAuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<GDPRAuditLogCreateWithoutUserInput, GDPRAuditLogUncheckedCreateWithoutUserInput>
  }

  export type GDPRAuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: GDPRAuditLogWhereUniqueInput
    data: XOR<GDPRAuditLogUpdateWithoutUserInput, GDPRAuditLogUncheckedUpdateWithoutUserInput>
  }

  export type GDPRAuditLogUpdateManyWithWhereWithoutUserInput = {
    where: GDPRAuditLogScalarWhereInput
    data: XOR<GDPRAuditLogUpdateManyMutationInput, GDPRAuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type GDPRAuditLogScalarWhereInput = {
    AND?: GDPRAuditLogScalarWhereInput | GDPRAuditLogScalarWhereInput[]
    OR?: GDPRAuditLogScalarWhereInput[]
    NOT?: GDPRAuditLogScalarWhereInput | GDPRAuditLogScalarWhereInput[]
    id?: StringFilter<"GDPRAuditLog"> | string
    userId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    action?: EnumGDPRActionFilter<"GDPRAuditLog"> | $Enums.GDPRAction
    dataType?: StringFilter<"GDPRAuditLog"> | string
    recordId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    legalBasis?: StringNullableFilter<"GDPRAuditLog"> | string | null
    purpose?: StringFilter<"GDPRAuditLog"> | string
    ipAddress?: StringNullableFilter<"GDPRAuditLog"> | string | null
    userAgent?: StringNullableFilter<"GDPRAuditLog"> | string | null
    consentId?: StringNullableFilter<"GDPRAuditLog"> | string | null
    automated?: BoolFilter<"GDPRAuditLog"> | boolean
    createdAt?: DateTimeFilter<"GDPRAuditLog"> | Date | string
  }

  export type UserCreateWithoutStaffSchedulesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStaffSchedulesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStaffSchedulesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffSchedulesInput, UserUncheckedCreateWithoutStaffSchedulesInput>
  }

  export type UserUpsertWithoutStaffSchedulesInput = {
    update: XOR<UserUpdateWithoutStaffSchedulesInput, UserUncheckedUpdateWithoutStaffSchedulesInput>
    create: XOR<UserCreateWithoutStaffSchedulesInput, UserUncheckedCreateWithoutStaffSchedulesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffSchedulesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffSchedulesInput, UserUncheckedUpdateWithoutStaffSchedulesInput>
  }

  export type UserUpdateWithoutStaffSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStaffSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStaffLeavesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStaffLeavesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStaffLeavesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStaffLeavesInput, UserUncheckedCreateWithoutStaffLeavesInput>
  }

  export type UserUpsertWithoutStaffLeavesInput = {
    update: XOR<UserUpdateWithoutStaffLeavesInput, UserUncheckedUpdateWithoutStaffLeavesInput>
    create: XOR<UserCreateWithoutStaffLeavesInput, UserUncheckedCreateWithoutStaffLeavesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStaffLeavesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStaffLeavesInput, UserUncheckedUpdateWithoutStaffLeavesInput>
  }

  export type UserUpdateWithoutStaffLeavesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStaffLeavesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutRoomsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoomsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoomsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoomsCreatedInput, UserUncheckedCreateWithoutRoomsCreatedInput>
  }

  export type UserCreateWithoutRoomsModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoomsModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRoomsModifiedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoomsModifiedInput, UserUncheckedCreateWithoutRoomsModifiedInput>
  }

  export type AppointmentCreateWithoutRoomInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutAppointmentsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutAppointmentsModifiedInput
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    package?: PackageCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutRoomInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutRoomInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutRoomInput, AppointmentUncheckedCreateWithoutRoomInput>
  }

  export type AppointmentCreateManyRoomInputEnvelope = {
    data: AppointmentCreateManyRoomInput | AppointmentCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutRoomsCreatedInput = {
    update: XOR<UserUpdateWithoutRoomsCreatedInput, UserUncheckedUpdateWithoutRoomsCreatedInput>
    create: XOR<UserCreateWithoutRoomsCreatedInput, UserUncheckedCreateWithoutRoomsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoomsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoomsCreatedInput, UserUncheckedUpdateWithoutRoomsCreatedInput>
  }

  export type UserUpdateWithoutRoomsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoomsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutRoomsModifiedInput = {
    update: XOR<UserUpdateWithoutRoomsModifiedInput, UserUncheckedUpdateWithoutRoomsModifiedInput>
    create: XOR<UserCreateWithoutRoomsModifiedInput, UserUncheckedCreateWithoutRoomsModifiedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRoomsModifiedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRoomsModifiedInput, UserUncheckedUpdateWithoutRoomsModifiedInput>
  }

  export type UserUpdateWithoutRoomsModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRoomsModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AppointmentUpsertWithWhereUniqueWithoutRoomInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutRoomInput, AppointmentUncheckedUpdateWithoutRoomInput>
    create: XOR<AppointmentCreateWithoutRoomInput, AppointmentUncheckedCreateWithoutRoomInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutRoomInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutRoomInput, AppointmentUncheckedUpdateWithoutRoomInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutRoomInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutRoomInput>
  }

  export type UserCreateWithoutServicesCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutServicesCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutServicesCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServicesCreatedInput, UserUncheckedCreateWithoutServicesCreatedInput>
  }

  export type UserCreateWithoutServicesModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutServicesModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutServicesModifiedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutServicesModifiedInput, UserUncheckedCreateWithoutServicesModifiedInput>
  }

  export type PackageItemCreateWithoutServiceInput = {
    id?: string
    sessionCount: number
    completedCount?: number
    package: PackageCreateNestedOneWithoutPackageItemsInput
  }

  export type PackageItemUncheckedCreateWithoutServiceInput = {
    id?: string
    packageId: string
    sessionCount: number
    completedCount?: number
  }

  export type PackageItemCreateOrConnectWithoutServiceInput = {
    where: PackageItemWhereUniqueInput
    create: XOR<PackageItemCreateWithoutServiceInput, PackageItemUncheckedCreateWithoutServiceInput>
  }

  export type PackageItemCreateManyServiceInputEnvelope = {
    data: PackageItemCreateManyServiceInput | PackageItemCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutServiceInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutAppointmentsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutAppointmentsModifiedInput
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    package?: PackageCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutServiceInput = {
    id?: string
    patientId: string
    packageId?: string | null
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutServiceInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput>
  }

  export type AppointmentCreateManyServiceInputEnvelope = {
    data: AppointmentCreateManyServiceInput | AppointmentCreateManyServiceInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutServicesCreatedInput = {
    update: XOR<UserUpdateWithoutServicesCreatedInput, UserUncheckedUpdateWithoutServicesCreatedInput>
    create: XOR<UserCreateWithoutServicesCreatedInput, UserUncheckedCreateWithoutServicesCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutServicesCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutServicesCreatedInput, UserUncheckedUpdateWithoutServicesCreatedInput>
  }

  export type UserUpdateWithoutServicesCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutServicesCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutServicesModifiedInput = {
    update: XOR<UserUpdateWithoutServicesModifiedInput, UserUncheckedUpdateWithoutServicesModifiedInput>
    create: XOR<UserCreateWithoutServicesModifiedInput, UserUncheckedCreateWithoutServicesModifiedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutServicesModifiedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutServicesModifiedInput, UserUncheckedUpdateWithoutServicesModifiedInput>
  }

  export type UserUpdateWithoutServicesModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutServicesModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PackageItemUpsertWithWhereUniqueWithoutServiceInput = {
    where: PackageItemWhereUniqueInput
    update: XOR<PackageItemUpdateWithoutServiceInput, PackageItemUncheckedUpdateWithoutServiceInput>
    create: XOR<PackageItemCreateWithoutServiceInput, PackageItemUncheckedCreateWithoutServiceInput>
  }

  export type PackageItemUpdateWithWhereUniqueWithoutServiceInput = {
    where: PackageItemWhereUniqueInput
    data: XOR<PackageItemUpdateWithoutServiceInput, PackageItemUncheckedUpdateWithoutServiceInput>
  }

  export type PackageItemUpdateManyWithWhereWithoutServiceInput = {
    where: PackageItemScalarWhereInput
    data: XOR<PackageItemUpdateManyMutationInput, PackageItemUncheckedUpdateManyWithoutServiceInput>
  }

  export type PackageItemScalarWhereInput = {
    AND?: PackageItemScalarWhereInput | PackageItemScalarWhereInput[]
    OR?: PackageItemScalarWhereInput[]
    NOT?: PackageItemScalarWhereInput | PackageItemScalarWhereInput[]
    id?: StringFilter<"PackageItem"> | string
    packageId?: StringFilter<"PackageItem"> | string
    serviceId?: StringFilter<"PackageItem"> | string
    sessionCount?: IntFilter<"PackageItem"> | number
    completedCount?: IntFilter<"PackageItem"> | number
  }

  export type AppointmentUpsertWithWhereUniqueWithoutServiceInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutServiceInput, AppointmentUncheckedUpdateWithoutServiceInput>
    create: XOR<AppointmentCreateWithoutServiceInput, AppointmentUncheckedCreateWithoutServiceInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutServiceInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutServiceInput, AppointmentUncheckedUpdateWithoutServiceInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutServiceInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutServiceInput>
  }

  export type UserCreateWithoutPatientsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientsCreatedInput, UserUncheckedCreateWithoutPatientsCreatedInput>
  }

  export type UserCreateWithoutPatientsModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientsModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientsModifiedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientsModifiedInput, UserUncheckedCreateWithoutPatientsModifiedInput>
  }

  export type PackageCreateWithoutPatientInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedPackagesInput
    packageItems?: PackageItemCreateNestedManyWithoutPackageInput
    appointments?: AppointmentCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPackageInput
    payments?: PaymentCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutPatientInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutPackageInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPackageInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutPatientInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutPatientInput, PackageUncheckedCreateWithoutPatientInput>
  }

  export type PackageCreateManyPatientInputEnvelope = {
    data: PackageCreateManyPatientInput | PackageCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutPatientInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutAppointmentsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutAppointmentsModifiedInput
    package?: PackageCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateManyPatientInputEnvelope = {
    data: AppointmentCreateManyPatientInput | AppointmentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientHistoryCreateWithoutPatientInput = {
    id?: string
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientHistoryCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientHistoryModifiedInput
    package?: PackageCreateNestedOneWithoutPatientHistoryInput
    appointment?: AppointmentCreateNestedOneWithoutPatientHistoryInput
  }

  export type PatientHistoryUncheckedCreateWithoutPatientInput = {
    id?: string
    packageId?: string | null
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateOrConnectWithoutPatientInput = {
    where: PatientHistoryWhereUniqueInput
    create: XOR<PatientHistoryCreateWithoutPatientInput, PatientHistoryUncheckedCreateWithoutPatientInput>
  }

  export type PatientHistoryCreateManyPatientInputEnvelope = {
    data: PatientHistoryCreateManyPatientInput | PatientHistoryCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutPatientInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    package?: PackageCreateNestedOneWithoutPaymentsInput
    createdBy: UserCreateNestedOneWithoutCreatedPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutPatientInput = {
    id?: string
    packageId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput>
  }

  export type PaymentCreateManyPatientInputEnvelope = {
    data: PaymentCreateManyPatientInput | PaymentCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientsCreatedInput = {
    update: XOR<UserUpdateWithoutPatientsCreatedInput, UserUncheckedUpdateWithoutPatientsCreatedInput>
    create: XOR<UserCreateWithoutPatientsCreatedInput, UserUncheckedCreateWithoutPatientsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientsCreatedInput, UserUncheckedUpdateWithoutPatientsCreatedInput>
  }

  export type UserUpdateWithoutPatientsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutPatientsModifiedInput = {
    update: XOR<UserUpdateWithoutPatientsModifiedInput, UserUncheckedUpdateWithoutPatientsModifiedInput>
    create: XOR<UserCreateWithoutPatientsModifiedInput, UserUncheckedCreateWithoutPatientsModifiedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientsModifiedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientsModifiedInput, UserUncheckedUpdateWithoutPatientsModifiedInput>
  }

  export type UserUpdateWithoutPatientsModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientsModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PackageUpsertWithWhereUniqueWithoutPatientInput = {
    where: PackageWhereUniqueInput
    update: XOR<PackageUpdateWithoutPatientInput, PackageUncheckedUpdateWithoutPatientInput>
    create: XOR<PackageCreateWithoutPatientInput, PackageUncheckedCreateWithoutPatientInput>
  }

  export type PackageUpdateWithWhereUniqueWithoutPatientInput = {
    where: PackageWhereUniqueInput
    data: XOR<PackageUpdateWithoutPatientInput, PackageUncheckedUpdateWithoutPatientInput>
  }

  export type PackageUpdateManyWithWhereWithoutPatientInput = {
    where: PackageScalarWhereInput
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyWithoutPatientInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientHistoryUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientHistoryWhereUniqueInput
    update: XOR<PatientHistoryUpdateWithoutPatientInput, PatientHistoryUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientHistoryCreateWithoutPatientInput, PatientHistoryUncheckedCreateWithoutPatientInput>
  }

  export type PatientHistoryUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientHistoryWhereUniqueInput
    data: XOR<PatientHistoryUpdateWithoutPatientInput, PatientHistoryUncheckedUpdateWithoutPatientInput>
  }

  export type PatientHistoryUpdateManyWithWhereWithoutPatientInput = {
    where: PatientHistoryScalarWhereInput
    data: XOR<PatientHistoryUpdateManyMutationInput, PatientHistoryUncheckedUpdateManyWithoutPatientInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutPatientInput, PaymentUncheckedUpdateWithoutPatientInput>
    create: XOR<PaymentCreateWithoutPatientInput, PaymentUncheckedCreateWithoutPatientInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutPatientInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutPatientInput, PaymentUncheckedUpdateWithoutPatientInput>
  }

  export type PaymentUpdateManyWithWhereWithoutPatientInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPatientInput>
  }

  export type UserCreateWithoutPatientHistoryCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientHistoryCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientHistoryCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientHistoryCreatedInput, UserUncheckedCreateWithoutPatientHistoryCreatedInput>
  }

  export type UserCreateWithoutPatientHistoryModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientHistoryModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientHistoryModifiedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientHistoryModifiedInput, UserUncheckedCreateWithoutPatientHistoryModifiedInput>
  }

  export type PatientCreateWithoutPatientHistoryInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientsModifiedInput
    packages?: PackageCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPatientHistoryInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPatientHistoryInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPatientHistoryInput, PatientUncheckedCreateWithoutPatientHistoryInput>
  }

  export type PackageCreateWithoutPatientHistoryInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPackagesInput
    createdBy: UserCreateNestedOneWithoutCreatedPackagesInput
    packageItems?: PackageItemCreateNestedManyWithoutPackageInput
    appointments?: AppointmentCreateNestedManyWithoutPackageInput
    payments?: PaymentCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutPatientHistoryInput = {
    id?: string
    patientId: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutPackageInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPackageInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutPatientHistoryInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutPatientHistoryInput, PackageUncheckedCreateWithoutPatientHistoryInput>
  }

  export type AppointmentCreateWithoutPatientHistoryInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutAppointmentsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutAppointmentsModifiedInput
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    package?: PackageCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutPatientHistoryInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutPatientHistoryInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientHistoryInput, AppointmentUncheckedCreateWithoutPatientHistoryInput>
  }

  export type UserUpsertWithoutPatientHistoryCreatedInput = {
    update: XOR<UserUpdateWithoutPatientHistoryCreatedInput, UserUncheckedUpdateWithoutPatientHistoryCreatedInput>
    create: XOR<UserCreateWithoutPatientHistoryCreatedInput, UserUncheckedCreateWithoutPatientHistoryCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientHistoryCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientHistoryCreatedInput, UserUncheckedUpdateWithoutPatientHistoryCreatedInput>
  }

  export type UserUpdateWithoutPatientHistoryCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientHistoryCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutPatientHistoryModifiedInput = {
    update: XOR<UserUpdateWithoutPatientHistoryModifiedInput, UserUncheckedUpdateWithoutPatientHistoryModifiedInput>
    create: XOR<UserCreateWithoutPatientHistoryModifiedInput, UserUncheckedCreateWithoutPatientHistoryModifiedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientHistoryModifiedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientHistoryModifiedInput, UserUncheckedUpdateWithoutPatientHistoryModifiedInput>
  }

  export type UserUpdateWithoutPatientHistoryModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientHistoryModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientUpsertWithoutPatientHistoryInput = {
    update: XOR<PatientUpdateWithoutPatientHistoryInput, PatientUncheckedUpdateWithoutPatientHistoryInput>
    create: XOR<PatientCreateWithoutPatientHistoryInput, PatientUncheckedCreateWithoutPatientHistoryInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPatientHistoryInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPatientHistoryInput, PatientUncheckedUpdateWithoutPatientHistoryInput>
  }

  export type PatientUpdateWithoutPatientHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientsModifiedNestedInput
    packages?: PackageUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPatientHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PackageUpsertWithoutPatientHistoryInput = {
    update: XOR<PackageUpdateWithoutPatientHistoryInput, PackageUncheckedUpdateWithoutPatientHistoryInput>
    create: XOR<PackageCreateWithoutPatientHistoryInput, PackageUncheckedCreateWithoutPatientHistoryInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutPatientHistoryInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutPatientHistoryInput, PackageUncheckedUpdateWithoutPatientHistoryInput>
  }

  export type PackageUpdateWithoutPatientHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPackagesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPackagesNestedInput
    packageItems?: PackageItemUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUpdateManyWithoutPackageNestedInput
    payments?: PaymentUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutPatientHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPackageNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type AppointmentUpsertWithoutPatientHistoryInput = {
    update: XOR<AppointmentUpdateWithoutPatientHistoryInput, AppointmentUncheckedUpdateWithoutPatientHistoryInput>
    create: XOR<AppointmentCreateWithoutPatientHistoryInput, AppointmentUncheckedCreateWithoutPatientHistoryInput>
    where?: AppointmentWhereInput
  }

  export type AppointmentUpdateToOneWithWhereWithoutPatientHistoryInput = {
    where?: AppointmentWhereInput
    data: XOR<AppointmentUpdateWithoutPatientHistoryInput, AppointmentUncheckedUpdateWithoutPatientHistoryInput>
  }

  export type AppointmentUpdateWithoutPatientHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutAppointmentsModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    package?: PackageUpdateOneWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateWithoutPackagesInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientsModifiedInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPackagesInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPackagesInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPackagesInput, PatientUncheckedCreateWithoutPackagesInput>
  }

  export type UserCreateWithoutCreatedPackagesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedPackagesInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedPackagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPackagesInput, UserUncheckedCreateWithoutCreatedPackagesInput>
  }

  export type PackageItemCreateWithoutPackageInput = {
    id?: string
    sessionCount: number
    completedCount?: number
    service: ServiceCreateNestedOneWithoutPackageItemsInput
  }

  export type PackageItemUncheckedCreateWithoutPackageInput = {
    id?: string
    serviceId: string
    sessionCount: number
    completedCount?: number
  }

  export type PackageItemCreateOrConnectWithoutPackageInput = {
    where: PackageItemWhereUniqueInput
    create: XOR<PackageItemCreateWithoutPackageInput, PackageItemUncheckedCreateWithoutPackageInput>
  }

  export type PackageItemCreateManyPackageInputEnvelope = {
    data: PackageItemCreateManyPackageInput | PackageItemCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutPackageInput = {
    id?: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutAppointmentsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutAppointmentsModifiedInput
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    service: ServiceCreateNestedOneWithoutAppointmentsInput
    staff: UserCreateNestedOneWithoutAppointmentsInput
    room: RoomCreateNestedOneWithoutAppointmentsInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPackageInput = {
    id?: string
    patientId: string
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPackageInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPackageInput, AppointmentUncheckedCreateWithoutPackageInput>
  }

  export type AppointmentCreateManyPackageInputEnvelope = {
    data: AppointmentCreateManyPackageInput | AppointmentCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type PatientHistoryCreateWithoutPackageInput = {
    id?: string
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientHistoryCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientHistoryModifiedInput
    patient: PatientCreateNestedOneWithoutPatientHistoryInput
    appointment?: AppointmentCreateNestedOneWithoutPatientHistoryInput
  }

  export type PatientHistoryUncheckedCreateWithoutPackageInput = {
    id?: string
    patientId: string
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateOrConnectWithoutPackageInput = {
    where: PatientHistoryWhereUniqueInput
    create: XOR<PatientHistoryCreateWithoutPackageInput, PatientHistoryUncheckedCreateWithoutPackageInput>
  }

  export type PatientHistoryCreateManyPackageInputEnvelope = {
    data: PatientHistoryCreateManyPackageInput | PatientHistoryCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type PaymentCreateWithoutPackageInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPaymentsInput
    createdBy: UserCreateNestedOneWithoutCreatedPaymentsInput
  }

  export type PaymentUncheckedCreateWithoutPackageInput = {
    id?: string
    patientId: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutPackageInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPackageInput, PaymentUncheckedCreateWithoutPackageInput>
  }

  export type PaymentCreateManyPackageInputEnvelope = {
    data: PaymentCreateManyPackageInput | PaymentCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutPackagesInput = {
    update: XOR<PatientUpdateWithoutPackagesInput, PatientUncheckedUpdateWithoutPackagesInput>
    create: XOR<PatientCreateWithoutPackagesInput, PatientUncheckedCreateWithoutPackagesInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPackagesInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPackagesInput, PatientUncheckedUpdateWithoutPackagesInput>
  }

  export type PatientUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientsModifiedNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type UserUpsertWithoutCreatedPackagesInput = {
    update: XOR<UserUpdateWithoutCreatedPackagesInput, UserUncheckedUpdateWithoutCreatedPackagesInput>
    create: XOR<UserCreateWithoutCreatedPackagesInput, UserUncheckedCreateWithoutCreatedPackagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPackagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPackagesInput, UserUncheckedUpdateWithoutCreatedPackagesInput>
  }

  export type UserUpdateWithoutCreatedPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPackagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PackageItemUpsertWithWhereUniqueWithoutPackageInput = {
    where: PackageItemWhereUniqueInput
    update: XOR<PackageItemUpdateWithoutPackageInput, PackageItemUncheckedUpdateWithoutPackageInput>
    create: XOR<PackageItemCreateWithoutPackageInput, PackageItemUncheckedCreateWithoutPackageInput>
  }

  export type PackageItemUpdateWithWhereUniqueWithoutPackageInput = {
    where: PackageItemWhereUniqueInput
    data: XOR<PackageItemUpdateWithoutPackageInput, PackageItemUncheckedUpdateWithoutPackageInput>
  }

  export type PackageItemUpdateManyWithWhereWithoutPackageInput = {
    where: PackageItemScalarWhereInput
    data: XOR<PackageItemUpdateManyMutationInput, PackageItemUncheckedUpdateManyWithoutPackageInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPackageInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPackageInput, AppointmentUncheckedUpdateWithoutPackageInput>
    create: XOR<AppointmentCreateWithoutPackageInput, AppointmentUncheckedCreateWithoutPackageInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPackageInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPackageInput, AppointmentUncheckedUpdateWithoutPackageInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPackageInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutPackageInput>
  }

  export type PatientHistoryUpsertWithWhereUniqueWithoutPackageInput = {
    where: PatientHistoryWhereUniqueInput
    update: XOR<PatientHistoryUpdateWithoutPackageInput, PatientHistoryUncheckedUpdateWithoutPackageInput>
    create: XOR<PatientHistoryCreateWithoutPackageInput, PatientHistoryUncheckedCreateWithoutPackageInput>
  }

  export type PatientHistoryUpdateWithWhereUniqueWithoutPackageInput = {
    where: PatientHistoryWhereUniqueInput
    data: XOR<PatientHistoryUpdateWithoutPackageInput, PatientHistoryUncheckedUpdateWithoutPackageInput>
  }

  export type PatientHistoryUpdateManyWithWhereWithoutPackageInput = {
    where: PatientHistoryScalarWhereInput
    data: XOR<PatientHistoryUpdateManyMutationInput, PatientHistoryUncheckedUpdateManyWithoutPackageInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutPackageInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutPackageInput, PaymentUncheckedUpdateWithoutPackageInput>
    create: XOR<PaymentCreateWithoutPackageInput, PaymentUncheckedCreateWithoutPackageInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutPackageInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutPackageInput, PaymentUncheckedUpdateWithoutPackageInput>
  }

  export type PaymentUpdateManyWithWhereWithoutPackageInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutPackageInput>
  }

  export type PackageCreateWithoutPackageItemsInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPackagesInput
    createdBy: UserCreateNestedOneWithoutCreatedPackagesInput
    appointments?: AppointmentCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPackageInput
    payments?: PaymentCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutPackageItemsInput = {
    id?: string
    patientId: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPackageInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutPackageItemsInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutPackageItemsInput, PackageUncheckedCreateWithoutPackageItemsInput>
  }

  export type ServiceCreateWithoutPackageItemsInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutServicesCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutServicesModifiedInput
    appointments?: AppointmentCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutPackageItemsInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutPackageItemsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutPackageItemsInput, ServiceUncheckedCreateWithoutPackageItemsInput>
  }

  export type PackageUpsertWithoutPackageItemsInput = {
    update: XOR<PackageUpdateWithoutPackageItemsInput, PackageUncheckedUpdateWithoutPackageItemsInput>
    create: XOR<PackageCreateWithoutPackageItemsInput, PackageUncheckedCreateWithoutPackageItemsInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutPackageItemsInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutPackageItemsInput, PackageUncheckedUpdateWithoutPackageItemsInput>
  }

  export type PackageUpdateWithoutPackageItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPackagesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPackagesNestedInput
    appointments?: AppointmentUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPackageNestedInput
    payments?: PaymentUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutPackageItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPackageNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type ServiceUpsertWithoutPackageItemsInput = {
    update: XOR<ServiceUpdateWithoutPackageItemsInput, ServiceUncheckedUpdateWithoutPackageItemsInput>
    create: XOR<ServiceCreateWithoutPackageItemsInput, ServiceUncheckedCreateWithoutPackageItemsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutPackageItemsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutPackageItemsInput, ServiceUncheckedUpdateWithoutPackageItemsInput>
  }

  export type ServiceUpdateWithoutPackageItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutServicesCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutServicesModifiedNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutPackageItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type UserCreateWithoutAppointmentsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointmentsCreatedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointmentsCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsCreatedInput, UserUncheckedCreateWithoutAppointmentsCreatedInput>
  }

  export type UserCreateWithoutAppointmentsModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointmentsModifiedInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointmentsModifiedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsModifiedInput, UserUncheckedCreateWithoutAppointmentsModifiedInput>
  }

  export type PatientCreateWithoutAppointmentsInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientsModifiedInput
    packages?: PackageCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPatientInput
    payments?: PaymentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPatientInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAppointmentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
  }

  export type PackageCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPackagesInput
    createdBy: UserCreateNestedOneWithoutCreatedPackagesInput
    packageItems?: PackageItemCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPackageInput
    payments?: PaymentCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    patientId: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPackageInput
    payments?: PaymentUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutAppointmentsInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutAppointmentsInput, PackageUncheckedCreateWithoutAppointmentsInput>
  }

  export type ServiceCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutServicesCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutServicesModifiedInput
    packageItems?: PackageItemCreateNestedManyWithoutServiceInput
  }

  export type ServiceUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutServiceInput
  }

  export type ServiceCreateOrConnectWithoutAppointmentsInput = {
    where: ServiceWhereUniqueInput
    create: XOR<ServiceCreateWithoutAppointmentsInput, ServiceUncheckedCreateWithoutAppointmentsInput>
  }

  export type UserCreateWithoutAppointmentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAppointmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
  }

  export type RoomCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutRoomsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutRoomsModifiedInput
  }

  export type RoomUncheckedCreateWithoutAppointmentsInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomCreateOrConnectWithoutAppointmentsInput = {
    where: RoomWhereUniqueInput
    create: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
  }

  export type PatientHistoryCreateWithoutAppointmentInput = {
    id?: string
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientHistoryCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientHistoryModifiedInput
    patient: PatientCreateNestedOneWithoutPatientHistoryInput
    package?: PackageCreateNestedOneWithoutPatientHistoryInput
  }

  export type PatientHistoryUncheckedCreateWithoutAppointmentInput = {
    id?: string
    patientId: string
    packageId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateOrConnectWithoutAppointmentInput = {
    where: PatientHistoryWhereUniqueInput
    create: XOR<PatientHistoryCreateWithoutAppointmentInput, PatientHistoryUncheckedCreateWithoutAppointmentInput>
  }

  export type PatientHistoryCreateManyAppointmentInputEnvelope = {
    data: PatientHistoryCreateManyAppointmentInput | PatientHistoryCreateManyAppointmentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAppointmentsCreatedInput = {
    update: XOR<UserUpdateWithoutAppointmentsCreatedInput, UserUncheckedUpdateWithoutAppointmentsCreatedInput>
    create: XOR<UserCreateWithoutAppointmentsCreatedInput, UserUncheckedCreateWithoutAppointmentsCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsCreatedInput, UserUncheckedUpdateWithoutAppointmentsCreatedInput>
  }

  export type UserUpdateWithoutAppointmentsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAppointmentsModifiedInput = {
    update: XOR<UserUpdateWithoutAppointmentsModifiedInput, UserUncheckedUpdateWithoutAppointmentsModifiedInput>
    create: XOR<UserCreateWithoutAppointmentsModifiedInput, UserUncheckedCreateWithoutAppointmentsModifiedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsModifiedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsModifiedInput, UserUncheckedUpdateWithoutAppointmentsModifiedInput>
  }

  export type UserUpdateWithoutAppointmentsModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsModifiedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientUpsertWithoutAppointmentsInput = {
    update: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PatientUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientsModifiedNestedInput
    packages?: PackageUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PackageUpsertWithoutAppointmentsInput = {
    update: XOR<PackageUpdateWithoutAppointmentsInput, PackageUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PackageCreateWithoutAppointmentsInput, PackageUncheckedCreateWithoutAppointmentsInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutAppointmentsInput, PackageUncheckedUpdateWithoutAppointmentsInput>
  }

  export type PackageUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPackagesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPackagesNestedInput
    packageItems?: PackageItemUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPackageNestedInput
    payments?: PaymentUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPackageNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type ServiceUpsertWithoutAppointmentsInput = {
    update: XOR<ServiceUpdateWithoutAppointmentsInput, ServiceUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<ServiceCreateWithoutAppointmentsInput, ServiceUncheckedCreateWithoutAppointmentsInput>
    where?: ServiceWhereInput
  }

  export type ServiceUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: ServiceWhereInput
    data: XOR<ServiceUpdateWithoutAppointmentsInput, ServiceUncheckedUpdateWithoutAppointmentsInput>
  }

  export type ServiceUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutServicesCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutServicesModifiedNestedInput
    packageItems?: PackageItemUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type UserUpsertWithoutAppointmentsInput = {
    update: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<UserCreateWithoutAppointmentsInput, UserUncheckedCreateWithoutAppointmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAppointmentsInput, UserUncheckedUpdateWithoutAppointmentsInput>
  }

  export type UserUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoomUpsertWithoutAppointmentsInput = {
    update: XOR<RoomUpdateWithoutAppointmentsInput, RoomUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<RoomCreateWithoutAppointmentsInput, RoomUncheckedCreateWithoutAppointmentsInput>
    where?: RoomWhereInput
  }

  export type RoomUpdateToOneWithWhereWithoutAppointmentsInput = {
    where?: RoomWhereInput
    data: XOR<RoomUpdateWithoutAppointmentsInput, RoomUncheckedUpdateWithoutAppointmentsInput>
  }

  export type RoomUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutRoomsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutRoomsModifiedNestedInput
  }

  export type RoomUncheckedUpdateWithoutAppointmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: PatientHistoryWhereUniqueInput
    update: XOR<PatientHistoryUpdateWithoutAppointmentInput, PatientHistoryUncheckedUpdateWithoutAppointmentInput>
    create: XOR<PatientHistoryCreateWithoutAppointmentInput, PatientHistoryUncheckedCreateWithoutAppointmentInput>
  }

  export type PatientHistoryUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: PatientHistoryWhereUniqueInput
    data: XOR<PatientHistoryUpdateWithoutAppointmentInput, PatientHistoryUncheckedUpdateWithoutAppointmentInput>
  }

  export type PatientHistoryUpdateManyWithWhereWithoutAppointmentInput = {
    where: PatientHistoryScalarWhereInput
    data: XOR<PatientHistoryUpdateManyMutationInput, PatientHistoryUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type PatientCreateWithoutPaymentsInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPatientsCreatedInput
    modifiedBy?: UserCreateNestedOneWithoutPatientsModifiedInput
    packages?: PackageCreateNestedManyWithoutPatientInput
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPaymentsInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    createdById: string
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    packages?: PackageUncheckedCreateNestedManyWithoutPatientInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutPaymentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
  }

  export type PackageCreateWithoutPaymentsInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    patient: PatientCreateNestedOneWithoutPackagesInput
    createdBy: UserCreateNestedOneWithoutCreatedPackagesInput
    packageItems?: PackageItemCreateNestedManyWithoutPackageInput
    appointments?: AppointmentCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateWithoutPaymentsInput = {
    id?: string
    patientId: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    packageItems?: PackageItemUncheckedCreateNestedManyWithoutPackageInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPackageInput
    patientHistory?: PatientHistoryUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageCreateOrConnectWithoutPaymentsInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutPaymentsInput, PackageUncheckedCreateWithoutPaymentsInput>
  }

  export type UserCreateWithoutCreatedPaymentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedPaymentsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedPaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPaymentsInput, UserUncheckedCreateWithoutCreatedPaymentsInput>
  }

  export type PatientUpsertWithoutPaymentsInput = {
    update: XOR<PatientUpdateWithoutPaymentsInput, PatientUncheckedUpdateWithoutPaymentsInput>
    create: XOR<PatientCreateWithoutPaymentsInput, PatientUncheckedCreateWithoutPaymentsInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPaymentsInput, PatientUncheckedUpdateWithoutPaymentsInput>
  }

  export type PatientUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientsModifiedNestedInput
    packages?: PackageUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PackageUpsertWithoutPaymentsInput = {
    update: XOR<PackageUpdateWithoutPaymentsInput, PackageUncheckedUpdateWithoutPaymentsInput>
    create: XOR<PackageCreateWithoutPaymentsInput, PackageUncheckedCreateWithoutPaymentsInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutPaymentsInput, PackageUncheckedUpdateWithoutPaymentsInput>
  }

  export type PackageUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPackagesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPackagesNestedInput
    packageItems?: PackageItemUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type UserUpsertWithoutCreatedPaymentsInput = {
    update: XOR<UserUpdateWithoutCreatedPaymentsInput, UserUncheckedUpdateWithoutCreatedPaymentsInput>
    create: XOR<UserCreateWithoutCreatedPaymentsInput, UserUncheckedCreateWithoutCreatedPaymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPaymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPaymentsInput, UserUncheckedUpdateWithoutCreatedPaymentsInput>
  }

  export type UserUpdateWithoutCreatedPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserSessionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserSessionsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
  }

  export type UserUpsertWithoutUserSessionsInput = {
    update: XOR<UserUpdateWithoutUserSessionsInput, UserUncheckedUpdateWithoutUserSessionsInput>
    create: XOR<UserCreateWithoutUserSessionsInput, UserUncheckedCreateWithoutUserSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserSessionsInput, UserUncheckedUpdateWithoutUserSessionsInput>
  }

  export type UserUpdateWithoutUserSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutConsentRecordsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConsentRecordsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConsentRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConsentRecordsInput, UserUncheckedCreateWithoutConsentRecordsInput>
  }

  export type UserUpsertWithoutConsentRecordsInput = {
    update: XOR<UserUpdateWithoutConsentRecordsInput, UserUncheckedUpdateWithoutConsentRecordsInput>
    create: XOR<UserCreateWithoutConsentRecordsInput, UserUncheckedCreateWithoutConsentRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConsentRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConsentRecordsInput, UserUncheckedUpdateWithoutConsentRecordsInput>
  }

  export type UserUpdateWithoutConsentRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConsentRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDataExportRequestsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDataExportRequestsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    gdprAuditLogs?: GDPRAuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDataExportRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDataExportRequestsInput, UserUncheckedCreateWithoutDataExportRequestsInput>
  }

  export type UserUpsertWithoutDataExportRequestsInput = {
    update: XOR<UserUpdateWithoutDataExportRequestsInput, UserUncheckedUpdateWithoutDataExportRequestsInput>
    create: XOR<UserCreateWithoutDataExportRequestsInput, UserUncheckedCreateWithoutDataExportRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDataExportRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDataExportRequestsInput, UserUncheckedUpdateWithoutDataExportRequestsInput>
  }

  export type UserUpdateWithoutDataExportRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDataExportRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    gdprAuditLogs?: GDPRAuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutGdprAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveCreateNestedManyWithoutStaffInput
    appointments?: AppointmentCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    userSessions?: UserSessionCreateNestedManyWithoutUserInput
    createdPackages?: PackageCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    patientsCreated?: PatientCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGdprAuditLogsInput = {
    id?: string
    email: string
    password: string
    firstName: string
    lastName: string
    role?: $Enums.Role
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    avatar?: string | null
    phone?: string | null
    timezone?: string | null
    resetPasswordToken?: string | null
    resetPasswordExpires?: Date | string | null
    emailVerified?: boolean
    emailVerificationToken?: string | null
    mfaEnabled?: boolean
    mfaSecret?: string | null
    mfaBackupCodes?: UserCreatemfaBackupCodesInput | string[]
    mfaLastUsed?: Date | string | null
    refreshToken?: string | null
    lastLoginAt?: Date | string | null
    specialization?: $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedCreateNestedManyWithoutStaffInput
    staffLeaves?: StaffLeaveUncheckedCreateNestedManyWithoutStaffInput
    appointments?: AppointmentUncheckedCreateNestedManyWithoutStaffInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    userSessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    createdPackages?: PackageUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayments?: PaymentUncheckedCreateNestedManyWithoutCreatedByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    patientsCreated?: PatientUncheckedCreateNestedManyWithoutCreatedByInput
    appointmentsCreated?: AppointmentUncheckedCreateNestedManyWithoutCreatedByInput
    servicesCreated?: ServiceUncheckedCreateNestedManyWithoutCreatedByInput
    roomsCreated?: RoomUncheckedCreateNestedManyWithoutCreatedByInput
    patientHistoryCreated?: PatientHistoryUncheckedCreateNestedManyWithoutCreatedByInput
    patientsModified?: PatientUncheckedCreateNestedManyWithoutModifiedByInput
    appointmentsModified?: AppointmentUncheckedCreateNestedManyWithoutModifiedByInput
    servicesModified?: ServiceUncheckedCreateNestedManyWithoutModifiedByInput
    roomsModified?: RoomUncheckedCreateNestedManyWithoutModifiedByInput
    patientHistoryModified?: PatientHistoryUncheckedCreateNestedManyWithoutModifiedByInput
    consentRecords?: ConsentRecordUncheckedCreateNestedManyWithoutUserInput
    dataExportRequests?: DataExportRequestUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGdprAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGdprAuditLogsInput, UserUncheckedCreateWithoutGdprAuditLogsInput>
  }

  export type UserUpsertWithoutGdprAuditLogsInput = {
    update: XOR<UserUpdateWithoutGdprAuditLogsInput, UserUncheckedUpdateWithoutGdprAuditLogsInput>
    create: XOR<UserCreateWithoutGdprAuditLogsInput, UserUncheckedCreateWithoutGdprAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGdprAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGdprAuditLogsInput, UserUncheckedUpdateWithoutGdprAuditLogsInput>
  }

  export type UserUpdateWithoutGdprAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGdprAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    timezone?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetPasswordExpires?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    emailVerificationToken?: NullableStringFieldUpdateOperationsInput | string | null
    mfaEnabled?: BoolFieldUpdateOperationsInput | boolean
    mfaSecret?: NullableStringFieldUpdateOperationsInput | string | null
    mfaBackupCodes?: UserUpdatemfaBackupCodesInput | string[]
    mfaLastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: NullableEnumStaffSpecializationFieldUpdateOperationsInput | $Enums.StaffSpecialization | null
    staffSchedules?: StaffScheduleUncheckedUpdateManyWithoutStaffNestedInput
    staffLeaves?: StaffLeaveUncheckedUpdateManyWithoutStaffNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutStaffNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    userSessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    createdPackages?: PackageUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayments?: PaymentUncheckedUpdateManyWithoutCreatedByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    patientsCreated?: PatientUncheckedUpdateManyWithoutCreatedByNestedInput
    appointmentsCreated?: AppointmentUncheckedUpdateManyWithoutCreatedByNestedInput
    servicesCreated?: ServiceUncheckedUpdateManyWithoutCreatedByNestedInput
    roomsCreated?: RoomUncheckedUpdateManyWithoutCreatedByNestedInput
    patientHistoryCreated?: PatientHistoryUncheckedUpdateManyWithoutCreatedByNestedInput
    patientsModified?: PatientUncheckedUpdateManyWithoutModifiedByNestedInput
    appointmentsModified?: AppointmentUncheckedUpdateManyWithoutModifiedByNestedInput
    servicesModified?: ServiceUncheckedUpdateManyWithoutModifiedByNestedInput
    roomsModified?: RoomUncheckedUpdateManyWithoutModifiedByNestedInput
    patientHistoryModified?: PatientHistoryUncheckedUpdateManyWithoutModifiedByNestedInput
    consentRecords?: ConsentRecordUncheckedUpdateManyWithoutUserNestedInput
    dataExportRequests?: DataExportRequestUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StaffScheduleCreateManyStaffInput = {
    id?: string
    dayOfWeek: number
    startTime: string
    endTime: string
    breakStartTime?: string | null
    breakEndTime?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StaffLeaveCreateManyStaffInput = {
    id?: string
    startDate: Date | string
    endDate: Date | string
    reason?: string | null
    isApproved?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyStaffInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: $Enums.AuditAction
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageCreateManyCreatedByInput = {
    id?: string
    patientId: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateManyCreatedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    scheduledFor?: Date | string | null
    sentAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientCreateManyCreatedByInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyCreatedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCreateManyCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    modifiedById?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomCreateManyCreatedByInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    modifiedById?: string | null
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateManyCreatedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientCreateManyModifiedByInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    email?: string | null
    phone: string
    address?: string | null
    socialInsuranceNumber?: string | null
    notes?: string | null
    doctorReferral?: string | null
    insuranceType?: $Enums.InsuranceType | null
    createdById: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyModifiedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ServiceCreateManyModifiedByInput = {
    id?: string
    name: string
    description?: string | null
    duration: number
    price: Decimal | DecimalJsLike | number | string
    category: $Enums.ServiceCategory
    categoryColor?: string
    sessionCount?: number
    isForChildren?: boolean
    isVoucher?: boolean
    createdById: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoomCreateManyModifiedByInput = {
    id?: string
    name: string
    description?: string | null
    features?: RoomCreatefeaturesInput | string[]
    createdById: string
    isActive?: boolean
    capacity?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateManyModifiedByInput = {
    id?: string
    patientId: string
    packageId?: string | null
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ConsentRecordCreateManyUserInput = {
    id?: string
    consentType: $Enums.ConsentType
    granted?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    consentString?: string | null
    expiresAt?: Date | string | null
    withdrawnAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DataExportRequestCreateManyUserInput = {
    id?: string
    requestType?: $Enums.DataRequestType
    status?: $Enums.DataRequestStatus
    requestedData?: DataExportRequestCreaterequestedDataInput | string[]
    filePath?: string | null
    downloadedAt?: Date | string | null
    expiresAt: Date | string
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GDPRAuditLogCreateManyUserInput = {
    id?: string
    action: $Enums.GDPRAction
    dataType: string
    recordId?: string | null
    legalBasis?: string | null
    purpose: string
    ipAddress?: string | null
    userAgent?: string | null
    consentId?: string | null
    automated?: boolean
    createdAt?: Date | string
  }

  export type StaffScheduleUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    breakStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffScheduleUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    breakStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffScheduleUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    dayOfWeek?: IntFieldUpdateOperationsInput | number
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    breakStartTime?: NullableStringFieldUpdateOperationsInput | string | null
    breakEndTime?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffLeaveUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffLeaveUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StaffLeaveUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    isApproved?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutAppointmentsModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    package?: PackageUpdateOneWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutStaffInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumAuditActionFieldUpdateOperationsInput | $Enums.AuditAction
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPackagesNestedInput
    packageItems?: PackageItemUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPackageNestedInput
    payments?: PaymentUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPackageNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
    package?: PackageUpdateOneWithoutPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    scheduledFor?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedBy?: UserUpdateOneWithoutPatientsModifiedNestedInput
    packages?: PackageUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedBy?: UserUpdateOneWithoutAppointmentsModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    package?: PackageUpdateOneWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedBy?: UserUpdateOneWithoutServicesModifiedNestedInput
    packageItems?: PackageItemUpdateManyWithoutServiceNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutServiceNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedBy?: UserUpdateOneWithoutRoomsModifiedNestedInput
    appointments?: AppointmentUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    modifiedBy?: UserUpdateOneWithoutPatientHistoryModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutPatientHistoryNestedInput
    package?: PackageUpdateOneWithoutPatientHistoryNestedInput
    appointment?: AppointmentUpdateOneWithoutPatientHistoryNestedInput
  }

  export type PatientHistoryUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientsCreatedNestedInput
    packages?: PackageUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPatientNestedInput
    payments?: PaymentUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packages?: PackageUncheckedUpdateManyWithoutPatientNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPatientNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    address?: NullableStringFieldUpdateOperationsInput | string | null
    socialInsuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    doctorReferral?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceType?: NullableEnumInsuranceTypeFieldUpdateOperationsInput | $Enums.InsuranceType | null
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    package?: PackageUpdateOneWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ServiceUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutServicesCreatedNestedInput
    packageItems?: PackageItemUpdateManyWithoutServiceNestedInput
    appointments?: AppointmentUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutServiceNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutServiceNestedInput
  }

  export type ServiceUncheckedUpdateManyWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    category?: EnumServiceCategoryFieldUpdateOperationsInput | $Enums.ServiceCategory
    categoryColor?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    isForChildren?: BoolFieldUpdateOperationsInput | boolean
    isVoucher?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoomUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutRoomsCreatedNestedInput
    appointments?: AppointmentUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type RoomUncheckedUpdateManyWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    features?: RoomUpdatefeaturesInput | string[]
    createdById?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientHistoryCreatedNestedInput
    patient?: PatientUpdateOneRequiredWithoutPatientHistoryNestedInput
    package?: PackageUpdateOneWithoutPatientHistoryNestedInput
    appointment?: AppointmentUpdateOneWithoutPatientHistoryNestedInput
  }

  export type PatientHistoryUncheckedUpdateWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUncheckedUpdateManyWithoutModifiedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentRecordUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    consentType?: EnumConsentTypeFieldUpdateOperationsInput | $Enums.ConsentType
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentString?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    withdrawnAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentRecordUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    consentType?: EnumConsentTypeFieldUpdateOperationsInput | $Enums.ConsentType
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentString?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    withdrawnAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ConsentRecordUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    consentType?: EnumConsentTypeFieldUpdateOperationsInput | $Enums.ConsentType
    granted?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentString?: NullableStringFieldUpdateOperationsInput | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    withdrawnAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataExportRequestUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestType?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestedData?: DataExportRequestUpdaterequestedDataInput | string[]
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    downloadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataExportRequestUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestType?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestedData?: DataExportRequestUpdaterequestedDataInput | string[]
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    downloadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DataExportRequestUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestType?: EnumDataRequestTypeFieldUpdateOperationsInput | $Enums.DataRequestType
    status?: EnumDataRequestStatusFieldUpdateOperationsInput | $Enums.DataRequestStatus
    requestedData?: DataExportRequestUpdaterequestedDataInput | string[]
    filePath?: NullableStringFieldUpdateOperationsInput | string | null
    downloadedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GDPRAuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumGDPRActionFieldUpdateOperationsInput | $Enums.GDPRAction
    dataType?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentId?: NullableStringFieldUpdateOperationsInput | string | null
    automated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GDPRAuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumGDPRActionFieldUpdateOperationsInput | $Enums.GDPRAction
    dataType?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentId?: NullableStringFieldUpdateOperationsInput | string | null
    automated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GDPRAuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: EnumGDPRActionFieldUpdateOperationsInput | $Enums.GDPRAction
    dataType?: StringFieldUpdateOperationsInput | string
    recordId?: NullableStringFieldUpdateOperationsInput | string | null
    legalBasis?: NullableStringFieldUpdateOperationsInput | string | null
    purpose?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    consentId?: NullableStringFieldUpdateOperationsInput | string | null
    automated?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateManyRoomInput = {
    id?: string
    patientId: string
    packageId?: string | null
    serviceId: string
    staffId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutAppointmentsModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    package?: PackageUpdateOneWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutRoomInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageItemCreateManyServiceInput = {
    id?: string
    packageId: string
    sessionCount: number
    completedCount?: number
  }

  export type AppointmentCreateManyServiceInput = {
    id?: string
    patientId: string
    packageId?: string | null
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageItemUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
    package?: PackageUpdateOneRequiredWithoutPackageItemsNestedInput
  }

  export type PackageItemUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
  }

  export type PackageItemUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutAppointmentsModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    package?: PackageUpdateOneWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutServiceInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageCreateManyPatientInput = {
    id?: string
    name: string
    totalPrice: Decimal | DecimalJsLike | number | string
    discountAmount?: Decimal | DecimalJsLike | number | string | null
    finalPrice: Decimal | DecimalJsLike | number | string
    status?: $Enums.PackageStatus
    paymentStatus?: $Enums.PaymentStatus
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppointmentCreateManyPatientInput = {
    id?: string
    packageId?: string | null
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateManyPatientInput = {
    id?: string
    packageId?: string | null
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateManyPatientInput = {
    id?: string
    packageId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedPackagesNestedInput
    packageItems?: PackageItemUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutPackageNestedInput
    payments?: PaymentUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageItems?: PackageItemUncheckedUpdateManyWithoutPackageNestedInput
    appointments?: AppointmentUncheckedUpdateManyWithoutPackageNestedInput
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutPackageNestedInput
    payments?: PaymentUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    totalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discountAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    finalPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    status?: EnumPackageStatusFieldUpdateOperationsInput | $Enums.PackageStatus
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutAppointmentsModifiedNestedInput
    package?: PackageUpdateOneWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientHistoryCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientHistoryModifiedNestedInput
    package?: PackageUpdateOneWithoutPatientHistoryNestedInput
    appointment?: AppointmentUpdateOneWithoutPatientHistoryNestedInput
  }

  export type PatientHistoryUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneWithoutPaymentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageItemCreateManyPackageInput = {
    id?: string
    serviceId: string
    sessionCount: number
    completedCount?: number
  }

  export type AppointmentCreateManyPackageInput = {
    id?: string
    patientId: string
    serviceId: string
    staffId: string
    roomId: string
    scheduledDate: Date | string
    startTime: string
    endTime: string
    status?: $Enums.AppointmentStatus
    notes?: string | null
    hasConflict?: boolean
    conflictReason?: string | null
    isVisible?: boolean
    createdById: string
    modifiedById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryCreateManyPackageInput = {
    id?: string
    patientId: string
    appointmentId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateManyPackageInput = {
    id?: string
    patientId: string
    amount: Decimal | DecimalJsLike | number | string
    paymentMethod: $Enums.PaymentMethod
    paidSessionsCount?: number | null
    status?: $Enums.PaymentStatus
    paidAt?: Date | string | null
    notes?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PackageItemUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
    service?: ServiceUpdateOneRequiredWithoutPackageItemsNestedInput
  }

  export type PackageItemUncheckedUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
  }

  export type PackageItemUncheckedUpdateManyWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    sessionCount?: IntFieldUpdateOperationsInput | number
    completedCount?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutAppointmentsCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutAppointmentsModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutAppointmentsNestedInput
    service?: ServiceUpdateOneRequiredWithoutAppointmentsNestedInput
    staff?: UserUpdateOneRequiredWithoutAppointmentsNestedInput
    room?: RoomUpdateOneRequiredWithoutAppointmentsNestedInput
    patientHistory?: PatientHistoryUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientHistory?: PatientHistoryUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    serviceId?: StringFieldUpdateOperationsInput | string
    staffId?: StringFieldUpdateOperationsInput | string
    roomId?: StringFieldUpdateOperationsInput | string
    scheduledDate?: DateTimeFieldUpdateOperationsInput | Date | string
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    status?: EnumAppointmentStatusFieldUpdateOperationsInput | $Enums.AppointmentStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    hasConflict?: BoolFieldUpdateOperationsInput | boolean
    conflictReason?: NullableStringFieldUpdateOperationsInput | string | null
    isVisible?: BoolFieldUpdateOperationsInput | boolean
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientHistoryCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientHistoryModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutPatientHistoryNestedInput
    appointment?: AppointmentUpdateOneWithoutPatientHistoryNestedInput
  }

  export type PatientHistoryUncheckedUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUncheckedUpdateManyWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    appointmentId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPaymentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedPaymentsNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyWithoutPackageInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentMethod?: EnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod
    paidSessionsCount?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paidAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryCreateManyAppointmentInput = {
    id?: string
    patientId: string
    packageId?: string | null
    mainSubjectiveProblem?: string | null
    symptomHistory?: string | null
    previousCourseAndTherapy?: string | null
    patientGoals?: string | null
    activityStatus?: string | null
    trunkAndHeadParticularities?: string | null
    edemaTrophicsAtrophies?: string | null
    notes?: string | null
    createdById: string
    modifiedById?: string | null
    recordedAt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PatientHistoryUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPatientHistoryCreatedNestedInput
    modifiedBy?: UserUpdateOneWithoutPatientHistoryModifiedNestedInput
    patient?: PatientUpdateOneRequiredWithoutPatientHistoryNestedInput
    package?: PackageUpdateOneWithoutPatientHistoryNestedInput
  }

  export type PatientHistoryUncheckedUpdateWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientHistoryUncheckedUpdateManyWithoutAppointmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    packageId?: NullableStringFieldUpdateOperationsInput | string | null
    mainSubjectiveProblem?: NullableStringFieldUpdateOperationsInput | string | null
    symptomHistory?: NullableStringFieldUpdateOperationsInput | string | null
    previousCourseAndTherapy?: NullableStringFieldUpdateOperationsInput | string | null
    patientGoals?: NullableStringFieldUpdateOperationsInput | string | null
    activityStatus?: NullableStringFieldUpdateOperationsInput | string | null
    trunkAndHeadParticularities?: NullableStringFieldUpdateOperationsInput | string | null
    edemaTrophicsAtrophies?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    modifiedById?: NullableStringFieldUpdateOperationsInput | string | null
    recordedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}